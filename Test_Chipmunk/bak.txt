
//auto title = new Box();
//title->AutoRelease();
//title->color = { 0, 255, 0, 0 };
//title->dock = { 0.5, 1 };
//title->anchor = { 0.5, 1 };
//title->size = { 300, 30 };
//title->offset = { 0, -1 };
//mb->Add( title );

//auto close = Box::Create();
//close->color = { 255, 0, 0, 0 };
//close->dock = { 1, 1 };
//close->anchor = { 1, 1 };
//close->size = { 30, 30 };
//close->offset = { -1, -1 };
//mb->Add( close );








#ifdef USE_STL
    for( auto node : G::scene->childs )
    {
#else
    for( auto i = 0; i < G::scene->childs.size(); ++i )
    {
        auto node = G::scene->childs[ i ];
#endif
        auto bn = (BoxNode*)node;
        if( bn->size.width <= 1024 )
        {
            bn->size.width += 1;
            bn->size.height += 1;
        }
        else
        {
            bn->size.width = 0;
            bn->size.height = 0;
        }
        bn->dirty = true;
    }



    for( auto i = 0; i < 1024; i += 20 )
    {
        auto bn = BoxNode::Create();
        bn->offset = { scene->size.width / 2, scene->size.height / 2 };
        bn->size = { i, i };
        scene->Add( bn );
    }








// 从下往上，从左往右，2进制从高往低位（默认），每4字节填充一排，即 32 像素
static GLubyte fly[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x03, 0x80, 0x01, 0xC0, 0x06, 0xC0, 0x03, 0x60,
    0x04, 0x60, 0x06, 0x20, 0x04, 0x30, 0x0C, 0x20,
    0x04, 0x18, 0x18, 0x20, 0x04, 0x0C, 0x30, 0x20,
    0x04, 0x06, 0x60, 0x20, 0x44, 0x03, 0xC0, 0x22,
    0x44, 0x01, 0x80, 0x22, 0x44, 0x01, 0x80, 0x22,
    0x44, 0x01, 0x80, 0x22, 0x44, 0x01, 0x80, 0x22,
    0x44, 0x01, 0x80, 0x22, 0x44, 0x01, 0x80, 0x22,
    0x66, 0x01, 0x80, 0x66, 0x33, 0x01, 0x80, 0xCC,
    0x19, 0x81, 0x81, 0x98, 0x0C, 0xC1, 0x83, 0x30,
    0x07, 0xe1, 0x87, 0xe0, 0x03, 0x3f, 0xfc, 0xc0,
    0x03, 0x31, 0x8c, 0xc0, 0x03, 0x33, 0xcc, 0xc0,
    0x06, 0x64, 0x26, 0x60, 0x0c, 0xcc, 0x33, 0x30,
    0x18, 0xcc, 0x33, 0x18, 0x10, 0xc4, 0x23, 0x08,
    0x10, 0x63, 0xC6, 0x08, 0x10, 0x30, 0x0c, 0x08,
    0x10, 0x18, 0x18, 0x08, 0x10, 0x00, 0x00, 0x08
};

void Node1::Draw( int durationTicks )
{
    glClear( GL_COLOR_BUFFER_BIT );
    glEnable( GL_POLYGON_STIPPLE );
    //glPixelStorei( GL_UNPACK_ALIGNMENT, 1 );
    glPolygonStipple( fly );
    glRects( 10, 10, G::window->width - 10, G::window->height - 10 );
    glDisable( GL_POLYGON_STIPPLE );

    Node::Draw( durationTicks );
}












// todo: backup gl state

//// init gl
//glEnable( GL_LINE_SMOOTH );
//glEnable( GL_POINT_SMOOTH );

//glHint( GL_LINE_SMOOTH_HINT, GL_DONT_CARE );
//glHint( GL_POINT_SMOOTH_HINT, GL_DONT_CARE );

//glEnable( GL_BLEND );
//glBlendFunc( GL_ONE, GL_ONE_MINUS_SRC_ALPHA );      // ( sC * 1 ) + ( dC * ( 1 - sA ) ) = rC

//glClear( GL_COLOR_BUFFER_BIT );
//glMatrixMode( GL_MODELVIEW );
//glLoadIdentity();
//glOrtho( 0, 1, 0, 1, -1, 1 );

glClearColor( 0, 0, 0, 0 );
//glClearDepth( 1 );
//glClear( GL_COLOR_BUFFER_BIT );// | GL_DEPTH_BUFFER_BIT );


// 将就在这里输出静态图了
glRects( 5, 5, _w->_w - 5, _w->_h - 5 );

//glColor3b( 255, 0, 0 );
glLineWidth( 3 );
glEnable( GL_LINE_STIPPLE );
glLineStipple( 2, 0x3f07 );
glBegin( GL_LINE_LOOP );
{
    glVertex2s( 191, 594 );
    glVertex2s( 390, 21 );
    glVertex2s( 594, 577 );
    glVertex2s( 12, 236 );
    glVertex2s( 779, 262 );
}
glEnd();

#define PI 3.1415926535898
//glPolygonMode( GL_FRONT_AND_BACK, GL_LINE );
//glEnable( GL_CULL_FACE );
//glCullFace( GL_BACK );
GLint circle_points = 100;

glColor3f( 1, 0, 0 );
glBegin( GL_POLYGON );
for( int i = 0; i < circle_points; ++i )
{
    auto angle = 2 * PI * i / circle_points;
    glVertex2f( cos( angle ) * 100 + 200, sin( angle ) * 100 + 200 );
}
glEnd();

glColor3f( 0, 1, 0 );
glBegin( GL_POLYGON );
for( int i = circle_points - 1; i >= 0; --i )
{
    auto angle = 2 * PI * i / circle_points;
    glVertex2f( cos( angle ) * 100 + 250, sin( angle ) * 100 + 250 );
}
glEnd();


auto drawOneLinef = []( float x1, float y1, float x2, float y2 )
{
    glBegin( GL_LINES );
    glVertex2f( x1, y1 );
    glVertex2f( x2, y2 );
    glEnd();
};

int i;
glClear( GL_COLOR_BUFFER_BIT );
glColor3f( 1, 1, 1 );
glEnable( GL_LINE_STIPPLE );

glLineStipple( 1, 0x0101 );
drawOneLinef( 50, 125, 150, 125 );
glLineStipple( 1, 0x00FF );
drawOneLinef( 150, 125, 250, 125 );
glLineStipple( 1, 0x1C47 );
drawOneLinef( 250, 125, 350, 125 );





// 从下往上，从左往右，2进制从高往低位（默认），每4字节填充一排，即 32 像素
GLubyte mask[] = 
{
    0xAA, 0xAA, 0xAA, 0xAA, 0x55, 0x55, 0x55, 0x55,
    0xAA, 0xAA, 0xAA, 0xAA, 0x55, 0x55, 0x55, 0x55,
    0xAA, 0xAA, 0xAA, 0xAA, 0x55, 0x55, 0x55, 0x55,
    0xAA, 0xAA, 0xAA, 0xAA, 0x55, 0x55, 0x55, 0x55,
    0xAA, 0xAA, 0xAA, 0xAA, 0x55, 0x55, 0x55, 0x55,
    0xAA, 0xAA, 0xAA, 0xAA, 0x55, 0x55, 0x55, 0x55,
    0xAA, 0xAA, 0xAA, 0xAA, 0x55, 0x55, 0x55, 0x55,
    0xAA, 0xAA, 0xAA, 0xAA, 0x55, 0x55, 0x55, 0x55,
    0xAA, 0xAA, 0xAA, 0xAA, 0x55, 0x55, 0x55, 0x55,
    0xAA, 0xAA, 0xAA, 0xAA, 0x55, 0x55, 0x55, 0x55,
    0xAA, 0xAA, 0xAA, 0xAA, 0x55, 0x55, 0x55, 0x55,
    0xAA, 0xAA, 0xAA, 0xAA, 0x55, 0x55, 0x55, 0x55,
    0xAA, 0xAA, 0xAA, 0xAA, 0x55, 0x55, 0x55, 0x55,
    0xAA, 0xAA, 0xAA, 0xAA, 0x55, 0x55, 0x55, 0x55,
    0xAA, 0xAA, 0xAA, 0xAA, 0x55, 0x55, 0x55, 0x55,
    0xAA, 0xAA, 0xAA, 0xAA, 0x55, 0x55, 0x55, 0x55,
};

glClearColor( 0, 0, 0, 0 );
glShadeModel( GL_FLAT );

glColor3f( 1, 1, 1 );
glRects( 25, 25, 125, 125 );
glEnable( GL_POLYGON_STIPPLE );
glPolygonStipple( mask );
glRects( 125, 25, 225, 125 );

    // 输出
    glFlush();









	

//// 随便写个对象池 for chipmunk
//template<typename T>
//struct cpPool : Pool
//{
//    cpPool()
//    {
//        Pool::init( sizeof( T ) );
//    }
//    inline T* alloc()
//    {
//#if __DEBUG
//        ++_counter;
//#endif
//        return (T*)Pool::alloc();
//    }
//    inline void free( T* p )
//    {
//#if __DEBUG
//        --_counter;
//#endif
//        Pool::free( p );
//    }
//#if __DEBUG
//    int _counter = 0;
//#endif
//};
//// 对象池
//cpPool<cpSpace> spacePool;
//cpPool<cpShape> shapePool;
//cpPool<cpCircleShape> circleShapePool;
//cpPool<cpSegmentShape> segmentShapePool;
//cpPool<cpBody> bodyPool;



////glClearColor( 0, 0, 0, 0 );
////glMatrixMode( GL_PROJECTION );
////glLoadIdentity();
////glOrtho( 0, 1, 0, 1, -1, 1 );

//float theta = 0;

//w.run( [ &]
//{
//    //glClear( GL_COLOR_BUFFER_BIT );
//    //glColor3f( 1, 1, 1 );
//    //glBegin( GL_POLYGON );
//    //{
//    //    glVertex3f( 0.25, 0.25, 0.0 );
//    //    glVertex3f( 0.75, 0.25, 0.0 );
//    //    glVertex3f( 0.75, 0.75, 0.0 );
//    //    glVertex3f( 0.25, 0.75, 0.0 );
//    //}
//    //glEnd();

//    glClearColor( 0.0f, 0.0f, 0.0f, 0.0f );
//    glClear( GL_COLOR_BUFFER_BIT );

//    glPushMatrix();
//    glRotatef( theta, 0.0f, 0.0f, 1.0f );
//    glBegin( GL_TRIANGLES );
//    glColor3f( 1.0f, 0.0f, 0.0f ); glVertex2f( 0.0f, 1.0f );
//    glColor3f( 0.0f, 1.0f, 0.0f ); glVertex2f( 0.87f, -0.5f );
//    glColor3f( 0.0f, 0.0f, 1.0f ); glVertex2f( -0.87f, -0.5f );
//    glEnd();
//    glPopMatrix();

//    theta += 1.0f;

//    cout( ++counter );
//    //std::this_thread::sleep_for( std::chrono::milliseconds( 100 ) );
//    //printf( "." );
//} );



/*
// logic + render 循环伪代码

// double 时长版:

单步时间 = 1 / 每秒次数;
单步时间限制 = 单步时间 * 1;              // * 1: 不跳帧，如果机能不行，游戏会被拖慢，但不会走样

起始时间 = 0;
积蓄时间 = 0;
上次时间 = 取当前时间();

while( !退出 )
{
当前时间 = 取当前时间();
经过时间 = 当前时间 - 上次时间;
if( 经过时间 > 单步时间限制 ) 经过时间 = 单步时间限制;
上次时间 = 当前时间;

积蓄时间 += 经过时间;
while( 积蓄时间 >= 单步时间 )
{
逻辑处理( 起始时间, 单步时间 );
起始时间 += 单步时间;
积蓄时间 -= 单步时间;
}

绘制();
}


// 步进版:


逻辑帧时长 = 1 / 每秒次数;         // 时长可能是整型. 比如 50ms 啥的
逻辑帧时长限制 = 逻辑帧时长 * 1;   // * 1: 不跳帧，如果机能不行，游戏会被拖慢，但不会异常

积蓄时间 = 0;
上次时间 = 取当前时间();

逻辑帧计数 = 0;

while( !退出 )                    // 这段代码有可能是经由 engine schedule 之类来 call
{
当前时间 = 取当前时间();
经过时间 = 当前时间 - 上次时间;
if( 经过时间 > 单步时间限制 ) 经过时间 = 单步时间限制;
上次时间 = 当前时间;

if( 暂停 ) 跳转到绘制();      // 经由 schedule call 就是 return 了

积蓄时间 += 经过时间;
while( 积蓄时间 >= 单步时间 )
{
逻辑处理( 逻辑帧计数++ );
积蓄时间 -= 单步时间;
}

绘制();                       // 经由 schedule call 就没有这个函数调用了
}


*/



//// 每 0.2 秒输出一次总 counter 及 每秒 count
//std::chrono::milliseconds refreshDuration( 200 );
//std::chrono::seconds durationSec1( 1 );
//std::chrono::time_point<std::chrono::system_clock> lastTime;
//auto firstTime = std::chrono::system_clock::now();
//auto cout = [ &]( long long val )
//{
//    auto now = std::chrono::system_clock::now();
//    if( now - lastTime >= refreshDuration )
//    {
//        auto elapsedSeconds = std::chrono::duration_cast<std::chrono::seconds>( now - firstTime ).count();
//        if( !elapsedSeconds ) elapsedSeconds = 1;
//        printf( "%lld ", val / elapsedSeconds );
//        lastTime = now;
//    }
//};
//long long counter = 0;
