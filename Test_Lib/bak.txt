#include "Lib/All.h"
int main()
{
    //{
    //    int length = 9999999;
    //    List<bool> s1;
    //    Stopwatch sw;
    //    for( int i = 0; i < length; ++i )
    //    {
    //        s1.push( ( i % 2 ) == 0 );
    //    }
    //    std::cout << sw.elapsed() << " " << s1.size() << " " << ( s1.top() ? "true" : "false" ) << std::endl;
    //    std::cout << s1.byteSize() << std::endl;

    //    //while( s1.size() )
    //    //{
    //    //    std::cout << ( s1.top() ? "true " : "false " );
    //    //    s1.pop();
    //    //}
    //    //std::cout << s1.byteSize() << std::endl;

    //    sw.reset();
    //    std::stack<bool> s2;
    //    for( int i = 0; i < length; ++i )
    //    {
    //        s2.push( ( i % 2 ) == 0 );
    //    }
    //    std::cout << sw.elapsed() << " " << s2.size() << " " << ( s2.top() ? "true" : "false" ) << std::endl;
    //}

    //{
    //    int length = 10000000;
    //    List<char> s1;
    //    Stopwatch sw;
    //    for( int i = 0; i < length; ++i )
    //    {
    //        s1.push( i );
    //    }
    //    std::cout << sw.elapsed() << " " << s1.size() << " " << s1.top() << std::endl;
    //}
    //sw.reset();
    //List<char> s11;
    //for( int i = 0; i < 999; ++i )
    //{
    //    s11 = s1;
    //}
    //std::cout << sw.elapsed() << " " << s11.size() << " " << s11.top() << std::endl;

    //std::stack<char> s2;
    //sw.reset();
    //for( int i = 0; i < length; ++i )
    //{
    //    s2.push( i );
    //}
    //std::cout << sw.elapsed() << " " << s2.size() << " " << s2.top() << std::endl;
    //sw.reset();
    //std::stack<char> s22;
    //for( int i = 0; i < 999; ++i )
    //{
    //    s22 = s2;
    //}
    //std::cout << sw.elapsed() << " " << s22.size() << " " << s22.top() << std::endl;



    //std::cout << sizeof( Pool<4,4096> ) << std::endl;

    Pool pool( 4 );
    pool.collect();
    //for( int i = 0; i < 999; ++i )
    //{
    //    auto p = (int*)pool.alloc();
    //    std::cout << p << std::endl;
    //}
    //pool.clear();

    return 0;
}





//#include "Lib/All.h"
//int main()
//{
//    //String s = "a";
//    //std::cout << s.getHash() << std::endl;
//    //s = "as";
//    //std::cout << s.getHash() << std::endl;
//    //s = "asd";
//    //std::cout << s.getHash() << std::endl;
//    //s = "asdf";
//    //std::cout << s.getHash() << std::endl;
//    //s = "asdfq";
//    //std::cout << s.getHash() << std::endl;
//    //s = "asdfqw";
//    //std::cout << s.getHash() << std::endl;
//    //s = "asdfqwe";
//    //std::cout << s.getHash() << std::endl;
//    //s = "asdfqwer";
//    //std::cout << s.getHash() << std::endl;
//    String s = "asdfqwerasdfqwerasdfqwerasdfqwer";
//    int hash = 0;
//    Stopwatch sw;
//    for( int i = 0; i < 99999999; ++i )
//    {
//        hash = s.getHash_CS();
//    }
//    std::cout << hash << ", " << sw.elapsed() << std::endl;
//    sw.reset();
//    for( int i = 0; i < 99999999; ++i )
//    {
//        hash = s.getHash_Java();
//    }
//    std::cout << hash << ", " << sw.elapsed() << std::endl;
//    sw.reset();
//    for( int i = 0; i < 99999999; ++i )
//    {
//        hash = s.getHash_Lua();
//    }
//    std::cout << hash << ", " << sw.elapsed() << std::endl;
//    return 0;
//}




//#include "Lib/All.h"
//
//int main()
//{
//String s1( "ASDFQWERASDFQWERASDFQWER", true );          // ref str
//char buf[ 16 ];
//String s2( buf, _countof( buf ), 0 );   // ref buf
//s2 = s1;                                // copy str to buf
//String s3 = buf;                        // copy from buf


//Stopwatch sw;
//{
//    std::string s;
//    for( int i = 0; i < 99999999; ++i )
//    {
//        s = s1;
//        for( int i = 0; i < s.size(); i++ )
//            s[ i ] = tolower( s[ i ] );
//    }
//    std::cout << s << std::endl;
//}
//std::cout << sw.elapsed() << std::endl;

//sw.reset();
//{
//    String s;
//    for( int i = 0; i < 99999999; ++i )
//    {
//        s = s1;
//        //s.toLower();
//        s.toLowerUnsafe();
//    }
//    std::cout << s << std::endl;
//}
//std::cout << sw.elapsed() << std::endl;

////int equal = 0, less = 0, larger = 0;
////Stopwatch sw;
////{
////    std::string s1 = "aaaasdfasdf", s2 = s1, s3 = "aaaasdfasda";
////    for( int i = 0; i < 99999999; ++i )
////    {
////        if( s1 == s2 ) ++equal;
////        if( s3 < s1 ) ++less;
////        if( s1 > s3 ) ++larger;
////    }
////}
////std::cout << equal << " " << less << " " << larger << " " << sw.elapsed() << std::endl;

////equal = 0, less = 0, larger = 0;
////sw.reset();
////{
////    String s1 = "aaaasdfasdf", s2 = s1, s3 = "aaaasdfasda";
////    for( int i = 0; i < 99999999; ++i )
////    {
////        if( s1 == s2 ) ++equal;
////        if( s3 < s1 ) ++less;
////        if( s1 > s3 ) ++larger;
////    }
////}
////std::cout << equal << " " << less << " " << larger << " " << sw.elapsed() << std::endl;

//    return 0;
//}
//









//
//#include "Lib/All.h"
//#include "String.h"
//using namespace std;
//int main()
//{
//    auto 定长串 = "asdfqer";
//    Stopwatch sw;
//    sw.reset();
//    {
//        String s;
//        //s.reserve( 128 );
//        for( int i = 0; i < 9999999; ++i )
//        {
//            //s.clear();  // 手手清，不测内存分配
//            s.append( 定长串, i, 定长串, i, 定长串, i, 定长串, i );
//        }
//        std::cout << s.c_str()[ 0 ] << s.size() << std::endl;
//    }
//    std::cout << sw.elapsed() << std::endl;
//    sw.reset();
//    {
//        std::string s;
//        //s.reserve( 128 );
//        for( int i = 0; i < 9999999; ++i )
//        {
//            //s.clear();  // 手手清，不测内存分配
//            s.append( 定长串 );
//            s.append( std::to_string( i ) );
//            s.append( 定长串 );
//            s.append( std::to_string( i ) );
//            s.append( 定长串 );
//            s.append( std::to_string( i ) );
//            s.append( 定长串 );
//            s.append( std::to_string( i ) );
//        }
//        std::cout << s.c_str()[ 0 ] << s.size() << std::endl;
//    }
//    std::cout << sw.elapsed() << std::endl;
//    return 0;
//}

















































// todo: 实现个类似 map 的东西，当 key 传 String 时，存 Hash
