template<typename V1, typename V2, typename V3>
DbTable & DbTable::AddRow(V1 const &v1, V2 const &v2, V3 const &v3) {
    assert( _colNames.Length() == 3 );
    assert( _colTypes[0] == DbTypeIDs<V1>::ID() );
    assert( _colTypes[1] == DbTypeIDs<V2>::ID() );
    assert( _colTypes[2] == DbTypeIDs<V3>::ID() );
    ((List<V1>*)_colDatas[0])->Add(v1);
    ((List<V2>*)_colDatas[1])->Add(v2);
    ((List<V3>*)_colDatas[2])->Add(v3);
    ++_rowCount;
    return *this;
}
template<typename V1, typename V2, typename V3, typename V4>
DbTable & DbTable::AddRow(V1 const &v1, V2 const &v2, V3 const &v3, V4 const &v4) {
    assert( _colNames.Length() == 4 );
    assert( _colTypes[0] == DbTypeIDs<V1>::ID() );
    assert( _colTypes[1] == DbTypeIDs<V2>::ID() );
    assert( _colTypes[2] == DbTypeIDs<V3>::ID() );
    assert( _colTypes[3] == DbTypeIDs<V4>::ID() );
    ((List<V1>*)_colDatas[0])->Add(v1);
    ((List<V2>*)_colDatas[1])->Add(v2);
    ((List<V3>*)_colDatas[2])->Add(v3);
    ((List<V4>*)_colDatas[3])->Add(v4);
    ++_rowCount;
    return *this;
}
template<typename V1, typename V2, typename V3, typename V4, typename V5>
DbTable & DbTable::AddRow(V1 const &v1, V2 const &v2, V3 const &v3, V4 const &v4, V5 const &v5) {
    assert( _colNames.Length() == 5 );
    assert( _colTypes[0] == DbTypeIDs<V1>::ID() );
    assert( _colTypes[1] == DbTypeIDs<V2>::ID() );
    assert( _colTypes[2] == DbTypeIDs<V3>::ID() );
    assert( _colTypes[3] == DbTypeIDs<V4>::ID() );
    assert( _colTypes[4] == DbTypeIDs<V5>::ID() );
    ((List<V1>*)_colDatas[0])->Add(v1);
    ((List<V2>*)_colDatas[1])->Add(v2);
    ((List<V3>*)_colDatas[2])->Add(v3);
    ((List<V4>*)_colDatas[3])->Add(v4);
    ((List<V5>*)_colDatas[4])->Add(v5);
    ++_rowCount;
    return *this;
}
template<typename V1, typename V2, typename V3, typename V4, typename V5, typename V6>
DbTable & DbTable::AddRow(V1 const &v1, V2 const &v2, V3 const &v3, V4 const &v4, V5 const &v5, V6 const &v6) {
    assert( _colNames.Length() == 6 );
    assert( _colTypes[0] == DbTypeIDs<V1>::ID() );
    assert( _colTypes[1] == DbTypeIDs<V2>::ID() );
    assert( _colTypes[2] == DbTypeIDs<V3>::ID() );
    assert( _colTypes[3] == DbTypeIDs<V4>::ID() );
    assert( _colTypes[4] == DbTypeIDs<V5>::ID() );
    assert( _colTypes[5] == DbTypeIDs<V6>::ID() );
    ((List<V1>*)_colDatas[0])->Add(v1);
    ((List<V2>*)_colDatas[1])->Add(v2);
    ((List<V3>*)_colDatas[2])->Add(v3);
    ((List<V4>*)_colDatas[3])->Add(v4);
    ((List<V5>*)_colDatas[4])->Add(v5);
    ((List<V6>*)_colDatas[5])->Add(v6);
    ++_rowCount;
    return *this;
}
template<typename V1, typename V2, typename V3, typename V4, typename V5, typename V6, typename V7>
DbTable & DbTable::AddRow(V1 const &v1, V2 const &v2, V3 const &v3, V4 const &v4, V5 const &v5, V6 const &v6, V7 const &v7) {
    assert( _colNames.Length() == 7 );
    assert( _colTypes[0] == DbTypeIDs<V1>::ID() );
    assert( _colTypes[1] == DbTypeIDs<V2>::ID() );
    assert( _colTypes[2] == DbTypeIDs<V3>::ID() );
    assert( _colTypes[3] == DbTypeIDs<V4>::ID() );
    assert( _colTypes[4] == DbTypeIDs<V5>::ID() );
    assert( _colTypes[5] == DbTypeIDs<V6>::ID() );
    assert( _colTypes[6] == DbTypeIDs<V7>::ID() );
    ((List<V1>*)_colDatas[0])->Add(v1);
    ((List<V2>*)_colDatas[1])->Add(v2);
    ((List<V3>*)_colDatas[2])->Add(v3);
    ((List<V4>*)_colDatas[3])->Add(v4);
    ((List<V5>*)_colDatas[4])->Add(v5);
    ((List<V6>*)_colDatas[5])->Add(v6);
    ((List<V7>*)_colDatas[6])->Add(v7);
    ++_rowCount;
    return *this;
}
template<typename V1, typename V2, typename V3, typename V4, typename V5, typename V6, typename V7, typename V8>
DbTable & DbTable::AddRow(V1 const &v1, V2 const &v2, V3 const &v3, V4 const &v4, V5 const &v5, V6 const &v6, V7 const &v7, V8 const &v8) {
    assert( _colNames.Length() == 8 );
    assert( _colTypes[0] == DbTypeIDs<V1>::ID() );
    assert( _colTypes[1] == DbTypeIDs<V2>::ID() );
    assert( _colTypes[2] == DbTypeIDs<V3>::ID() );
    assert( _colTypes[3] == DbTypeIDs<V4>::ID() );
    assert( _colTypes[4] == DbTypeIDs<V5>::ID() );
    assert( _colTypes[5] == DbTypeIDs<V6>::ID() );
    assert( _colTypes[6] == DbTypeIDs<V7>::ID() );
    assert( _colTypes[7] == DbTypeIDs<V8>::ID() );
    ((List<V1>*)_colDatas[0])->Add(v1);
    ((List<V2>*)_colDatas[1])->Add(v2);
    ((List<V3>*)_colDatas[2])->Add(v3);
    ((List<V4>*)_colDatas[3])->Add(v4);
    ((List<V5>*)_colDatas[4])->Add(v5);
    ((List<V6>*)_colDatas[5])->Add(v6);
    ((List<V7>*)_colDatas[6])->Add(v7);
    ((List<V8>*)_colDatas[7])->Add(v8);
    ++_rowCount;
    return *this;
}
template<typename V1, typename V2, typename V3, typename V4, typename V5, typename V6, typename V7, typename V8, typename V9>
DbTable & DbTable::AddRow(V1 const &v1, V2 const &v2, V3 const &v3, V4 const &v4, V5 const &v5, V6 const &v6, V7 const &v7, V8 const &v8, V9 const &v9) {
    assert( _colNames.Length() == 9 );
    assert( _colTypes[0] == DbTypeIDs<V1>::ID() );
    assert( _colTypes[1] == DbTypeIDs<V2>::ID() );
    assert( _colTypes[2] == DbTypeIDs<V3>::ID() );
    assert( _colTypes[3] == DbTypeIDs<V4>::ID() );
    assert( _colTypes[4] == DbTypeIDs<V5>::ID() );
    assert( _colTypes[5] == DbTypeIDs<V6>::ID() );
    assert( _colTypes[6] == DbTypeIDs<V7>::ID() );
    assert( _colTypes[7] == DbTypeIDs<V8>::ID() );
    assert( _colTypes[8] == DbTypeIDs<V9>::ID() );
    ((List<V1>*)_colDatas[0])->Add(v1);
    ((List<V2>*)_colDatas[1])->Add(v2);
    ((List<V3>*)_colDatas[2])->Add(v3);
    ((List<V4>*)_colDatas[3])->Add(v4);
    ((List<V5>*)_colDatas[4])->Add(v5);
    ((List<V6>*)_colDatas[5])->Add(v6);
    ((List<V7>*)_colDatas[6])->Add(v7);
    ((List<V8>*)_colDatas[7])->Add(v8);
    ((List<V9>*)_colDatas[8])->Add(v9);
    ++_rowCount;
    return *this;
}
template<typename V1, typename V2, typename V3, typename V4, typename V5, typename V6, typename V7, typename V8, typename V9, typename V10>
DbTable & DbTable::AddRow(V1 const &v1, V2 const &v2, V3 const &v3, V4 const &v4, V5 const &v5, V6 const &v6, V7 const &v7, V8 const &v8, V9 const &v9, V10 const &v10) {
    assert( _colNames.Length() == 10 );
    assert( _colTypes[0] == DbTypeIDs<V1>::ID() );
    assert( _colTypes[1] == DbTypeIDs<V2>::ID() );
    assert( _colTypes[2] == DbTypeIDs<V3>::ID() );
    assert( _colTypes[3] == DbTypeIDs<V4>::ID() );
    assert( _colTypes[4] == DbTypeIDs<V5>::ID() );
    assert( _colTypes[5] == DbTypeIDs<V6>::ID() );
    assert( _colTypes[6] == DbTypeIDs<V7>::ID() );
    assert( _colTypes[7] == DbTypeIDs<V8>::ID() );
    assert( _colTypes[8] == DbTypeIDs<V9>::ID() );
    assert( _colTypes[9] == DbTypeIDs<V10>::ID() );
    ((List<V1>*)_colDatas[0])->Add(v1);
    ((List<V2>*)_colDatas[1])->Add(v2);
    ((List<V3>*)_colDatas[2])->Add(v3);
    ((List<V4>*)_colDatas[3])->Add(v4);
    ((List<V5>*)_colDatas[4])->Add(v5);
    ((List<V6>*)_colDatas[5])->Add(v6);
    ((List<V7>*)_colDatas[6])->Add(v7);
    ((List<V8>*)_colDatas[7])->Add(v8);
    ((List<V9>*)_colDatas[8])->Add(v9);
    ((List<V10>*)_colDatas[9])->Add(v10);
    ++_rowCount;
    return *this;
}
template<typename V1, typename V2, typename V3, typename V4, typename V5, typename V6, typename V7, typename V8, typename V9, typename V10, typename V11>
DbTable & DbTable::AddRow(V1 const &v1, V2 const &v2, V3 const &v3, V4 const &v4, V5 const &v5, V6 const &v6, V7 const &v7, V8 const &v8, V9 const &v9, V10 const &v10, V11 const &v11) {
    assert( _colNames.Length() == 11 );
    assert( _colTypes[0] == DbTypeIDs<V1>::ID() );
    assert( _colTypes[1] == DbTypeIDs<V2>::ID() );
    assert( _colTypes[2] == DbTypeIDs<V3>::ID() );
    assert( _colTypes[3] == DbTypeIDs<V4>::ID() );
    assert( _colTypes[4] == DbTypeIDs<V5>::ID() );
    assert( _colTypes[5] == DbTypeIDs<V6>::ID() );
    assert( _colTypes[6] == DbTypeIDs<V7>::ID() );
    assert( _colTypes[7] == DbTypeIDs<V8>::ID() );
    assert( _colTypes[8] == DbTypeIDs<V9>::ID() );
    assert( _colTypes[9] == DbTypeIDs<V10>::ID() );
    assert( _colTypes[10] == DbTypeIDs<V11>::ID() );
    ((List<V1>*)_colDatas[0])->Add(v1);
    ((List<V2>*)_colDatas[1])->Add(v2);
    ((List<V3>*)_colDatas[2])->Add(v3);
    ((List<V4>*)_colDatas[3])->Add(v4);
    ((List<V5>*)_colDatas[4])->Add(v5);
    ((List<V6>*)_colDatas[5])->Add(v6);
    ((List<V7>*)_colDatas[6])->Add(v7);
    ((List<V8>*)_colDatas[7])->Add(v8);
    ((List<V9>*)_colDatas[8])->Add(v9);
    ((List<V10>*)_colDatas[9])->Add(v10);
    ((List<V11>*)_colDatas[10])->Add(v11);
    ++_rowCount;
    return *this;
}
template<typename V1, typename V2, typename V3, typename V4, typename V5, typename V6, typename V7, typename V8, typename V9, typename V10, typename V11, typename V12>
DbTable & DbTable::AddRow(V1 const &v1, V2 const &v2, V3 const &v3, V4 const &v4, V5 const &v5, V6 const &v6, V7 const &v7, V8 const &v8, V9 const &v9, V10 const &v10, V11 const &v11, V12 const &v12) {
    assert( _colNames.Length() == 12 );
    assert( _colTypes[0] == DbTypeIDs<V1>::ID() );
    assert( _colTypes[1] == DbTypeIDs<V2>::ID() );
    assert( _colTypes[2] == DbTypeIDs<V3>::ID() );
    assert( _colTypes[3] == DbTypeIDs<V4>::ID() );
    assert( _colTypes[4] == DbTypeIDs<V5>::ID() );
    assert( _colTypes[5] == DbTypeIDs<V6>::ID() );
    assert( _colTypes[6] == DbTypeIDs<V7>::ID() );
    assert( _colTypes[7] == DbTypeIDs<V8>::ID() );
    assert( _colTypes[8] == DbTypeIDs<V9>::ID() );
    assert( _colTypes[9] == DbTypeIDs<V10>::ID() );
    assert( _colTypes[10] == DbTypeIDs<V11>::ID() );
    assert( _colTypes[11] == DbTypeIDs<V12>::ID() );
    ((List<V1>*)_colDatas[0])->Add(v1);
    ((List<V2>*)_colDatas[1])->Add(v2);
    ((List<V3>*)_colDatas[2])->Add(v3);
    ((List<V4>*)_colDatas[3])->Add(v4);
    ((List<V5>*)_colDatas[4])->Add(v5);
    ((List<V6>*)_colDatas[5])->Add(v6);
    ((List<V7>*)_colDatas[6])->Add(v7);
    ((List<V8>*)_colDatas[7])->Add(v8);
    ((List<V9>*)_colDatas[8])->Add(v9);
    ((List<V10>*)_colDatas[9])->Add(v10);
    ((List<V11>*)_colDatas[10])->Add(v11);
    ((List<V12>*)_colDatas[11])->Add(v12);
    ++_rowCount;
    return *this;
}
template<typename V1, typename V2, typename V3, typename V4, typename V5, typename V6, typename V7, typename V8, typename V9, typename V10, typename V11, typename V12, typename V13>
DbTable & DbTable::AddRow(V1 const &v1, V2 const &v2, V3 const &v3, V4 const &v4, V5 const &v5, V6 const &v6, V7 const &v7, V8 const &v8, V9 const &v9, V10 const &v10, V11 const &v11, V12 const &v12, V13 const &v13) {
    assert( _colNames.Length() == 13 );
    assert( _colTypes[0] == DbTypeIDs<V1>::ID() );
    assert( _colTypes[1] == DbTypeIDs<V2>::ID() );
    assert( _colTypes[2] == DbTypeIDs<V3>::ID() );
    assert( _colTypes[3] == DbTypeIDs<V4>::ID() );
    assert( _colTypes[4] == DbTypeIDs<V5>::ID() );
    assert( _colTypes[5] == DbTypeIDs<V6>::ID() );
    assert( _colTypes[6] == DbTypeIDs<V7>::ID() );
    assert( _colTypes[7] == DbTypeIDs<V8>::ID() );
    assert( _colTypes[8] == DbTypeIDs<V9>::ID() );
    assert( _colTypes[9] == DbTypeIDs<V10>::ID() );
    assert( _colTypes[10] == DbTypeIDs<V11>::ID() );
    assert( _colTypes[11] == DbTypeIDs<V12>::ID() );
    assert( _colTypes[12] == DbTypeIDs<V13>::ID() );
    ((List<V1>*)_colDatas[0])->Add(v1);
    ((List<V2>*)_colDatas[1])->Add(v2);
    ((List<V3>*)_colDatas[2])->Add(v3);
    ((List<V4>*)_colDatas[3])->Add(v4);
    ((List<V5>*)_colDatas[4])->Add(v5);
    ((List<V6>*)_colDatas[5])->Add(v6);
    ((List<V7>*)_colDatas[6])->Add(v7);
    ((List<V8>*)_colDatas[7])->Add(v8);
    ((List<V9>*)_colDatas[8])->Add(v9);
    ((List<V10>*)_colDatas[9])->Add(v10);
    ((List<V11>*)_colDatas[10])->Add(v11);
    ((List<V12>*)_colDatas[11])->Add(v12);
    ((List<V13>*)_colDatas[12])->Add(v13);
    ++_rowCount;
    return *this;
}
template<typename V1, typename V2, typename V3, typename V4, typename V5, typename V6, typename V7, typename V8, typename V9, typename V10, typename V11, typename V12, typename V13, typename V14>
DbTable & DbTable::AddRow(V1 const &v1, V2 const &v2, V3 const &v3, V4 const &v4, V5 const &v5, V6 const &v6, V7 const &v7, V8 const &v8, V9 const &v9, V10 const &v10, V11 const &v11, V12 const &v12, V13 const &v13, V14 const &v14) {
    assert( _colNames.Length() == 14 );
    assert( _colTypes[0] == DbTypeIDs<V1>::ID() );
    assert( _colTypes[1] == DbTypeIDs<V2>::ID() );
    assert( _colTypes[2] == DbTypeIDs<V3>::ID() );
    assert( _colTypes[3] == DbTypeIDs<V4>::ID() );
    assert( _colTypes[4] == DbTypeIDs<V5>::ID() );
    assert( _colTypes[5] == DbTypeIDs<V6>::ID() );
    assert( _colTypes[6] == DbTypeIDs<V7>::ID() );
    assert( _colTypes[7] == DbTypeIDs<V8>::ID() );
    assert( _colTypes[8] == DbTypeIDs<V9>::ID() );
    assert( _colTypes[9] == DbTypeIDs<V10>::ID() );
    assert( _colTypes[10] == DbTypeIDs<V11>::ID() );
    assert( _colTypes[11] == DbTypeIDs<V12>::ID() );
    assert( _colTypes[12] == DbTypeIDs<V13>::ID() );
    assert( _colTypes[13] == DbTypeIDs<V14>::ID() );
    ((List<V1>*)_colDatas[0])->Add(v1);
    ((List<V2>*)_colDatas[1])->Add(v2);
    ((List<V3>*)_colDatas[2])->Add(v3);
    ((List<V4>*)_colDatas[3])->Add(v4);
    ((List<V5>*)_colDatas[4])->Add(v5);
    ((List<V6>*)_colDatas[5])->Add(v6);
    ((List<V7>*)_colDatas[6])->Add(v7);
    ((List<V8>*)_colDatas[7])->Add(v8);
    ((List<V9>*)_colDatas[8])->Add(v9);
    ((List<V10>*)_colDatas[9])->Add(v10);
    ((List<V11>*)_colDatas[10])->Add(v11);
    ((List<V12>*)_colDatas[11])->Add(v12);
    ((List<V13>*)_colDatas[12])->Add(v13);
    ((List<V14>*)_colDatas[13])->Add(v14);
    ++_rowCount;
    return *this;
}
template<typename V1, typename V2, typename V3, typename V4, typename V5, typename V6, typename V7, typename V8, typename V9, typename V10, typename V11, typename V12, typename V13, typename V14, typename V15>
DbTable & DbTable::AddRow(V1 const &v1, V2 const &v2, V3 const &v3, V4 const &v4, V5 const &v5, V6 const &v6, V7 const &v7, V8 const &v8, V9 const &v9, V10 const &v10, V11 const &v11, V12 const &v12, V13 const &v13, V14 const &v14, V15 const &v15) {
    assert( _colNames.Length() == 15 );
    assert( _colTypes[0] == DbTypeIDs<V1>::ID() );
    assert( _colTypes[1] == DbTypeIDs<V2>::ID() );
    assert( _colTypes[2] == DbTypeIDs<V3>::ID() );
    assert( _colTypes[3] == DbTypeIDs<V4>::ID() );
    assert( _colTypes[4] == DbTypeIDs<V5>::ID() );
    assert( _colTypes[5] == DbTypeIDs<V6>::ID() );
    assert( _colTypes[6] == DbTypeIDs<V7>::ID() );
    assert( _colTypes[7] == DbTypeIDs<V8>::ID() );
    assert( _colTypes[8] == DbTypeIDs<V9>::ID() );
    assert( _colTypes[9] == DbTypeIDs<V10>::ID() );
    assert( _colTypes[10] == DbTypeIDs<V11>::ID() );
    assert( _colTypes[11] == DbTypeIDs<V12>::ID() );
    assert( _colTypes[12] == DbTypeIDs<V13>::ID() );
    assert( _colTypes[13] == DbTypeIDs<V14>::ID() );
    assert( _colTypes[14] == DbTypeIDs<V15>::ID() );
    ((List<V1>*)_colDatas[0])->Add(v1);
    ((List<V2>*)_colDatas[1])->Add(v2);
    ((List<V3>*)_colDatas[2])->Add(v3);
    ((List<V4>*)_colDatas[3])->Add(v4);
    ((List<V5>*)_colDatas[4])->Add(v5);
    ((List<V6>*)_colDatas[5])->Add(v6);
    ((List<V7>*)_colDatas[6])->Add(v7);
    ((List<V8>*)_colDatas[7])->Add(v8);
    ((List<V9>*)_colDatas[8])->Add(v9);
    ((List<V10>*)_colDatas[9])->Add(v10);
    ((List<V11>*)_colDatas[10])->Add(v11);
    ((List<V12>*)_colDatas[11])->Add(v12);
    ((List<V13>*)_colDatas[12])->Add(v13);
    ((List<V14>*)_colDatas[13])->Add(v14);
    ((List<V15>*)_colDatas[14])->Add(v15);
    ++_rowCount;
    return *this;
}
template<typename V1, typename V2, typename V3, typename V4, typename V5, typename V6, typename V7, typename V8, typename V9, typename V10, typename V11, typename V12, typename V13, typename V14, typename V15, typename V16>
DbTable & DbTable::AddRow(V1 const &v1, V2 const &v2, V3 const &v3, V4 const &v4, V5 const &v5, V6 const &v6, V7 const &v7, V8 const &v8, V9 const &v9, V10 const &v10, V11 const &v11, V12 const &v12, V13 const &v13, V14 const &v14, V15 const &v15, V16 const &v16) {
    assert( _colNames.Length() == 16 );
    assert( _colTypes[0] == DbTypeIDs<V1>::ID() );
    assert( _colTypes[1] == DbTypeIDs<V2>::ID() );
    assert( _colTypes[2] == DbTypeIDs<V3>::ID() );
    assert( _colTypes[3] == DbTypeIDs<V4>::ID() );
    assert( _colTypes[4] == DbTypeIDs<V5>::ID() );
    assert( _colTypes[5] == DbTypeIDs<V6>::ID() );
    assert( _colTypes[6] == DbTypeIDs<V7>::ID() );
    assert( _colTypes[7] == DbTypeIDs<V8>::ID() );
    assert( _colTypes[8] == DbTypeIDs<V9>::ID() );
    assert( _colTypes[9] == DbTypeIDs<V10>::ID() );
    assert( _colTypes[10] == DbTypeIDs<V11>::ID() );
    assert( _colTypes[11] == DbTypeIDs<V12>::ID() );
    assert( _colTypes[12] == DbTypeIDs<V13>::ID() );
    assert( _colTypes[13] == DbTypeIDs<V14>::ID() );
    assert( _colTypes[14] == DbTypeIDs<V15>::ID() );
    assert( _colTypes[15] == DbTypeIDs<V16>::ID() );
    ((List<V1>*)_colDatas[0])->Add(v1);
    ((List<V2>*)_colDatas[1])->Add(v2);
    ((List<V3>*)_colDatas[2])->Add(v3);
    ((List<V4>*)_colDatas[3])->Add(v4);
    ((List<V5>*)_colDatas[4])->Add(v5);
    ((List<V6>*)_colDatas[5])->Add(v6);
    ((List<V7>*)_colDatas[6])->Add(v7);
    ((List<V8>*)_colDatas[7])->Add(v8);
    ((List<V9>*)_colDatas[8])->Add(v9);
    ((List<V10>*)_colDatas[9])->Add(v10);
    ((List<V11>*)_colDatas[10])->Add(v11);
    ((List<V12>*)_colDatas[11])->Add(v12);
    ((List<V13>*)_colDatas[12])->Add(v13);
    ((List<V14>*)_colDatas[13])->Add(v14);
    ((List<V15>*)_colDatas[14])->Add(v15);
    ((List<V16>*)_colDatas[15])->Add(v16);
    ++_rowCount;
    return *this;
}
template<typename V1, typename V2, typename V3, typename V4, typename V5, typename V6, typename V7, typename V8, typename V9, typename V10, typename V11, typename V12, typename V13, typename V14, typename V15, typename V16, typename V17>
DbTable & DbTable::AddRow(V1 const &v1, V2 const &v2, V3 const &v3, V4 const &v4, V5 const &v5, V6 const &v6, V7 const &v7, V8 const &v8, V9 const &v9, V10 const &v10, V11 const &v11, V12 const &v12, V13 const &v13, V14 const &v14, V15 const &v15, V16 const &v16, V17 const &v17) {
    assert( _colNames.Length() == 17 );
    assert( _colTypes[0] == DbTypeIDs<V1>::ID() );
    assert( _colTypes[1] == DbTypeIDs<V2>::ID() );
    assert( _colTypes[2] == DbTypeIDs<V3>::ID() );
    assert( _colTypes[3] == DbTypeIDs<V4>::ID() );
    assert( _colTypes[4] == DbTypeIDs<V5>::ID() );
    assert( _colTypes[5] == DbTypeIDs<V6>::ID() );
    assert( _colTypes[6] == DbTypeIDs<V7>::ID() );
    assert( _colTypes[7] == DbTypeIDs<V8>::ID() );
    assert( _colTypes[8] == DbTypeIDs<V9>::ID() );
    assert( _colTypes[9] == DbTypeIDs<V10>::ID() );
    assert( _colTypes[10] == DbTypeIDs<V11>::ID() );
    assert( _colTypes[11] == DbTypeIDs<V12>::ID() );
    assert( _colTypes[12] == DbTypeIDs<V13>::ID() );
    assert( _colTypes[13] == DbTypeIDs<V14>::ID() );
    assert( _colTypes[14] == DbTypeIDs<V15>::ID() );
    assert( _colTypes[15] == DbTypeIDs<V16>::ID() );
    assert( _colTypes[16] == DbTypeIDs<V17>::ID() );
    ((List<V1>*)_colDatas[0])->Add(v1);
    ((List<V2>*)_colDatas[1])->Add(v2);
    ((List<V3>*)_colDatas[2])->Add(v3);
    ((List<V4>*)_colDatas[3])->Add(v4);
    ((List<V5>*)_colDatas[4])->Add(v5);
    ((List<V6>*)_colDatas[5])->Add(v6);
    ((List<V7>*)_colDatas[6])->Add(v7);
    ((List<V8>*)_colDatas[7])->Add(v8);
    ((List<V9>*)_colDatas[8])->Add(v9);
    ((List<V10>*)_colDatas[9])->Add(v10);
    ((List<V11>*)_colDatas[10])->Add(v11);
    ((List<V12>*)_colDatas[11])->Add(v12);
    ((List<V13>*)_colDatas[12])->Add(v13);
    ((List<V14>*)_colDatas[13])->Add(v14);
    ((List<V15>*)_colDatas[14])->Add(v15);
    ((List<V16>*)_colDatas[15])->Add(v16);
    ((List<V17>*)_colDatas[16])->Add(v17);
    ++_rowCount;
    return *this;
}
template<typename V1, typename V2, typename V3, typename V4, typename V5, typename V6, typename V7, typename V8, typename V9, typename V10, typename V11, typename V12, typename V13, typename V14, typename V15, typename V16, typename V17, typename V18>
DbTable & DbTable::AddRow(V1 const &v1, V2 const &v2, V3 const &v3, V4 const &v4, V5 const &v5, V6 const &v6, V7 const &v7, V8 const &v8, V9 const &v9, V10 const &v10, V11 const &v11, V12 const &v12, V13 const &v13, V14 const &v14, V15 const &v15, V16 const &v16, V17 const &v17, V18 const &v18) {
    assert( _colNames.Length() == 18 );
    assert( _colTypes[0] == DbTypeIDs<V1>::ID() );
    assert( _colTypes[1] == DbTypeIDs<V2>::ID() );
    assert( _colTypes[2] == DbTypeIDs<V3>::ID() );
    assert( _colTypes[3] == DbTypeIDs<V4>::ID() );
    assert( _colTypes[4] == DbTypeIDs<V5>::ID() );
    assert( _colTypes[5] == DbTypeIDs<V6>::ID() );
    assert( _colTypes[6] == DbTypeIDs<V7>::ID() );
    assert( _colTypes[7] == DbTypeIDs<V8>::ID() );
    assert( _colTypes[8] == DbTypeIDs<V9>::ID() );
    assert( _colTypes[9] == DbTypeIDs<V10>::ID() );
    assert( _colTypes[10] == DbTypeIDs<V11>::ID() );
    assert( _colTypes[11] == DbTypeIDs<V12>::ID() );
    assert( _colTypes[12] == DbTypeIDs<V13>::ID() );
    assert( _colTypes[13] == DbTypeIDs<V14>::ID() );
    assert( _colTypes[14] == DbTypeIDs<V15>::ID() );
    assert( _colTypes[15] == DbTypeIDs<V16>::ID() );
    assert( _colTypes[16] == DbTypeIDs<V17>::ID() );
    assert( _colTypes[17] == DbTypeIDs<V18>::ID() );
    ((List<V1>*)_colDatas[0])->Add(v1);
    ((List<V2>*)_colDatas[1])->Add(v2);
    ((List<V3>*)_colDatas[2])->Add(v3);
    ((List<V4>*)_colDatas[3])->Add(v4);
    ((List<V5>*)_colDatas[4])->Add(v5);
    ((List<V6>*)_colDatas[5])->Add(v6);
    ((List<V7>*)_colDatas[6])->Add(v7);
    ((List<V8>*)_colDatas[7])->Add(v8);
    ((List<V9>*)_colDatas[8])->Add(v9);
    ((List<V10>*)_colDatas[9])->Add(v10);
    ((List<V11>*)_colDatas[10])->Add(v11);
    ((List<V12>*)_colDatas[11])->Add(v12);
    ((List<V13>*)_colDatas[12])->Add(v13);
    ((List<V14>*)_colDatas[13])->Add(v14);
    ((List<V15>*)_colDatas[14])->Add(v15);
    ((List<V16>*)_colDatas[15])->Add(v16);
    ((List<V17>*)_colDatas[16])->Add(v17);
    ((List<V18>*)_colDatas[17])->Add(v18);
    ++_rowCount;
    return *this;
}
template<typename V1, typename V2, typename V3, typename V4, typename V5, typename V6, typename V7, typename V8, typename V9, typename V10, typename V11, typename V12, typename V13, typename V14, typename V15, typename V16, typename V17, typename V18, typename V19>
DbTable & DbTable::AddRow(V1 const &v1, V2 const &v2, V3 const &v3, V4 const &v4, V5 const &v5, V6 const &v6, V7 const &v7, V8 const &v8, V9 const &v9, V10 const &v10, V11 const &v11, V12 const &v12, V13 const &v13, V14 const &v14, V15 const &v15, V16 const &v16, V17 const &v17, V18 const &v18, V19 const &v19) {
    assert( _colNames.Length() == 19 );
    assert( _colTypes[0] == DbTypeIDs<V1>::ID() );
    assert( _colTypes[1] == DbTypeIDs<V2>::ID() );
    assert( _colTypes[2] == DbTypeIDs<V3>::ID() );
    assert( _colTypes[3] == DbTypeIDs<V4>::ID() );
    assert( _colTypes[4] == DbTypeIDs<V5>::ID() );
    assert( _colTypes[5] == DbTypeIDs<V6>::ID() );
    assert( _colTypes[6] == DbTypeIDs<V7>::ID() );
    assert( _colTypes[7] == DbTypeIDs<V8>::ID() );
    assert( _colTypes[8] == DbTypeIDs<V9>::ID() );
    assert( _colTypes[9] == DbTypeIDs<V10>::ID() );
    assert( _colTypes[10] == DbTypeIDs<V11>::ID() );
    assert( _colTypes[11] == DbTypeIDs<V12>::ID() );
    assert( _colTypes[12] == DbTypeIDs<V13>::ID() );
    assert( _colTypes[13] == DbTypeIDs<V14>::ID() );
    assert( _colTypes[14] == DbTypeIDs<V15>::ID() );
    assert( _colTypes[15] == DbTypeIDs<V16>::ID() );
    assert( _colTypes[16] == DbTypeIDs<V17>::ID() );
    assert( _colTypes[17] == DbTypeIDs<V18>::ID() );
    assert( _colTypes[18] == DbTypeIDs<V19>::ID() );
    ((List<V1>*)_colDatas[0])->Add(v1);
    ((List<V2>*)_colDatas[1])->Add(v2);
    ((List<V3>*)_colDatas[2])->Add(v3);
    ((List<V4>*)_colDatas[3])->Add(v4);
    ((List<V5>*)_colDatas[4])->Add(v5);
    ((List<V6>*)_colDatas[5])->Add(v6);
    ((List<V7>*)_colDatas[6])->Add(v7);
    ((List<V8>*)_colDatas[7])->Add(v8);
    ((List<V9>*)_colDatas[8])->Add(v9);
    ((List<V10>*)_colDatas[9])->Add(v10);
    ((List<V11>*)_colDatas[10])->Add(v11);
    ((List<V12>*)_colDatas[11])->Add(v12);
    ((List<V13>*)_colDatas[12])->Add(v13);
    ((List<V14>*)_colDatas[13])->Add(v14);
    ((List<V15>*)_colDatas[14])->Add(v15);
    ((List<V16>*)_colDatas[15])->Add(v16);
    ((List<V17>*)_colDatas[16])->Add(v17);
    ((List<V18>*)_colDatas[17])->Add(v18);
    ((List<V19>*)_colDatas[18])->Add(v19);
    ++_rowCount;
    return *this;
}
template<typename V1, typename V2, typename V3, typename V4, typename V5, typename V6, typename V7, typename V8, typename V9, typename V10, typename V11, typename V12, typename V13, typename V14, typename V15, typename V16, typename V17, typename V18, typename V19, typename V20>
DbTable & DbTable::AddRow(V1 const &v1, V2 const &v2, V3 const &v3, V4 const &v4, V5 const &v5, V6 const &v6, V7 const &v7, V8 const &v8, V9 const &v9, V10 const &v10, V11 const &v11, V12 const &v12, V13 const &v13, V14 const &v14, V15 const &v15, V16 const &v16, V17 const &v17, V18 const &v18, V19 const &v19, V20 const &v20) {
    assert( _colNames.Length() == 20 );
    assert( _colTypes[0] == DbTypeIDs<V1>::ID() );
    assert( _colTypes[1] == DbTypeIDs<V2>::ID() );
    assert( _colTypes[2] == DbTypeIDs<V3>::ID() );
    assert( _colTypes[3] == DbTypeIDs<V4>::ID() );
    assert( _colTypes[4] == DbTypeIDs<V5>::ID() );
    assert( _colTypes[5] == DbTypeIDs<V6>::ID() );
    assert( _colTypes[6] == DbTypeIDs<V7>::ID() );
    assert( _colTypes[7] == DbTypeIDs<V8>::ID() );
    assert( _colTypes[8] == DbTypeIDs<V9>::ID() );
    assert( _colTypes[9] == DbTypeIDs<V10>::ID() );
    assert( _colTypes[10] == DbTypeIDs<V11>::ID() );
    assert( _colTypes[11] == DbTypeIDs<V12>::ID() );
    assert( _colTypes[12] == DbTypeIDs<V13>::ID() );
    assert( _colTypes[13] == DbTypeIDs<V14>::ID() );
    assert( _colTypes[14] == DbTypeIDs<V15>::ID() );
    assert( _colTypes[15] == DbTypeIDs<V16>::ID() );
    assert( _colTypes[16] == DbTypeIDs<V17>::ID() );
    assert( _colTypes[17] == DbTypeIDs<V18>::ID() );
    assert( _colTypes[18] == DbTypeIDs<V19>::ID() );
    assert( _colTypes[19] == DbTypeIDs<V20>::ID() );
    ((List<V1>*)_colDatas[0])->Add(v1);
    ((List<V2>*)_colDatas[1])->Add(v2);
    ((List<V3>*)_colDatas[2])->Add(v3);
    ((List<V4>*)_colDatas[3])->Add(v4);
    ((List<V5>*)_colDatas[4])->Add(v5);
    ((List<V6>*)_colDatas[5])->Add(v6);
    ((List<V7>*)_colDatas[6])->Add(v7);
    ((List<V8>*)_colDatas[7])->Add(v8);
    ((List<V9>*)_colDatas[8])->Add(v9);
    ((List<V10>*)_colDatas[9])->Add(v10);
    ((List<V11>*)_colDatas[10])->Add(v11);
    ((List<V12>*)_colDatas[11])->Add(v12);
    ((List<V13>*)_colDatas[12])->Add(v13);
    ((List<V14>*)_colDatas[13])->Add(v14);
    ((List<V15>*)_colDatas[14])->Add(v15);
    ((List<V16>*)_colDatas[15])->Add(v16);
    ((List<V17>*)_colDatas[16])->Add(v17);
    ((List<V18>*)_colDatas[17])->Add(v18);
    ((List<V19>*)_colDatas[18])->Add(v19);
    ((List<V20>*)_colDatas[19])->Add(v20);
    ++_rowCount;
    return *this;
}
template<typename V1, typename V2, typename V3, typename V4, typename V5, typename V6, typename V7, typename V8, typename V9, typename V10, typename V11, typename V12, typename V13, typename V14, typename V15, typename V16, typename V17, typename V18, typename V19, typename V20, typename V21>
DbTable & DbTable::AddRow(V1 const &v1, V2 const &v2, V3 const &v3, V4 const &v4, V5 const &v5, V6 const &v6, V7 const &v7, V8 const &v8, V9 const &v9, V10 const &v10, V11 const &v11, V12 const &v12, V13 const &v13, V14 const &v14, V15 const &v15, V16 const &v16, V17 const &v17, V18 const &v18, V19 const &v19, V20 const &v20, V21 const &v21) {
    assert( _colNames.Length() == 21 );
    assert( _colTypes[0] == DbTypeIDs<V1>::ID() );
    assert( _colTypes[1] == DbTypeIDs<V2>::ID() );
    assert( _colTypes[2] == DbTypeIDs<V3>::ID() );
    assert( _colTypes[3] == DbTypeIDs<V4>::ID() );
    assert( _colTypes[4] == DbTypeIDs<V5>::ID() );
    assert( _colTypes[5] == DbTypeIDs<V6>::ID() );
    assert( _colTypes[6] == DbTypeIDs<V7>::ID() );
    assert( _colTypes[7] == DbTypeIDs<V8>::ID() );
    assert( _colTypes[8] == DbTypeIDs<V9>::ID() );
    assert( _colTypes[9] == DbTypeIDs<V10>::ID() );
    assert( _colTypes[10] == DbTypeIDs<V11>::ID() );
    assert( _colTypes[11] == DbTypeIDs<V12>::ID() );
    assert( _colTypes[12] == DbTypeIDs<V13>::ID() );
    assert( _colTypes[13] == DbTypeIDs<V14>::ID() );
    assert( _colTypes[14] == DbTypeIDs<V15>::ID() );
    assert( _colTypes[15] == DbTypeIDs<V16>::ID() );
    assert( _colTypes[16] == DbTypeIDs<V17>::ID() );
    assert( _colTypes[17] == DbTypeIDs<V18>::ID() );
    assert( _colTypes[18] == DbTypeIDs<V19>::ID() );
    assert( _colTypes[19] == DbTypeIDs<V20>::ID() );
    assert( _colTypes[20] == DbTypeIDs<V21>::ID() );
    ((List<V1>*)_colDatas[0])->Add(v1);
    ((List<V2>*)_colDatas[1])->Add(v2);
    ((List<V3>*)_colDatas[2])->Add(v3);
    ((List<V4>*)_colDatas[3])->Add(v4);
    ((List<V5>*)_colDatas[4])->Add(v5);
    ((List<V6>*)_colDatas[5])->Add(v6);
    ((List<V7>*)_colDatas[6])->Add(v7);
    ((List<V8>*)_colDatas[7])->Add(v8);
    ((List<V9>*)_colDatas[8])->Add(v9);
    ((List<V10>*)_colDatas[9])->Add(v10);
    ((List<V11>*)_colDatas[10])->Add(v11);
    ((List<V12>*)_colDatas[11])->Add(v12);
    ((List<V13>*)_colDatas[12])->Add(v13);
    ((List<V14>*)_colDatas[13])->Add(v14);
    ((List<V15>*)_colDatas[14])->Add(v15);
    ((List<V16>*)_colDatas[15])->Add(v16);
    ((List<V17>*)_colDatas[16])->Add(v17);
    ((List<V18>*)_colDatas[17])->Add(v18);
    ((List<V19>*)_colDatas[18])->Add(v19);
    ((List<V20>*)_colDatas[19])->Add(v20);
    ((List<V21>*)_colDatas[20])->Add(v21);
    ++_rowCount;
    return *this;
}
template<typename V1, typename V2, typename V3, typename V4, typename V5, typename V6, typename V7, typename V8, typename V9, typename V10, typename V11, typename V12, typename V13, typename V14, typename V15, typename V16, typename V17, typename V18, typename V19, typename V20, typename V21, typename V22>
DbTable & DbTable::AddRow(V1 const &v1, V2 const &v2, V3 const &v3, V4 const &v4, V5 const &v5, V6 const &v6, V7 const &v7, V8 const &v8, V9 const &v9, V10 const &v10, V11 const &v11, V12 const &v12, V13 const &v13, V14 const &v14, V15 const &v15, V16 const &v16, V17 const &v17, V18 const &v18, V19 const &v19, V20 const &v20, V21 const &v21, V22 const &v22) {
    assert( _colNames.Length() == 22 );
    assert( _colTypes[0] == DbTypeIDs<V1>::ID() );
    assert( _colTypes[1] == DbTypeIDs<V2>::ID() );
    assert( _colTypes[2] == DbTypeIDs<V3>::ID() );
    assert( _colTypes[3] == DbTypeIDs<V4>::ID() );
    assert( _colTypes[4] == DbTypeIDs<V5>::ID() );
    assert( _colTypes[5] == DbTypeIDs<V6>::ID() );
    assert( _colTypes[6] == DbTypeIDs<V7>::ID() );
    assert( _colTypes[7] == DbTypeIDs<V8>::ID() );
    assert( _colTypes[8] == DbTypeIDs<V9>::ID() );
    assert( _colTypes[9] == DbTypeIDs<V10>::ID() );
    assert( _colTypes[10] == DbTypeIDs<V11>::ID() );
    assert( _colTypes[11] == DbTypeIDs<V12>::ID() );
    assert( _colTypes[12] == DbTypeIDs<V13>::ID() );
    assert( _colTypes[13] == DbTypeIDs<V14>::ID() );
    assert( _colTypes[14] == DbTypeIDs<V15>::ID() );
    assert( _colTypes[15] == DbTypeIDs<V16>::ID() );
    assert( _colTypes[16] == DbTypeIDs<V17>::ID() );
    assert( _colTypes[17] == DbTypeIDs<V18>::ID() );
    assert( _colTypes[18] == DbTypeIDs<V19>::ID() );
    assert( _colTypes[19] == DbTypeIDs<V20>::ID() );
    assert( _colTypes[20] == DbTypeIDs<V21>::ID() );
    assert( _colTypes[21] == DbTypeIDs<V22>::ID() );
    ((List<V1>*)_colDatas[0])->Add(v1);
    ((List<V2>*)_colDatas[1])->Add(v2);
    ((List<V3>*)_colDatas[2])->Add(v3);
    ((List<V4>*)_colDatas[3])->Add(v4);
    ((List<V5>*)_colDatas[4])->Add(v5);
    ((List<V6>*)_colDatas[5])->Add(v6);
    ((List<V7>*)_colDatas[6])->Add(v7);
    ((List<V8>*)_colDatas[7])->Add(v8);
    ((List<V9>*)_colDatas[8])->Add(v9);
    ((List<V10>*)_colDatas[9])->Add(v10);
    ((List<V11>*)_colDatas[10])->Add(v11);
    ((List<V12>*)_colDatas[11])->Add(v12);
    ((List<V13>*)_colDatas[12])->Add(v13);
    ((List<V14>*)_colDatas[13])->Add(v14);
    ((List<V15>*)_colDatas[14])->Add(v15);
    ((List<V16>*)_colDatas[15])->Add(v16);
    ((List<V17>*)_colDatas[16])->Add(v17);
    ((List<V18>*)_colDatas[17])->Add(v18);
    ((List<V19>*)_colDatas[18])->Add(v19);
    ((List<V20>*)_colDatas[19])->Add(v20);
    ((List<V21>*)_colDatas[20])->Add(v21);
    ((List<V22>*)_colDatas[21])->Add(v22);
    ++_rowCount;
    return *this;
}
template<typename V1, typename V2, typename V3, typename V4, typename V5, typename V6, typename V7, typename V8, typename V9, typename V10, typename V11, typename V12, typename V13, typename V14, typename V15, typename V16, typename V17, typename V18, typename V19, typename V20, typename V21, typename V22, typename V23>
DbTable & DbTable::AddRow(V1 const &v1, V2 const &v2, V3 const &v3, V4 const &v4, V5 const &v5, V6 const &v6, V7 const &v7, V8 const &v8, V9 const &v9, V10 const &v10, V11 const &v11, V12 const &v12, V13 const &v13, V14 const &v14, V15 const &v15, V16 const &v16, V17 const &v17, V18 const &v18, V19 const &v19, V20 const &v20, V21 const &v21, V22 const &v22, V23 const &v23) {
    assert( _colNames.Length() == 23 );
    assert( _colTypes[0] == DbTypeIDs<V1>::ID() );
    assert( _colTypes[1] == DbTypeIDs<V2>::ID() );
    assert( _colTypes[2] == DbTypeIDs<V3>::ID() );
    assert( _colTypes[3] == DbTypeIDs<V4>::ID() );
    assert( _colTypes[4] == DbTypeIDs<V5>::ID() );
    assert( _colTypes[5] == DbTypeIDs<V6>::ID() );
    assert( _colTypes[6] == DbTypeIDs<V7>::ID() );
    assert( _colTypes[7] == DbTypeIDs<V8>::ID() );
    assert( _colTypes[8] == DbTypeIDs<V9>::ID() );
    assert( _colTypes[9] == DbTypeIDs<V10>::ID() );
    assert( _colTypes[10] == DbTypeIDs<V11>::ID() );
    assert( _colTypes[11] == DbTypeIDs<V12>::ID() );
    assert( _colTypes[12] == DbTypeIDs<V13>::ID() );
    assert( _colTypes[13] == DbTypeIDs<V14>::ID() );
    assert( _colTypes[14] == DbTypeIDs<V15>::ID() );
    assert( _colTypes[15] == DbTypeIDs<V16>::ID() );
    assert( _colTypes[16] == DbTypeIDs<V17>::ID() );
    assert( _colTypes[17] == DbTypeIDs<V18>::ID() );
    assert( _colTypes[18] == DbTypeIDs<V19>::ID() );
    assert( _colTypes[19] == DbTypeIDs<V20>::ID() );
    assert( _colTypes[20] == DbTypeIDs<V21>::ID() );
    assert( _colTypes[21] == DbTypeIDs<V22>::ID() );
    assert( _colTypes[22] == DbTypeIDs<V23>::ID() );
    ((List<V1>*)_colDatas[0])->Add(v1);
    ((List<V2>*)_colDatas[1])->Add(v2);
    ((List<V3>*)_colDatas[2])->Add(v3);
    ((List<V4>*)_colDatas[3])->Add(v4);
    ((List<V5>*)_colDatas[4])->Add(v5);
    ((List<V6>*)_colDatas[5])->Add(v6);
    ((List<V7>*)_colDatas[6])->Add(v7);
    ((List<V8>*)_colDatas[7])->Add(v8);
    ((List<V9>*)_colDatas[8])->Add(v9);
    ((List<V10>*)_colDatas[9])->Add(v10);
    ((List<V11>*)_colDatas[10])->Add(v11);
    ((List<V12>*)_colDatas[11])->Add(v12);
    ((List<V13>*)_colDatas[12])->Add(v13);
    ((List<V14>*)_colDatas[13])->Add(v14);
    ((List<V15>*)_colDatas[14])->Add(v15);
    ((List<V16>*)_colDatas[15])->Add(v16);
    ((List<V17>*)_colDatas[16])->Add(v17);
    ((List<V18>*)_colDatas[17])->Add(v18);
    ((List<V19>*)_colDatas[18])->Add(v19);
    ((List<V20>*)_colDatas[19])->Add(v20);
    ((List<V21>*)_colDatas[20])->Add(v21);
    ((List<V22>*)_colDatas[21])->Add(v22);
    ((List<V23>*)_colDatas[22])->Add(v23);
    ++_rowCount;
    return *this;
}
template<typename V1, typename V2, typename V3, typename V4, typename V5, typename V6, typename V7, typename V8, typename V9, typename V10, typename V11, typename V12, typename V13, typename V14, typename V15, typename V16, typename V17, typename V18, typename V19, typename V20, typename V21, typename V22, typename V23, typename V24>
DbTable & DbTable::AddRow(V1 const &v1, V2 const &v2, V3 const &v3, V4 const &v4, V5 const &v5, V6 const &v6, V7 const &v7, V8 const &v8, V9 const &v9, V10 const &v10, V11 const &v11, V12 const &v12, V13 const &v13, V14 const &v14, V15 const &v15, V16 const &v16, V17 const &v17, V18 const &v18, V19 const &v19, V20 const &v20, V21 const &v21, V22 const &v22, V23 const &v23, V24 const &v24) {
    assert( _colNames.Length() == 24 );
    assert( _colTypes[0] == DbTypeIDs<V1>::ID() );
    assert( _colTypes[1] == DbTypeIDs<V2>::ID() );
    assert( _colTypes[2] == DbTypeIDs<V3>::ID() );
    assert( _colTypes[3] == DbTypeIDs<V4>::ID() );
    assert( _colTypes[4] == DbTypeIDs<V5>::ID() );
    assert( _colTypes[5] == DbTypeIDs<V6>::ID() );
    assert( _colTypes[6] == DbTypeIDs<V7>::ID() );
    assert( _colTypes[7] == DbTypeIDs<V8>::ID() );
    assert( _colTypes[8] == DbTypeIDs<V9>::ID() );
    assert( _colTypes[9] == DbTypeIDs<V10>::ID() );
    assert( _colTypes[10] == DbTypeIDs<V11>::ID() );
    assert( _colTypes[11] == DbTypeIDs<V12>::ID() );
    assert( _colTypes[12] == DbTypeIDs<V13>::ID() );
    assert( _colTypes[13] == DbTypeIDs<V14>::ID() );
    assert( _colTypes[14] == DbTypeIDs<V15>::ID() );
    assert( _colTypes[15] == DbTypeIDs<V16>::ID() );
    assert( _colTypes[16] == DbTypeIDs<V17>::ID() );
    assert( _colTypes[17] == DbTypeIDs<V18>::ID() );
    assert( _colTypes[18] == DbTypeIDs<V19>::ID() );
    assert( _colTypes[19] == DbTypeIDs<V20>::ID() );
    assert( _colTypes[20] == DbTypeIDs<V21>::ID() );
    assert( _colTypes[21] == DbTypeIDs<V22>::ID() );
    assert( _colTypes[22] == DbTypeIDs<V23>::ID() );
    assert( _colTypes[23] == DbTypeIDs<V24>::ID() );
    ((List<V1>*)_colDatas[0])->Add(v1);
    ((List<V2>*)_colDatas[1])->Add(v2);
    ((List<V3>*)_colDatas[2])->Add(v3);
    ((List<V4>*)_colDatas[3])->Add(v4);
    ((List<V5>*)_colDatas[4])->Add(v5);
    ((List<V6>*)_colDatas[5])->Add(v6);
    ((List<V7>*)_colDatas[6])->Add(v7);
    ((List<V8>*)_colDatas[7])->Add(v8);
    ((List<V9>*)_colDatas[8])->Add(v9);
    ((List<V10>*)_colDatas[9])->Add(v10);
    ((List<V11>*)_colDatas[10])->Add(v11);
    ((List<V12>*)_colDatas[11])->Add(v12);
    ((List<V13>*)_colDatas[12])->Add(v13);
    ((List<V14>*)_colDatas[13])->Add(v14);
    ((List<V15>*)_colDatas[14])->Add(v15);
    ((List<V16>*)_colDatas[15])->Add(v16);
    ((List<V17>*)_colDatas[16])->Add(v17);
    ((List<V18>*)_colDatas[17])->Add(v18);
    ((List<V19>*)_colDatas[18])->Add(v19);
    ((List<V20>*)_colDatas[19])->Add(v20);
    ((List<V21>*)_colDatas[20])->Add(v21);
    ((List<V22>*)_colDatas[21])->Add(v22);
    ((List<V23>*)_colDatas[22])->Add(v23);
    ((List<V24>*)_colDatas[23])->Add(v24);
    ++_rowCount;
    return *this;
}
template<typename V1, typename V2, typename V3, typename V4, typename V5, typename V6, typename V7, typename V8, typename V9, typename V10, typename V11, typename V12, typename V13, typename V14, typename V15, typename V16, typename V17, typename V18, typename V19, typename V20, typename V21, typename V22, typename V23, typename V24, typename V25>
DbTable & DbTable::AddRow(V1 const &v1, V2 const &v2, V3 const &v3, V4 const &v4, V5 const &v5, V6 const &v6, V7 const &v7, V8 const &v8, V9 const &v9, V10 const &v10, V11 const &v11, V12 const &v12, V13 const &v13, V14 const &v14, V15 const &v15, V16 const &v16, V17 const &v17, V18 const &v18, V19 const &v19, V20 const &v20, V21 const &v21, V22 const &v22, V23 const &v23, V24 const &v24, V25 const &v25) {
    assert( _colNames.Length() == 25 );
    assert( _colTypes[0] == DbTypeIDs<V1>::ID() );
    assert( _colTypes[1] == DbTypeIDs<V2>::ID() );
    assert( _colTypes[2] == DbTypeIDs<V3>::ID() );
    assert( _colTypes[3] == DbTypeIDs<V4>::ID() );
    assert( _colTypes[4] == DbTypeIDs<V5>::ID() );
    assert( _colTypes[5] == DbTypeIDs<V6>::ID() );
    assert( _colTypes[6] == DbTypeIDs<V7>::ID() );
    assert( _colTypes[7] == DbTypeIDs<V8>::ID() );
    assert( _colTypes[8] == DbTypeIDs<V9>::ID() );
    assert( _colTypes[9] == DbTypeIDs<V10>::ID() );
    assert( _colTypes[10] == DbTypeIDs<V11>::ID() );
    assert( _colTypes[11] == DbTypeIDs<V12>::ID() );
    assert( _colTypes[12] == DbTypeIDs<V13>::ID() );
    assert( _colTypes[13] == DbTypeIDs<V14>::ID() );
    assert( _colTypes[14] == DbTypeIDs<V15>::ID() );
    assert( _colTypes[15] == DbTypeIDs<V16>::ID() );
    assert( _colTypes[16] == DbTypeIDs<V17>::ID() );
    assert( _colTypes[17] == DbTypeIDs<V18>::ID() );
    assert( _colTypes[18] == DbTypeIDs<V19>::ID() );
    assert( _colTypes[19] == DbTypeIDs<V20>::ID() );
    assert( _colTypes[20] == DbTypeIDs<V21>::ID() );
    assert( _colTypes[21] == DbTypeIDs<V22>::ID() );
    assert( _colTypes[22] == DbTypeIDs<V23>::ID() );
    assert( _colTypes[23] == DbTypeIDs<V24>::ID() );
    assert( _colTypes[24] == DbTypeIDs<V25>::ID() );
    ((List<V1>*)_colDatas[0])->Add(v1);
    ((List<V2>*)_colDatas[1])->Add(v2);
    ((List<V3>*)_colDatas[2])->Add(v3);
    ((List<V4>*)_colDatas[3])->Add(v4);
    ((List<V5>*)_colDatas[4])->Add(v5);
    ((List<V6>*)_colDatas[5])->Add(v6);
    ((List<V7>*)_colDatas[6])->Add(v7);
    ((List<V8>*)_colDatas[7])->Add(v8);
    ((List<V9>*)_colDatas[8])->Add(v9);
    ((List<V10>*)_colDatas[9])->Add(v10);
    ((List<V11>*)_colDatas[10])->Add(v11);
    ((List<V12>*)_colDatas[11])->Add(v12);
    ((List<V13>*)_colDatas[12])->Add(v13);
    ((List<V14>*)_colDatas[13])->Add(v14);
    ((List<V15>*)_colDatas[14])->Add(v15);
    ((List<V16>*)_colDatas[15])->Add(v16);
    ((List<V17>*)_colDatas[16])->Add(v17);
    ((List<V18>*)_colDatas[17])->Add(v18);
    ((List<V19>*)_colDatas[18])->Add(v19);
    ((List<V20>*)_colDatas[19])->Add(v20);
    ((List<V21>*)_colDatas[20])->Add(v21);
    ((List<V22>*)_colDatas[21])->Add(v22);
    ((List<V23>*)_colDatas[22])->Add(v23);
    ((List<V24>*)_colDatas[23])->Add(v24);
    ((List<V25>*)_colDatas[24])->Add(v25);
    ++_rowCount;
    return *this;
}
template<typename V1, typename V2, typename V3, typename V4, typename V5, typename V6, typename V7, typename V8, typename V9, typename V10, typename V11, typename V12, typename V13, typename V14, typename V15, typename V16, typename V17, typename V18, typename V19, typename V20, typename V21, typename V22, typename V23, typename V24, typename V25, typename V26>
DbTable & DbTable::AddRow(V1 const &v1, V2 const &v2, V3 const &v3, V4 const &v4, V5 const &v5, V6 const &v6, V7 const &v7, V8 const &v8, V9 const &v9, V10 const &v10, V11 const &v11, V12 const &v12, V13 const &v13, V14 const &v14, V15 const &v15, V16 const &v16, V17 const &v17, V18 const &v18, V19 const &v19, V20 const &v20, V21 const &v21, V22 const &v22, V23 const &v23, V24 const &v24, V25 const &v25, V26 const &v26) {
    assert( _colNames.Length() == 26 );
    assert( _colTypes[0] == DbTypeIDs<V1>::ID() );
    assert( _colTypes[1] == DbTypeIDs<V2>::ID() );
    assert( _colTypes[2] == DbTypeIDs<V3>::ID() );
    assert( _colTypes[3] == DbTypeIDs<V4>::ID() );
    assert( _colTypes[4] == DbTypeIDs<V5>::ID() );
    assert( _colTypes[5] == DbTypeIDs<V6>::ID() );
    assert( _colTypes[6] == DbTypeIDs<V7>::ID() );
    assert( _colTypes[7] == DbTypeIDs<V8>::ID() );
    assert( _colTypes[8] == DbTypeIDs<V9>::ID() );
    assert( _colTypes[9] == DbTypeIDs<V10>::ID() );
    assert( _colTypes[10] == DbTypeIDs<V11>::ID() );
    assert( _colTypes[11] == DbTypeIDs<V12>::ID() );
    assert( _colTypes[12] == DbTypeIDs<V13>::ID() );
    assert( _colTypes[13] == DbTypeIDs<V14>::ID() );
    assert( _colTypes[14] == DbTypeIDs<V15>::ID() );
    assert( _colTypes[15] == DbTypeIDs<V16>::ID() );
    assert( _colTypes[16] == DbTypeIDs<V17>::ID() );
    assert( _colTypes[17] == DbTypeIDs<V18>::ID() );
    assert( _colTypes[18] == DbTypeIDs<V19>::ID() );
    assert( _colTypes[19] == DbTypeIDs<V20>::ID() );
    assert( _colTypes[20] == DbTypeIDs<V21>::ID() );
    assert( _colTypes[21] == DbTypeIDs<V22>::ID() );
    assert( _colTypes[22] == DbTypeIDs<V23>::ID() );
    assert( _colTypes[23] == DbTypeIDs<V24>::ID() );
    assert( _colTypes[24] == DbTypeIDs<V25>::ID() );
    assert( _colTypes[25] == DbTypeIDs<V26>::ID() );
    ((List<V1>*)_colDatas[0])->Add(v1);
    ((List<V2>*)_colDatas[1])->Add(v2);
    ((List<V3>*)_colDatas[2])->Add(v3);
    ((List<V4>*)_colDatas[3])->Add(v4);
    ((List<V5>*)_colDatas[4])->Add(v5);
    ((List<V6>*)_colDatas[5])->Add(v6);
    ((List<V7>*)_colDatas[6])->Add(v7);
    ((List<V8>*)_colDatas[7])->Add(v8);
    ((List<V9>*)_colDatas[8])->Add(v9);
    ((List<V10>*)_colDatas[9])->Add(v10);
    ((List<V11>*)_colDatas[10])->Add(v11);
    ((List<V12>*)_colDatas[11])->Add(v12);
    ((List<V13>*)_colDatas[12])->Add(v13);
    ((List<V14>*)_colDatas[13])->Add(v14);
    ((List<V15>*)_colDatas[14])->Add(v15);
    ((List<V16>*)_colDatas[15])->Add(v16);
    ((List<V17>*)_colDatas[16])->Add(v17);
    ((List<V18>*)_colDatas[17])->Add(v18);
    ((List<V19>*)_colDatas[18])->Add(v19);
    ((List<V20>*)_colDatas[19])->Add(v20);
    ((List<V21>*)_colDatas[20])->Add(v21);
    ((List<V22>*)_colDatas[21])->Add(v22);
    ((List<V23>*)_colDatas[22])->Add(v23);
    ((List<V24>*)_colDatas[23])->Add(v24);
    ((List<V25>*)_colDatas[24])->Add(v25);
    ((List<V26>*)_colDatas[25])->Add(v26);
    ++_rowCount;
    return *this;
}
template<typename V1, typename V2, typename V3, typename V4, typename V5, typename V6, typename V7, typename V8, typename V9, typename V10, typename V11, typename V12, typename V13, typename V14, typename V15, typename V16, typename V17, typename V18, typename V19, typename V20, typename V21, typename V22, typename V23, typename V24, typename V25, typename V26, typename V27>
DbTable & DbTable::AddRow(V1 const &v1, V2 const &v2, V3 const &v3, V4 const &v4, V5 const &v5, V6 const &v6, V7 const &v7, V8 const &v8, V9 const &v9, V10 const &v10, V11 const &v11, V12 const &v12, V13 const &v13, V14 const &v14, V15 const &v15, V16 const &v16, V17 const &v17, V18 const &v18, V19 const &v19, V20 const &v20, V21 const &v21, V22 const &v22, V23 const &v23, V24 const &v24, V25 const &v25, V26 const &v26, V27 const &v27) {
    assert( _colNames.Length() == 27 );
    assert( _colTypes[0] == DbTypeIDs<V1>::ID() );
    assert( _colTypes[1] == DbTypeIDs<V2>::ID() );
    assert( _colTypes[2] == DbTypeIDs<V3>::ID() );
    assert( _colTypes[3] == DbTypeIDs<V4>::ID() );
    assert( _colTypes[4] == DbTypeIDs<V5>::ID() );
    assert( _colTypes[5] == DbTypeIDs<V6>::ID() );
    assert( _colTypes[6] == DbTypeIDs<V7>::ID() );
    assert( _colTypes[7] == DbTypeIDs<V8>::ID() );
    assert( _colTypes[8] == DbTypeIDs<V9>::ID() );
    assert( _colTypes[9] == DbTypeIDs<V10>::ID() );
    assert( _colTypes[10] == DbTypeIDs<V11>::ID() );
    assert( _colTypes[11] == DbTypeIDs<V12>::ID() );
    assert( _colTypes[12] == DbTypeIDs<V13>::ID() );
    assert( _colTypes[13] == DbTypeIDs<V14>::ID() );
    assert( _colTypes[14] == DbTypeIDs<V15>::ID() );
    assert( _colTypes[15] == DbTypeIDs<V16>::ID() );
    assert( _colTypes[16] == DbTypeIDs<V17>::ID() );
    assert( _colTypes[17] == DbTypeIDs<V18>::ID() );
    assert( _colTypes[18] == DbTypeIDs<V19>::ID() );
    assert( _colTypes[19] == DbTypeIDs<V20>::ID() );
    assert( _colTypes[20] == DbTypeIDs<V21>::ID() );
    assert( _colTypes[21] == DbTypeIDs<V22>::ID() );
    assert( _colTypes[22] == DbTypeIDs<V23>::ID() );
    assert( _colTypes[23] == DbTypeIDs<V24>::ID() );
    assert( _colTypes[24] == DbTypeIDs<V25>::ID() );
    assert( _colTypes[25] == DbTypeIDs<V26>::ID() );
    assert( _colTypes[26] == DbTypeIDs<V27>::ID() );
    ((List<V1>*)_colDatas[0])->Add(v1);
    ((List<V2>*)_colDatas[1])->Add(v2);
    ((List<V3>*)_colDatas[2])->Add(v3);
    ((List<V4>*)_colDatas[3])->Add(v4);
    ((List<V5>*)_colDatas[4])->Add(v5);
    ((List<V6>*)_colDatas[5])->Add(v6);
    ((List<V7>*)_colDatas[6])->Add(v7);
    ((List<V8>*)_colDatas[7])->Add(v8);
    ((List<V9>*)_colDatas[8])->Add(v9);
    ((List<V10>*)_colDatas[9])->Add(v10);
    ((List<V11>*)_colDatas[10])->Add(v11);
    ((List<V12>*)_colDatas[11])->Add(v12);
    ((List<V13>*)_colDatas[12])->Add(v13);
    ((List<V14>*)_colDatas[13])->Add(v14);
    ((List<V15>*)_colDatas[14])->Add(v15);
    ((List<V16>*)_colDatas[15])->Add(v16);
    ((List<V17>*)_colDatas[16])->Add(v17);
    ((List<V18>*)_colDatas[17])->Add(v18);
    ((List<V19>*)_colDatas[18])->Add(v19);
    ((List<V20>*)_colDatas[19])->Add(v20);
    ((List<V21>*)_colDatas[20])->Add(v21);
    ((List<V22>*)_colDatas[21])->Add(v22);
    ((List<V23>*)_colDatas[22])->Add(v23);
    ((List<V24>*)_colDatas[23])->Add(v24);
    ((List<V25>*)_colDatas[24])->Add(v25);
    ((List<V26>*)_colDatas[25])->Add(v26);
    ((List<V27>*)_colDatas[26])->Add(v27);
    ++_rowCount;
    return *this;
}
template<typename V1, typename V2, typename V3, typename V4, typename V5, typename V6, typename V7, typename V8, typename V9, typename V10, typename V11, typename V12, typename V13, typename V14, typename V15, typename V16, typename V17, typename V18, typename V19, typename V20, typename V21, typename V22, typename V23, typename V24, typename V25, typename V26, typename V27, typename V28>
DbTable & DbTable::AddRow(V1 const &v1, V2 const &v2, V3 const &v3, V4 const &v4, V5 const &v5, V6 const &v6, V7 const &v7, V8 const &v8, V9 const &v9, V10 const &v10, V11 const &v11, V12 const &v12, V13 const &v13, V14 const &v14, V15 const &v15, V16 const &v16, V17 const &v17, V18 const &v18, V19 const &v19, V20 const &v20, V21 const &v21, V22 const &v22, V23 const &v23, V24 const &v24, V25 const &v25, V26 const &v26, V27 const &v27, V28 const &v28) {
    assert( _colNames.Length() == 28 );
    assert( _colTypes[0] == DbTypeIDs<V1>::ID() );
    assert( _colTypes[1] == DbTypeIDs<V2>::ID() );
    assert( _colTypes[2] == DbTypeIDs<V3>::ID() );
    assert( _colTypes[3] == DbTypeIDs<V4>::ID() );
    assert( _colTypes[4] == DbTypeIDs<V5>::ID() );
    assert( _colTypes[5] == DbTypeIDs<V6>::ID() );
    assert( _colTypes[6] == DbTypeIDs<V7>::ID() );
    assert( _colTypes[7] == DbTypeIDs<V8>::ID() );
    assert( _colTypes[8] == DbTypeIDs<V9>::ID() );
    assert( _colTypes[9] == DbTypeIDs<V10>::ID() );
    assert( _colTypes[10] == DbTypeIDs<V11>::ID() );
    assert( _colTypes[11] == DbTypeIDs<V12>::ID() );
    assert( _colTypes[12] == DbTypeIDs<V13>::ID() );
    assert( _colTypes[13] == DbTypeIDs<V14>::ID() );
    assert( _colTypes[14] == DbTypeIDs<V15>::ID() );
    assert( _colTypes[15] == DbTypeIDs<V16>::ID() );
    assert( _colTypes[16] == DbTypeIDs<V17>::ID() );
    assert( _colTypes[17] == DbTypeIDs<V18>::ID() );
    assert( _colTypes[18] == DbTypeIDs<V19>::ID() );
    assert( _colTypes[19] == DbTypeIDs<V20>::ID() );
    assert( _colTypes[20] == DbTypeIDs<V21>::ID() );
    assert( _colTypes[21] == DbTypeIDs<V22>::ID() );
    assert( _colTypes[22] == DbTypeIDs<V23>::ID() );
    assert( _colTypes[23] == DbTypeIDs<V24>::ID() );
    assert( _colTypes[24] == DbTypeIDs<V25>::ID() );
    assert( _colTypes[25] == DbTypeIDs<V26>::ID() );
    assert( _colTypes[26] == DbTypeIDs<V27>::ID() );
    assert( _colTypes[27] == DbTypeIDs<V28>::ID() );
    ((List<V1>*)_colDatas[0])->Add(v1);
    ((List<V2>*)_colDatas[1])->Add(v2);
    ((List<V3>*)_colDatas[2])->Add(v3);
    ((List<V4>*)_colDatas[3])->Add(v4);
    ((List<V5>*)_colDatas[4])->Add(v5);
    ((List<V6>*)_colDatas[5])->Add(v6);
    ((List<V7>*)_colDatas[6])->Add(v7);
    ((List<V8>*)_colDatas[7])->Add(v8);
    ((List<V9>*)_colDatas[8])->Add(v9);
    ((List<V10>*)_colDatas[9])->Add(v10);
    ((List<V11>*)_colDatas[10])->Add(v11);
    ((List<V12>*)_colDatas[11])->Add(v12);
    ((List<V13>*)_colDatas[12])->Add(v13);
    ((List<V14>*)_colDatas[13])->Add(v14);
    ((List<V15>*)_colDatas[14])->Add(v15);
    ((List<V16>*)_colDatas[15])->Add(v16);
    ((List<V17>*)_colDatas[16])->Add(v17);
    ((List<V18>*)_colDatas[17])->Add(v18);
    ((List<V19>*)_colDatas[18])->Add(v19);
    ((List<V20>*)_colDatas[19])->Add(v20);
    ((List<V21>*)_colDatas[20])->Add(v21);
    ((List<V22>*)_colDatas[21])->Add(v22);
    ((List<V23>*)_colDatas[22])->Add(v23);
    ((List<V24>*)_colDatas[23])->Add(v24);
    ((List<V25>*)_colDatas[24])->Add(v25);
    ((List<V26>*)_colDatas[25])->Add(v26);
    ((List<V27>*)_colDatas[26])->Add(v27);
    ((List<V28>*)_colDatas[27])->Add(v28);
    ++_rowCount;
    return *this;
}
template<typename V1, typename V2, typename V3, typename V4, typename V5, typename V6, typename V7, typename V8, typename V9, typename V10, typename V11, typename V12, typename V13, typename V14, typename V15, typename V16, typename V17, typename V18, typename V19, typename V20, typename V21, typename V22, typename V23, typename V24, typename V25, typename V26, typename V27, typename V28, typename V29>
DbTable & DbTable::AddRow(V1 const &v1, V2 const &v2, V3 const &v3, V4 const &v4, V5 const &v5, V6 const &v6, V7 const &v7, V8 const &v8, V9 const &v9, V10 const &v10, V11 const &v11, V12 const &v12, V13 const &v13, V14 const &v14, V15 const &v15, V16 const &v16, V17 const &v17, V18 const &v18, V19 const &v19, V20 const &v20, V21 const &v21, V22 const &v22, V23 const &v23, V24 const &v24, V25 const &v25, V26 const &v26, V27 const &v27, V28 const &v28, V29 const &v29) {
    assert( _colNames.Length() == 29 );
    assert( _colTypes[0] == DbTypeIDs<V1>::ID() );
    assert( _colTypes[1] == DbTypeIDs<V2>::ID() );
    assert( _colTypes[2] == DbTypeIDs<V3>::ID() );
    assert( _colTypes[3] == DbTypeIDs<V4>::ID() );
    assert( _colTypes[4] == DbTypeIDs<V5>::ID() );
    assert( _colTypes[5] == DbTypeIDs<V6>::ID() );
    assert( _colTypes[6] == DbTypeIDs<V7>::ID() );
    assert( _colTypes[7] == DbTypeIDs<V8>::ID() );
    assert( _colTypes[8] == DbTypeIDs<V9>::ID() );
    assert( _colTypes[9] == DbTypeIDs<V10>::ID() );
    assert( _colTypes[10] == DbTypeIDs<V11>::ID() );
    assert( _colTypes[11] == DbTypeIDs<V12>::ID() );
    assert( _colTypes[12] == DbTypeIDs<V13>::ID() );
    assert( _colTypes[13] == DbTypeIDs<V14>::ID() );
    assert( _colTypes[14] == DbTypeIDs<V15>::ID() );
    assert( _colTypes[15] == DbTypeIDs<V16>::ID() );
    assert( _colTypes[16] == DbTypeIDs<V17>::ID() );
    assert( _colTypes[17] == DbTypeIDs<V18>::ID() );
    assert( _colTypes[18] == DbTypeIDs<V19>::ID() );
    assert( _colTypes[19] == DbTypeIDs<V20>::ID() );
    assert( _colTypes[20] == DbTypeIDs<V21>::ID() );
    assert( _colTypes[21] == DbTypeIDs<V22>::ID() );
    assert( _colTypes[22] == DbTypeIDs<V23>::ID() );
    assert( _colTypes[23] == DbTypeIDs<V24>::ID() );
    assert( _colTypes[24] == DbTypeIDs<V25>::ID() );
    assert( _colTypes[25] == DbTypeIDs<V26>::ID() );
    assert( _colTypes[26] == DbTypeIDs<V27>::ID() );
    assert( _colTypes[27] == DbTypeIDs<V28>::ID() );
    assert( _colTypes[28] == DbTypeIDs<V29>::ID() );
    ((List<V1>*)_colDatas[0])->Add(v1);
    ((List<V2>*)_colDatas[1])->Add(v2);
    ((List<V3>*)_colDatas[2])->Add(v3);
    ((List<V4>*)_colDatas[3])->Add(v4);
    ((List<V5>*)_colDatas[4])->Add(v5);
    ((List<V6>*)_colDatas[5])->Add(v6);
    ((List<V7>*)_colDatas[6])->Add(v7);
    ((List<V8>*)_colDatas[7])->Add(v8);
    ((List<V9>*)_colDatas[8])->Add(v9);
    ((List<V10>*)_colDatas[9])->Add(v10);
    ((List<V11>*)_colDatas[10])->Add(v11);
    ((List<V12>*)_colDatas[11])->Add(v12);
    ((List<V13>*)_colDatas[12])->Add(v13);
    ((List<V14>*)_colDatas[13])->Add(v14);
    ((List<V15>*)_colDatas[14])->Add(v15);
    ((List<V16>*)_colDatas[15])->Add(v16);
    ((List<V17>*)_colDatas[16])->Add(v17);
    ((List<V18>*)_colDatas[17])->Add(v18);
    ((List<V19>*)_colDatas[18])->Add(v19);
    ((List<V20>*)_colDatas[19])->Add(v20);
    ((List<V21>*)_colDatas[20])->Add(v21);
    ((List<V22>*)_colDatas[21])->Add(v22);
    ((List<V23>*)_colDatas[22])->Add(v23);
    ((List<V24>*)_colDatas[23])->Add(v24);
    ((List<V25>*)_colDatas[24])->Add(v25);
    ((List<V26>*)_colDatas[25])->Add(v26);
    ((List<V27>*)_colDatas[26])->Add(v27);
    ((List<V28>*)_colDatas[27])->Add(v28);
    ((List<V29>*)_colDatas[28])->Add(v29);
    ++_rowCount;
    return *this;
}
template<typename V1, typename V2, typename V3, typename V4, typename V5, typename V6, typename V7, typename V8, typename V9, typename V10, typename V11, typename V12, typename V13, typename V14, typename V15, typename V16, typename V17, typename V18, typename V19, typename V20, typename V21, typename V22, typename V23, typename V24, typename V25, typename V26, typename V27, typename V28, typename V29, typename V30>
DbTable & DbTable::AddRow(V1 const &v1, V2 const &v2, V3 const &v3, V4 const &v4, V5 const &v5, V6 const &v6, V7 const &v7, V8 const &v8, V9 const &v9, V10 const &v10, V11 const &v11, V12 const &v12, V13 const &v13, V14 const &v14, V15 const &v15, V16 const &v16, V17 const &v17, V18 const &v18, V19 const &v19, V20 const &v20, V21 const &v21, V22 const &v22, V23 const &v23, V24 const &v24, V25 const &v25, V26 const &v26, V27 const &v27, V28 const &v28, V29 const &v29, V30 const &v30) {
    assert( _colNames.Length() == 30 );
    assert( _colTypes[0] == DbTypeIDs<V1>::ID() );
    assert( _colTypes[1] == DbTypeIDs<V2>::ID() );
    assert( _colTypes[2] == DbTypeIDs<V3>::ID() );
    assert( _colTypes[3] == DbTypeIDs<V4>::ID() );
    assert( _colTypes[4] == DbTypeIDs<V5>::ID() );
    assert( _colTypes[5] == DbTypeIDs<V6>::ID() );
    assert( _colTypes[6] == DbTypeIDs<V7>::ID() );
    assert( _colTypes[7] == DbTypeIDs<V8>::ID() );
    assert( _colTypes[8] == DbTypeIDs<V9>::ID() );
    assert( _colTypes[9] == DbTypeIDs<V10>::ID() );
    assert( _colTypes[10] == DbTypeIDs<V11>::ID() );
    assert( _colTypes[11] == DbTypeIDs<V12>::ID() );
    assert( _colTypes[12] == DbTypeIDs<V13>::ID() );
    assert( _colTypes[13] == DbTypeIDs<V14>::ID() );
    assert( _colTypes[14] == DbTypeIDs<V15>::ID() );
    assert( _colTypes[15] == DbTypeIDs<V16>::ID() );
    assert( _colTypes[16] == DbTypeIDs<V17>::ID() );
    assert( _colTypes[17] == DbTypeIDs<V18>::ID() );
    assert( _colTypes[18] == DbTypeIDs<V19>::ID() );
    assert( _colTypes[19] == DbTypeIDs<V20>::ID() );
    assert( _colTypes[20] == DbTypeIDs<V21>::ID() );
    assert( _colTypes[21] == DbTypeIDs<V22>::ID() );
    assert( _colTypes[22] == DbTypeIDs<V23>::ID() );
    assert( _colTypes[23] == DbTypeIDs<V24>::ID() );
    assert( _colTypes[24] == DbTypeIDs<V25>::ID() );
    assert( _colTypes[25] == DbTypeIDs<V26>::ID() );
    assert( _colTypes[26] == DbTypeIDs<V27>::ID() );
    assert( _colTypes[27] == DbTypeIDs<V28>::ID() );
    assert( _colTypes[28] == DbTypeIDs<V29>::ID() );
    assert( _colTypes[29] == DbTypeIDs<V30>::ID() );
    ((List<V1>*)_colDatas[0])->Add(v1);
    ((List<V2>*)_colDatas[1])->Add(v2);
    ((List<V3>*)_colDatas[2])->Add(v3);
    ((List<V4>*)_colDatas[3])->Add(v4);
    ((List<V5>*)_colDatas[4])->Add(v5);
    ((List<V6>*)_colDatas[5])->Add(v6);
    ((List<V7>*)_colDatas[6])->Add(v7);
    ((List<V8>*)_colDatas[7])->Add(v8);
    ((List<V9>*)_colDatas[8])->Add(v9);
    ((List<V10>*)_colDatas[9])->Add(v10);
    ((List<V11>*)_colDatas[10])->Add(v11);
    ((List<V12>*)_colDatas[11])->Add(v12);
    ((List<V13>*)_colDatas[12])->Add(v13);
    ((List<V14>*)_colDatas[13])->Add(v14);
    ((List<V15>*)_colDatas[14])->Add(v15);
    ((List<V16>*)_colDatas[15])->Add(v16);
    ((List<V17>*)_colDatas[16])->Add(v17);
    ((List<V18>*)_colDatas[17])->Add(v18);
    ((List<V19>*)_colDatas[18])->Add(v19);
    ((List<V20>*)_colDatas[19])->Add(v20);
    ((List<V21>*)_colDatas[20])->Add(v21);
    ((List<V22>*)_colDatas[21])->Add(v22);
    ((List<V23>*)_colDatas[22])->Add(v23);
    ((List<V24>*)_colDatas[23])->Add(v24);
    ((List<V25>*)_colDatas[24])->Add(v25);
    ((List<V26>*)_colDatas[25])->Add(v26);
    ((List<V27>*)_colDatas[26])->Add(v27);
    ((List<V28>*)_colDatas[27])->Add(v28);
    ((List<V29>*)_colDatas[28])->Add(v29);
    ((List<V30>*)_colDatas[29])->Add(v30);
    ++_rowCount;
    return *this;
}
template<typename V1, typename V2, typename V3, typename V4, typename V5, typename V6, typename V7, typename V8, typename V9, typename V10, typename V11, typename V12, typename V13, typename V14, typename V15, typename V16, typename V17, typename V18, typename V19, typename V20, typename V21, typename V22, typename V23, typename V24, typename V25, typename V26, typename V27, typename V28, typename V29, typename V30, typename V31>
DbTable & DbTable::AddRow(V1 const &v1, V2 const &v2, V3 const &v3, V4 const &v4, V5 const &v5, V6 const &v6, V7 const &v7, V8 const &v8, V9 const &v9, V10 const &v10, V11 const &v11, V12 const &v12, V13 const &v13, V14 const &v14, V15 const &v15, V16 const &v16, V17 const &v17, V18 const &v18, V19 const &v19, V20 const &v20, V21 const &v21, V22 const &v22, V23 const &v23, V24 const &v24, V25 const &v25, V26 const &v26, V27 const &v27, V28 const &v28, V29 const &v29, V30 const &v30, V31 const &v31) {
    assert( _colNames.Length() == 31 );
    assert( _colTypes[0] == DbTypeIDs<V1>::ID() );
    assert( _colTypes[1] == DbTypeIDs<V2>::ID() );
    assert( _colTypes[2] == DbTypeIDs<V3>::ID() );
    assert( _colTypes[3] == DbTypeIDs<V4>::ID() );
    assert( _colTypes[4] == DbTypeIDs<V5>::ID() );
    assert( _colTypes[5] == DbTypeIDs<V6>::ID() );
    assert( _colTypes[6] == DbTypeIDs<V7>::ID() );
    assert( _colTypes[7] == DbTypeIDs<V8>::ID() );
    assert( _colTypes[8] == DbTypeIDs<V9>::ID() );
    assert( _colTypes[9] == DbTypeIDs<V10>::ID() );
    assert( _colTypes[10] == DbTypeIDs<V11>::ID() );
    assert( _colTypes[11] == DbTypeIDs<V12>::ID() );
    assert( _colTypes[12] == DbTypeIDs<V13>::ID() );
    assert( _colTypes[13] == DbTypeIDs<V14>::ID() );
    assert( _colTypes[14] == DbTypeIDs<V15>::ID() );
    assert( _colTypes[15] == DbTypeIDs<V16>::ID() );
    assert( _colTypes[16] == DbTypeIDs<V17>::ID() );
    assert( _colTypes[17] == DbTypeIDs<V18>::ID() );
    assert( _colTypes[18] == DbTypeIDs<V19>::ID() );
    assert( _colTypes[19] == DbTypeIDs<V20>::ID() );
    assert( _colTypes[20] == DbTypeIDs<V21>::ID() );
    assert( _colTypes[21] == DbTypeIDs<V22>::ID() );
    assert( _colTypes[22] == DbTypeIDs<V23>::ID() );
    assert( _colTypes[23] == DbTypeIDs<V24>::ID() );
    assert( _colTypes[24] == DbTypeIDs<V25>::ID() );
    assert( _colTypes[25] == DbTypeIDs<V26>::ID() );
    assert( _colTypes[26] == DbTypeIDs<V27>::ID() );
    assert( _colTypes[27] == DbTypeIDs<V28>::ID() );
    assert( _colTypes[28] == DbTypeIDs<V29>::ID() );
    assert( _colTypes[29] == DbTypeIDs<V30>::ID() );
    assert( _colTypes[30] == DbTypeIDs<V31>::ID() );
    ((List<V1>*)_colDatas[0])->Add(v1);
    ((List<V2>*)_colDatas[1])->Add(v2);
    ((List<V3>*)_colDatas[2])->Add(v3);
    ((List<V4>*)_colDatas[3])->Add(v4);
    ((List<V5>*)_colDatas[4])->Add(v5);
    ((List<V6>*)_colDatas[5])->Add(v6);
    ((List<V7>*)_colDatas[6])->Add(v7);
    ((List<V8>*)_colDatas[7])->Add(v8);
    ((List<V9>*)_colDatas[8])->Add(v9);
    ((List<V10>*)_colDatas[9])->Add(v10);
    ((List<V11>*)_colDatas[10])->Add(v11);
    ((List<V12>*)_colDatas[11])->Add(v12);
    ((List<V13>*)_colDatas[12])->Add(v13);
    ((List<V14>*)_colDatas[13])->Add(v14);
    ((List<V15>*)_colDatas[14])->Add(v15);
    ((List<V16>*)_colDatas[15])->Add(v16);
    ((List<V17>*)_colDatas[16])->Add(v17);
    ((List<V18>*)_colDatas[17])->Add(v18);
    ((List<V19>*)_colDatas[18])->Add(v19);
    ((List<V20>*)_colDatas[19])->Add(v20);
    ((List<V21>*)_colDatas[20])->Add(v21);
    ((List<V22>*)_colDatas[21])->Add(v22);
    ((List<V23>*)_colDatas[22])->Add(v23);
    ((List<V24>*)_colDatas[23])->Add(v24);
    ((List<V25>*)_colDatas[24])->Add(v25);
    ((List<V26>*)_colDatas[25])->Add(v26);
    ((List<V27>*)_colDatas[26])->Add(v27);
    ((List<V28>*)_colDatas[27])->Add(v28);
    ((List<V29>*)_colDatas[28])->Add(v29);
    ((List<V30>*)_colDatas[29])->Add(v30);
    ((List<V31>*)_colDatas[30])->Add(v31);
    ++_rowCount;
    return *this;
}
template<typename V1, typename V2, typename V3, typename V4, typename V5, typename V6, typename V7, typename V8, typename V9, typename V10, typename V11, typename V12, typename V13, typename V14, typename V15, typename V16, typename V17, typename V18, typename V19, typename V20, typename V21, typename V22, typename V23, typename V24, typename V25, typename V26, typename V27, typename V28, typename V29, typename V30, typename V31, typename V32>
DbTable & DbTable::AddRow(V1 const &v1, V2 const &v2, V3 const &v3, V4 const &v4, V5 const &v5, V6 const &v6, V7 const &v7, V8 const &v8, V9 const &v9, V10 const &v10, V11 const &v11, V12 const &v12, V13 const &v13, V14 const &v14, V15 const &v15, V16 const &v16, V17 const &v17, V18 const &v18, V19 const &v19, V20 const &v20, V21 const &v21, V22 const &v22, V23 const &v23, V24 const &v24, V25 const &v25, V26 const &v26, V27 const &v27, V28 const &v28, V29 const &v29, V30 const &v30, V31 const &v31, V32 const &v32) {
    assert( _colNames.Length() == 32 );
    assert( _colTypes[0] == DbTypeIDs<V1>::ID() );
    assert( _colTypes[1] == DbTypeIDs<V2>::ID() );
    assert( _colTypes[2] == DbTypeIDs<V3>::ID() );
    assert( _colTypes[3] == DbTypeIDs<V4>::ID() );
    assert( _colTypes[4] == DbTypeIDs<V5>::ID() );
    assert( _colTypes[5] == DbTypeIDs<V6>::ID() );
    assert( _colTypes[6] == DbTypeIDs<V7>::ID() );
    assert( _colTypes[7] == DbTypeIDs<V8>::ID() );
    assert( _colTypes[8] == DbTypeIDs<V9>::ID() );
    assert( _colTypes[9] == DbTypeIDs<V10>::ID() );
    assert( _colTypes[10] == DbTypeIDs<V11>::ID() );
    assert( _colTypes[11] == DbTypeIDs<V12>::ID() );
    assert( _colTypes[12] == DbTypeIDs<V13>::ID() );
    assert( _colTypes[13] == DbTypeIDs<V14>::ID() );
    assert( _colTypes[14] == DbTypeIDs<V15>::ID() );
    assert( _colTypes[15] == DbTypeIDs<V16>::ID() );
    assert( _colTypes[16] == DbTypeIDs<V17>::ID() );
    assert( _colTypes[17] == DbTypeIDs<V18>::ID() );
    assert( _colTypes[18] == DbTypeIDs<V19>::ID() );
    assert( _colTypes[19] == DbTypeIDs<V20>::ID() );
    assert( _colTypes[20] == DbTypeIDs<V21>::ID() );
    assert( _colTypes[21] == DbTypeIDs<V22>::ID() );
    assert( _colTypes[22] == DbTypeIDs<V23>::ID() );
    assert( _colTypes[23] == DbTypeIDs<V24>::ID() );
    assert( _colTypes[24] == DbTypeIDs<V25>::ID() );
    assert( _colTypes[25] == DbTypeIDs<V26>::ID() );
    assert( _colTypes[26] == DbTypeIDs<V27>::ID() );
    assert( _colTypes[27] == DbTypeIDs<V28>::ID() );
    assert( _colTypes[28] == DbTypeIDs<V29>::ID() );
    assert( _colTypes[29] == DbTypeIDs<V30>::ID() );
    assert( _colTypes[30] == DbTypeIDs<V31>::ID() );
    assert( _colTypes[31] == DbTypeIDs<V32>::ID() );
    ((List<V1>*)_colDatas[0])->Add(v1);
    ((List<V2>*)_colDatas[1])->Add(v2);
    ((List<V3>*)_colDatas[2])->Add(v3);
    ((List<V4>*)_colDatas[3])->Add(v4);
    ((List<V5>*)_colDatas[4])->Add(v5);
    ((List<V6>*)_colDatas[5])->Add(v6);
    ((List<V7>*)_colDatas[6])->Add(v7);
    ((List<V8>*)_colDatas[7])->Add(v8);
    ((List<V9>*)_colDatas[8])->Add(v9);
    ((List<V10>*)_colDatas[9])->Add(v10);
    ((List<V11>*)_colDatas[10])->Add(v11);
    ((List<V12>*)_colDatas[11])->Add(v12);
    ((List<V13>*)_colDatas[12])->Add(v13);
    ((List<V14>*)_colDatas[13])->Add(v14);
    ((List<V15>*)_colDatas[14])->Add(v15);
    ((List<V16>*)_colDatas[15])->Add(v16);
    ((List<V17>*)_colDatas[16])->Add(v17);
    ((List<V18>*)_colDatas[17])->Add(v18);
    ((List<V19>*)_colDatas[18])->Add(v19);
    ((List<V20>*)_colDatas[19])->Add(v20);
    ((List<V21>*)_colDatas[20])->Add(v21);
    ((List<V22>*)_colDatas[21])->Add(v22);
    ((List<V23>*)_colDatas[22])->Add(v23);
    ((List<V24>*)_colDatas[23])->Add(v24);
    ((List<V25>*)_colDatas[24])->Add(v25);
    ((List<V26>*)_colDatas[25])->Add(v26);
    ((List<V27>*)_colDatas[26])->Add(v27);
    ((List<V28>*)_colDatas[27])->Add(v28);
    ((List<V29>*)_colDatas[28])->Add(v29);
    ((List<V30>*)_colDatas[29])->Add(v30);
    ((List<V31>*)_colDatas[30])->Add(v31);
    ((List<V32>*)_colDatas[31])->Add(v32);
    ++_rowCount;
    return *this;
}
template<typename V1, typename V2, typename V3, typename V4, typename V5, typename V6, typename V7, typename V8, typename V9, typename V10, typename V11, typename V12, typename V13, typename V14, typename V15, typename V16, typename V17, typename V18, typename V19, typename V20, typename V21, typename V22, typename V23, typename V24, typename V25, typename V26, typename V27, typename V28, typename V29, typename V30, typename V31, typename V32, typename V33>
DbTable & DbTable::AddRow(V1 const &v1, V2 const &v2, V3 const &v3, V4 const &v4, V5 const &v5, V6 const &v6, V7 const &v7, V8 const &v8, V9 const &v9, V10 const &v10, V11 const &v11, V12 const &v12, V13 const &v13, V14 const &v14, V15 const &v15, V16 const &v16, V17 const &v17, V18 const &v18, V19 const &v19, V20 const &v20, V21 const &v21, V22 const &v22, V23 const &v23, V24 const &v24, V25 const &v25, V26 const &v26, V27 const &v27, V28 const &v28, V29 const &v29, V30 const &v30, V31 const &v31, V32 const &v32, V33 const &v33) {
    assert( _colNames.Length() == 33 );
    assert( _colTypes[0] == DbTypeIDs<V1>::ID() );
    assert( _colTypes[1] == DbTypeIDs<V2>::ID() );
    assert( _colTypes[2] == DbTypeIDs<V3>::ID() );
    assert( _colTypes[3] == DbTypeIDs<V4>::ID() );
    assert( _colTypes[4] == DbTypeIDs<V5>::ID() );
    assert( _colTypes[5] == DbTypeIDs<V6>::ID() );
    assert( _colTypes[6] == DbTypeIDs<V7>::ID() );
    assert( _colTypes[7] == DbTypeIDs<V8>::ID() );
    assert( _colTypes[8] == DbTypeIDs<V9>::ID() );
    assert( _colTypes[9] == DbTypeIDs<V10>::ID() );
    assert( _colTypes[10] == DbTypeIDs<V11>::ID() );
    assert( _colTypes[11] == DbTypeIDs<V12>::ID() );
    assert( _colTypes[12] == DbTypeIDs<V13>::ID() );
    assert( _colTypes[13] == DbTypeIDs<V14>::ID() );
    assert( _colTypes[14] == DbTypeIDs<V15>::ID() );
    assert( _colTypes[15] == DbTypeIDs<V16>::ID() );
    assert( _colTypes[16] == DbTypeIDs<V17>::ID() );
    assert( _colTypes[17] == DbTypeIDs<V18>::ID() );
    assert( _colTypes[18] == DbTypeIDs<V19>::ID() );
    assert( _colTypes[19] == DbTypeIDs<V20>::ID() );
    assert( _colTypes[20] == DbTypeIDs<V21>::ID() );
    assert( _colTypes[21] == DbTypeIDs<V22>::ID() );
    assert( _colTypes[22] == DbTypeIDs<V23>::ID() );
    assert( _colTypes[23] == DbTypeIDs<V24>::ID() );
    assert( _colTypes[24] == DbTypeIDs<V25>::ID() );
    assert( _colTypes[25] == DbTypeIDs<V26>::ID() );
    assert( _colTypes[26] == DbTypeIDs<V27>::ID() );
    assert( _colTypes[27] == DbTypeIDs<V28>::ID() );
    assert( _colTypes[28] == DbTypeIDs<V29>::ID() );
    assert( _colTypes[29] == DbTypeIDs<V30>::ID() );
    assert( _colTypes[30] == DbTypeIDs<V31>::ID() );
    assert( _colTypes[31] == DbTypeIDs<V32>::ID() );
    assert( _colTypes[32] == DbTypeIDs<V33>::ID() );
    ((List<V1>*)_colDatas[0])->Add(v1);
    ((List<V2>*)_colDatas[1])->Add(v2);
    ((List<V3>*)_colDatas[2])->Add(v3);
    ((List<V4>*)_colDatas[3])->Add(v4);
    ((List<V5>*)_colDatas[4])->Add(v5);
    ((List<V6>*)_colDatas[5])->Add(v6);
    ((List<V7>*)_colDatas[6])->Add(v7);
    ((List<V8>*)_colDatas[7])->Add(v8);
    ((List<V9>*)_colDatas[8])->Add(v9);
    ((List<V10>*)_colDatas[9])->Add(v10);
    ((List<V11>*)_colDatas[10])->Add(v11);
    ((List<V12>*)_colDatas[11])->Add(v12);
    ((List<V13>*)_colDatas[12])->Add(v13);
    ((List<V14>*)_colDatas[13])->Add(v14);
    ((List<V15>*)_colDatas[14])->Add(v15);
    ((List<V16>*)_colDatas[15])->Add(v16);
    ((List<V17>*)_colDatas[16])->Add(v17);
    ((List<V18>*)_colDatas[17])->Add(v18);
    ((List<V19>*)_colDatas[18])->Add(v19);
    ((List<V20>*)_colDatas[19])->Add(v20);
    ((List<V21>*)_colDatas[20])->Add(v21);
    ((List<V22>*)_colDatas[21])->Add(v22);
    ((List<V23>*)_colDatas[22])->Add(v23);
    ((List<V24>*)_colDatas[23])->Add(v24);
    ((List<V25>*)_colDatas[24])->Add(v25);
    ((List<V26>*)_colDatas[25])->Add(v26);
    ((List<V27>*)_colDatas[26])->Add(v27);
    ((List<V28>*)_colDatas[27])->Add(v28);
    ((List<V29>*)_colDatas[28])->Add(v29);
    ((List<V30>*)_colDatas[29])->Add(v30);
    ((List<V31>*)_colDatas[30])->Add(v31);
    ((List<V32>*)_colDatas[31])->Add(v32);
    ((List<V33>*)_colDatas[32])->Add(v33);
    ++_rowCount;
    return *this;
}
template<typename V1, typename V2, typename V3, typename V4, typename V5, typename V6, typename V7, typename V8, typename V9, typename V10, typename V11, typename V12, typename V13, typename V14, typename V15, typename V16, typename V17, typename V18, typename V19, typename V20, typename V21, typename V22, typename V23, typename V24, typename V25, typename V26, typename V27, typename V28, typename V29, typename V30, typename V31, typename V32, typename V33, typename V34>
DbTable & DbTable::AddRow(V1 const &v1, V2 const &v2, V3 const &v3, V4 const &v4, V5 const &v5, V6 const &v6, V7 const &v7, V8 const &v8, V9 const &v9, V10 const &v10, V11 const &v11, V12 const &v12, V13 const &v13, V14 const &v14, V15 const &v15, V16 const &v16, V17 const &v17, V18 const &v18, V19 const &v19, V20 const &v20, V21 const &v21, V22 const &v22, V23 const &v23, V24 const &v24, V25 const &v25, V26 const &v26, V27 const &v27, V28 const &v28, V29 const &v29, V30 const &v30, V31 const &v31, V32 const &v32, V33 const &v33, V34 const &v34) {
    assert( _colNames.Length() == 34 );
    assert( _colTypes[0] == DbTypeIDs<V1>::ID() );
    assert( _colTypes[1] == DbTypeIDs<V2>::ID() );
    assert( _colTypes[2] == DbTypeIDs<V3>::ID() );
    assert( _colTypes[3] == DbTypeIDs<V4>::ID() );
    assert( _colTypes[4] == DbTypeIDs<V5>::ID() );
    assert( _colTypes[5] == DbTypeIDs<V6>::ID() );
    assert( _colTypes[6] == DbTypeIDs<V7>::ID() );
    assert( _colTypes[7] == DbTypeIDs<V8>::ID() );
    assert( _colTypes[8] == DbTypeIDs<V9>::ID() );
    assert( _colTypes[9] == DbTypeIDs<V10>::ID() );
    assert( _colTypes[10] == DbTypeIDs<V11>::ID() );
    assert( _colTypes[11] == DbTypeIDs<V12>::ID() );
    assert( _colTypes[12] == DbTypeIDs<V13>::ID() );
    assert( _colTypes[13] == DbTypeIDs<V14>::ID() );
    assert( _colTypes[14] == DbTypeIDs<V15>::ID() );
    assert( _colTypes[15] == DbTypeIDs<V16>::ID() );
    assert( _colTypes[16] == DbTypeIDs<V17>::ID() );
    assert( _colTypes[17] == DbTypeIDs<V18>::ID() );
    assert( _colTypes[18] == DbTypeIDs<V19>::ID() );
    assert( _colTypes[19] == DbTypeIDs<V20>::ID() );
    assert( _colTypes[20] == DbTypeIDs<V21>::ID() );
    assert( _colTypes[21] == DbTypeIDs<V22>::ID() );
    assert( _colTypes[22] == DbTypeIDs<V23>::ID() );
    assert( _colTypes[23] == DbTypeIDs<V24>::ID() );
    assert( _colTypes[24] == DbTypeIDs<V25>::ID() );
    assert( _colTypes[25] == DbTypeIDs<V26>::ID() );
    assert( _colTypes[26] == DbTypeIDs<V27>::ID() );
    assert( _colTypes[27] == DbTypeIDs<V28>::ID() );
    assert( _colTypes[28] == DbTypeIDs<V29>::ID() );
    assert( _colTypes[29] == DbTypeIDs<V30>::ID() );
    assert( _colTypes[30] == DbTypeIDs<V31>::ID() );
    assert( _colTypes[31] == DbTypeIDs<V32>::ID() );
    assert( _colTypes[32] == DbTypeIDs<V33>::ID() );
    assert( _colTypes[33] == DbTypeIDs<V34>::ID() );
    ((List<V1>*)_colDatas[0])->Add(v1);
    ((List<V2>*)_colDatas[1])->Add(v2);
    ((List<V3>*)_colDatas[2])->Add(v3);
    ((List<V4>*)_colDatas[3])->Add(v4);
    ((List<V5>*)_colDatas[4])->Add(v5);
    ((List<V6>*)_colDatas[5])->Add(v6);
    ((List<V7>*)_colDatas[6])->Add(v7);
    ((List<V8>*)_colDatas[7])->Add(v8);
    ((List<V9>*)_colDatas[8])->Add(v9);
    ((List<V10>*)_colDatas[9])->Add(v10);
    ((List<V11>*)_colDatas[10])->Add(v11);
    ((List<V12>*)_colDatas[11])->Add(v12);
    ((List<V13>*)_colDatas[12])->Add(v13);
    ((List<V14>*)_colDatas[13])->Add(v14);
    ((List<V15>*)_colDatas[14])->Add(v15);
    ((List<V16>*)_colDatas[15])->Add(v16);
    ((List<V17>*)_colDatas[16])->Add(v17);
    ((List<V18>*)_colDatas[17])->Add(v18);
    ((List<V19>*)_colDatas[18])->Add(v19);
    ((List<V20>*)_colDatas[19])->Add(v20);
    ((List<V21>*)_colDatas[20])->Add(v21);
    ((List<V22>*)_colDatas[21])->Add(v22);
    ((List<V23>*)_colDatas[22])->Add(v23);
    ((List<V24>*)_colDatas[23])->Add(v24);
    ((List<V25>*)_colDatas[24])->Add(v25);
    ((List<V26>*)_colDatas[25])->Add(v26);
    ((List<V27>*)_colDatas[26])->Add(v27);
    ((List<V28>*)_colDatas[27])->Add(v28);
    ((List<V29>*)_colDatas[28])->Add(v29);
    ((List<V30>*)_colDatas[29])->Add(v30);
    ((List<V31>*)_colDatas[30])->Add(v31);
    ((List<V32>*)_colDatas[31])->Add(v32);
    ((List<V33>*)_colDatas[32])->Add(v33);
    ((List<V34>*)_colDatas[33])->Add(v34);
    ++_rowCount;
    return *this;
}
template<typename V1, typename V2, typename V3, typename V4, typename V5, typename V6, typename V7, typename V8, typename V9, typename V10, typename V11, typename V12, typename V13, typename V14, typename V15, typename V16, typename V17, typename V18, typename V19, typename V20, typename V21, typename V22, typename V23, typename V24, typename V25, typename V26, typename V27, typename V28, typename V29, typename V30, typename V31, typename V32, typename V33, typename V34, typename V35>
DbTable & DbTable::AddRow(V1 const &v1, V2 const &v2, V3 const &v3, V4 const &v4, V5 const &v5, V6 const &v6, V7 const &v7, V8 const &v8, V9 const &v9, V10 const &v10, V11 const &v11, V12 const &v12, V13 const &v13, V14 const &v14, V15 const &v15, V16 const &v16, V17 const &v17, V18 const &v18, V19 const &v19, V20 const &v20, V21 const &v21, V22 const &v22, V23 const &v23, V24 const &v24, V25 const &v25, V26 const &v26, V27 const &v27, V28 const &v28, V29 const &v29, V30 const &v30, V31 const &v31, V32 const &v32, V33 const &v33, V34 const &v34, V35 const &v35) {
    assert( _colNames.Length() == 35 );
    assert( _colTypes[0] == DbTypeIDs<V1>::ID() );
    assert( _colTypes[1] == DbTypeIDs<V2>::ID() );
    assert( _colTypes[2] == DbTypeIDs<V3>::ID() );
    assert( _colTypes[3] == DbTypeIDs<V4>::ID() );
    assert( _colTypes[4] == DbTypeIDs<V5>::ID() );
    assert( _colTypes[5] == DbTypeIDs<V6>::ID() );
    assert( _colTypes[6] == DbTypeIDs<V7>::ID() );
    assert( _colTypes[7] == DbTypeIDs<V8>::ID() );
    assert( _colTypes[8] == DbTypeIDs<V9>::ID() );
    assert( _colTypes[9] == DbTypeIDs<V10>::ID() );
    assert( _colTypes[10] == DbTypeIDs<V11>::ID() );
    assert( _colTypes[11] == DbTypeIDs<V12>::ID() );
    assert( _colTypes[12] == DbTypeIDs<V13>::ID() );
    assert( _colTypes[13] == DbTypeIDs<V14>::ID() );
    assert( _colTypes[14] == DbTypeIDs<V15>::ID() );
    assert( _colTypes[15] == DbTypeIDs<V16>::ID() );
    assert( _colTypes[16] == DbTypeIDs<V17>::ID() );
    assert( _colTypes[17] == DbTypeIDs<V18>::ID() );
    assert( _colTypes[18] == DbTypeIDs<V19>::ID() );
    assert( _colTypes[19] == DbTypeIDs<V20>::ID() );
    assert( _colTypes[20] == DbTypeIDs<V21>::ID() );
    assert( _colTypes[21] == DbTypeIDs<V22>::ID() );
    assert( _colTypes[22] == DbTypeIDs<V23>::ID() );
    assert( _colTypes[23] == DbTypeIDs<V24>::ID() );
    assert( _colTypes[24] == DbTypeIDs<V25>::ID() );
    assert( _colTypes[25] == DbTypeIDs<V26>::ID() );
    assert( _colTypes[26] == DbTypeIDs<V27>::ID() );
    assert( _colTypes[27] == DbTypeIDs<V28>::ID() );
    assert( _colTypes[28] == DbTypeIDs<V29>::ID() );
    assert( _colTypes[29] == DbTypeIDs<V30>::ID() );
    assert( _colTypes[30] == DbTypeIDs<V31>::ID() );
    assert( _colTypes[31] == DbTypeIDs<V32>::ID() );
    assert( _colTypes[32] == DbTypeIDs<V33>::ID() );
    assert( _colTypes[33] == DbTypeIDs<V34>::ID() );
    assert( _colTypes[34] == DbTypeIDs<V35>::ID() );
    ((List<V1>*)_colDatas[0])->Add(v1);
    ((List<V2>*)_colDatas[1])->Add(v2);
    ((List<V3>*)_colDatas[2])->Add(v3);
    ((List<V4>*)_colDatas[3])->Add(v4);
    ((List<V5>*)_colDatas[4])->Add(v5);
    ((List<V6>*)_colDatas[5])->Add(v6);
    ((List<V7>*)_colDatas[6])->Add(v7);
    ((List<V8>*)_colDatas[7])->Add(v8);
    ((List<V9>*)_colDatas[8])->Add(v9);
    ((List<V10>*)_colDatas[9])->Add(v10);
    ((List<V11>*)_colDatas[10])->Add(v11);
    ((List<V12>*)_colDatas[11])->Add(v12);
    ((List<V13>*)_colDatas[12])->Add(v13);
    ((List<V14>*)_colDatas[13])->Add(v14);
    ((List<V15>*)_colDatas[14])->Add(v15);
    ((List<V16>*)_colDatas[15])->Add(v16);
    ((List<V17>*)_colDatas[16])->Add(v17);
    ((List<V18>*)_colDatas[17])->Add(v18);
    ((List<V19>*)_colDatas[18])->Add(v19);
    ((List<V20>*)_colDatas[19])->Add(v20);
    ((List<V21>*)_colDatas[20])->Add(v21);
    ((List<V22>*)_colDatas[21])->Add(v22);
    ((List<V23>*)_colDatas[22])->Add(v23);
    ((List<V24>*)_colDatas[23])->Add(v24);
    ((List<V25>*)_colDatas[24])->Add(v25);
    ((List<V26>*)_colDatas[25])->Add(v26);
    ((List<V27>*)_colDatas[26])->Add(v27);
    ((List<V28>*)_colDatas[27])->Add(v28);
    ((List<V29>*)_colDatas[28])->Add(v29);
    ((List<V30>*)_colDatas[29])->Add(v30);
    ((List<V31>*)_colDatas[30])->Add(v31);
    ((List<V32>*)_colDatas[31])->Add(v32);
    ((List<V33>*)_colDatas[32])->Add(v33);
    ((List<V34>*)_colDatas[33])->Add(v34);
    ((List<V35>*)_colDatas[34])->Add(v35);
    ++_rowCount;
    return *this;
}
template<typename V1, typename V2, typename V3, typename V4, typename V5, typename V6, typename V7, typename V8, typename V9, typename V10, typename V11, typename V12, typename V13, typename V14, typename V15, typename V16, typename V17, typename V18, typename V19, typename V20, typename V21, typename V22, typename V23, typename V24, typename V25, typename V26, typename V27, typename V28, typename V29, typename V30, typename V31, typename V32, typename V33, typename V34, typename V35, typename V36>
DbTable & DbTable::AddRow(V1 const &v1, V2 const &v2, V3 const &v3, V4 const &v4, V5 const &v5, V6 const &v6, V7 const &v7, V8 const &v8, V9 const &v9, V10 const &v10, V11 const &v11, V12 const &v12, V13 const &v13, V14 const &v14, V15 const &v15, V16 const &v16, V17 const &v17, V18 const &v18, V19 const &v19, V20 const &v20, V21 const &v21, V22 const &v22, V23 const &v23, V24 const &v24, V25 const &v25, V26 const &v26, V27 const &v27, V28 const &v28, V29 const &v29, V30 const &v30, V31 const &v31, V32 const &v32, V33 const &v33, V34 const &v34, V35 const &v35, V36 const &v36) {
    assert( _colNames.Length() == 36 );
    assert( _colTypes[0] == DbTypeIDs<V1>::ID() );
    assert( _colTypes[1] == DbTypeIDs<V2>::ID() );
    assert( _colTypes[2] == DbTypeIDs<V3>::ID() );
    assert( _colTypes[3] == DbTypeIDs<V4>::ID() );
    assert( _colTypes[4] == DbTypeIDs<V5>::ID() );
    assert( _colTypes[5] == DbTypeIDs<V6>::ID() );
    assert( _colTypes[6] == DbTypeIDs<V7>::ID() );
    assert( _colTypes[7] == DbTypeIDs<V8>::ID() );
    assert( _colTypes[8] == DbTypeIDs<V9>::ID() );
    assert( _colTypes[9] == DbTypeIDs<V10>::ID() );
    assert( _colTypes[10] == DbTypeIDs<V11>::ID() );
    assert( _colTypes[11] == DbTypeIDs<V12>::ID() );
    assert( _colTypes[12] == DbTypeIDs<V13>::ID() );
    assert( _colTypes[13] == DbTypeIDs<V14>::ID() );
    assert( _colTypes[14] == DbTypeIDs<V15>::ID() );
    assert( _colTypes[15] == DbTypeIDs<V16>::ID() );
    assert( _colTypes[16] == DbTypeIDs<V17>::ID() );
    assert( _colTypes[17] == DbTypeIDs<V18>::ID() );
    assert( _colTypes[18] == DbTypeIDs<V19>::ID() );
    assert( _colTypes[19] == DbTypeIDs<V20>::ID() );
    assert( _colTypes[20] == DbTypeIDs<V21>::ID() );
    assert( _colTypes[21] == DbTypeIDs<V22>::ID() );
    assert( _colTypes[22] == DbTypeIDs<V23>::ID() );
    assert( _colTypes[23] == DbTypeIDs<V24>::ID() );
    assert( _colTypes[24] == DbTypeIDs<V25>::ID() );
    assert( _colTypes[25] == DbTypeIDs<V26>::ID() );
    assert( _colTypes[26] == DbTypeIDs<V27>::ID() );
    assert( _colTypes[27] == DbTypeIDs<V28>::ID() );
    assert( _colTypes[28] == DbTypeIDs<V29>::ID() );
    assert( _colTypes[29] == DbTypeIDs<V30>::ID() );
    assert( _colTypes[30] == DbTypeIDs<V31>::ID() );
    assert( _colTypes[31] == DbTypeIDs<V32>::ID() );
    assert( _colTypes[32] == DbTypeIDs<V33>::ID() );
    assert( _colTypes[33] == DbTypeIDs<V34>::ID() );
    assert( _colTypes[34] == DbTypeIDs<V35>::ID() );
    assert( _colTypes[35] == DbTypeIDs<V36>::ID() );
    ((List<V1>*)_colDatas[0])->Add(v1);
    ((List<V2>*)_colDatas[1])->Add(v2);
    ((List<V3>*)_colDatas[2])->Add(v3);
    ((List<V4>*)_colDatas[3])->Add(v4);
    ((List<V5>*)_colDatas[4])->Add(v5);
    ((List<V6>*)_colDatas[5])->Add(v6);
    ((List<V7>*)_colDatas[6])->Add(v7);
    ((List<V8>*)_colDatas[7])->Add(v8);
    ((List<V9>*)_colDatas[8])->Add(v9);
    ((List<V10>*)_colDatas[9])->Add(v10);
    ((List<V11>*)_colDatas[10])->Add(v11);
    ((List<V12>*)_colDatas[11])->Add(v12);
    ((List<V13>*)_colDatas[12])->Add(v13);
    ((List<V14>*)_colDatas[13])->Add(v14);
    ((List<V15>*)_colDatas[14])->Add(v15);
    ((List<V16>*)_colDatas[15])->Add(v16);
    ((List<V17>*)_colDatas[16])->Add(v17);
    ((List<V18>*)_colDatas[17])->Add(v18);
    ((List<V19>*)_colDatas[18])->Add(v19);
    ((List<V20>*)_colDatas[19])->Add(v20);
    ((List<V21>*)_colDatas[20])->Add(v21);
    ((List<V22>*)_colDatas[21])->Add(v22);
    ((List<V23>*)_colDatas[22])->Add(v23);
    ((List<V24>*)_colDatas[23])->Add(v24);
    ((List<V25>*)_colDatas[24])->Add(v25);
    ((List<V26>*)_colDatas[25])->Add(v26);
    ((List<V27>*)_colDatas[26])->Add(v27);
    ((List<V28>*)_colDatas[27])->Add(v28);
    ((List<V29>*)_colDatas[28])->Add(v29);
    ((List<V30>*)_colDatas[29])->Add(v30);
    ((List<V31>*)_colDatas[30])->Add(v31);
    ((List<V32>*)_colDatas[31])->Add(v32);
    ((List<V33>*)_colDatas[32])->Add(v33);
    ((List<V34>*)_colDatas[33])->Add(v34);
    ((List<V35>*)_colDatas[34])->Add(v35);
    ((List<V36>*)_colDatas[35])->Add(v36);
    ++_rowCount;
    return *this;
}
template<typename V1, typename V2, typename V3, typename V4, typename V5, typename V6, typename V7, typename V8, typename V9, typename V10, typename V11, typename V12, typename V13, typename V14, typename V15, typename V16, typename V17, typename V18, typename V19, typename V20, typename V21, typename V22, typename V23, typename V24, typename V25, typename V26, typename V27, typename V28, typename V29, typename V30, typename V31, typename V32, typename V33, typename V34, typename V35, typename V36, typename V37>
DbTable & DbTable::AddRow(V1 const &v1, V2 const &v2, V3 const &v3, V4 const &v4, V5 const &v5, V6 const &v6, V7 const &v7, V8 const &v8, V9 const &v9, V10 const &v10, V11 const &v11, V12 const &v12, V13 const &v13, V14 const &v14, V15 const &v15, V16 const &v16, V17 const &v17, V18 const &v18, V19 const &v19, V20 const &v20, V21 const &v21, V22 const &v22, V23 const &v23, V24 const &v24, V25 const &v25, V26 const &v26, V27 const &v27, V28 const &v28, V29 const &v29, V30 const &v30, V31 const &v31, V32 const &v32, V33 const &v33, V34 const &v34, V35 const &v35, V36 const &v36, V37 const &v37) {
    assert( _colNames.Length() == 37 );
    assert( _colTypes[0] == DbTypeIDs<V1>::ID() );
    assert( _colTypes[1] == DbTypeIDs<V2>::ID() );
    assert( _colTypes[2] == DbTypeIDs<V3>::ID() );
    assert( _colTypes[3] == DbTypeIDs<V4>::ID() );
    assert( _colTypes[4] == DbTypeIDs<V5>::ID() );
    assert( _colTypes[5] == DbTypeIDs<V6>::ID() );
    assert( _colTypes[6] == DbTypeIDs<V7>::ID() );
    assert( _colTypes[7] == DbTypeIDs<V8>::ID() );
    assert( _colTypes[8] == DbTypeIDs<V9>::ID() );
    assert( _colTypes[9] == DbTypeIDs<V10>::ID() );
    assert( _colTypes[10] == DbTypeIDs<V11>::ID() );
    assert( _colTypes[11] == DbTypeIDs<V12>::ID() );
    assert( _colTypes[12] == DbTypeIDs<V13>::ID() );
    assert( _colTypes[13] == DbTypeIDs<V14>::ID() );
    assert( _colTypes[14] == DbTypeIDs<V15>::ID() );
    assert( _colTypes[15] == DbTypeIDs<V16>::ID() );
    assert( _colTypes[16] == DbTypeIDs<V17>::ID() );
    assert( _colTypes[17] == DbTypeIDs<V18>::ID() );
    assert( _colTypes[18] == DbTypeIDs<V19>::ID() );
    assert( _colTypes[19] == DbTypeIDs<V20>::ID() );
    assert( _colTypes[20] == DbTypeIDs<V21>::ID() );
    assert( _colTypes[21] == DbTypeIDs<V22>::ID() );
    assert( _colTypes[22] == DbTypeIDs<V23>::ID() );
    assert( _colTypes[23] == DbTypeIDs<V24>::ID() );
    assert( _colTypes[24] == DbTypeIDs<V25>::ID() );
    assert( _colTypes[25] == DbTypeIDs<V26>::ID() );
    assert( _colTypes[26] == DbTypeIDs<V27>::ID() );
    assert( _colTypes[27] == DbTypeIDs<V28>::ID() );
    assert( _colTypes[28] == DbTypeIDs<V29>::ID() );
    assert( _colTypes[29] == DbTypeIDs<V30>::ID() );
    assert( _colTypes[30] == DbTypeIDs<V31>::ID() );
    assert( _colTypes[31] == DbTypeIDs<V32>::ID() );
    assert( _colTypes[32] == DbTypeIDs<V33>::ID() );
    assert( _colTypes[33] == DbTypeIDs<V34>::ID() );
    assert( _colTypes[34] == DbTypeIDs<V35>::ID() );
    assert( _colTypes[35] == DbTypeIDs<V36>::ID() );
    assert( _colTypes[36] == DbTypeIDs<V37>::ID() );
    ((List<V1>*)_colDatas[0])->Add(v1);
    ((List<V2>*)_colDatas[1])->Add(v2);
    ((List<V3>*)_colDatas[2])->Add(v3);
    ((List<V4>*)_colDatas[3])->Add(v4);
    ((List<V5>*)_colDatas[4])->Add(v5);
    ((List<V6>*)_colDatas[5])->Add(v6);
    ((List<V7>*)_colDatas[6])->Add(v7);
    ((List<V8>*)_colDatas[7])->Add(v8);
    ((List<V9>*)_colDatas[8])->Add(v9);
    ((List<V10>*)_colDatas[9])->Add(v10);
    ((List<V11>*)_colDatas[10])->Add(v11);
    ((List<V12>*)_colDatas[11])->Add(v12);
    ((List<V13>*)_colDatas[12])->Add(v13);
    ((List<V14>*)_colDatas[13])->Add(v14);
    ((List<V15>*)_colDatas[14])->Add(v15);
    ((List<V16>*)_colDatas[15])->Add(v16);
    ((List<V17>*)_colDatas[16])->Add(v17);
    ((List<V18>*)_colDatas[17])->Add(v18);
    ((List<V19>*)_colDatas[18])->Add(v19);
    ((List<V20>*)_colDatas[19])->Add(v20);
    ((List<V21>*)_colDatas[20])->Add(v21);
    ((List<V22>*)_colDatas[21])->Add(v22);
    ((List<V23>*)_colDatas[22])->Add(v23);
    ((List<V24>*)_colDatas[23])->Add(v24);
    ((List<V25>*)_colDatas[24])->Add(v25);
    ((List<V26>*)_colDatas[25])->Add(v26);
    ((List<V27>*)_colDatas[26])->Add(v27);
    ((List<V28>*)_colDatas[27])->Add(v28);
    ((List<V29>*)_colDatas[28])->Add(v29);
    ((List<V30>*)_colDatas[29])->Add(v30);
    ((List<V31>*)_colDatas[30])->Add(v31);
    ((List<V32>*)_colDatas[31])->Add(v32);
    ((List<V33>*)_colDatas[32])->Add(v33);
    ((List<V34>*)_colDatas[33])->Add(v34);
    ((List<V35>*)_colDatas[34])->Add(v35);
    ((List<V36>*)_colDatas[35])->Add(v36);
    ((List<V37>*)_colDatas[36])->Add(v37);
    ++_rowCount;
    return *this;
}
template<typename V1, typename V2, typename V3, typename V4, typename V5, typename V6, typename V7, typename V8, typename V9, typename V10, typename V11, typename V12, typename V13, typename V14, typename V15, typename V16, typename V17, typename V18, typename V19, typename V20, typename V21, typename V22, typename V23, typename V24, typename V25, typename V26, typename V27, typename V28, typename V29, typename V30, typename V31, typename V32, typename V33, typename V34, typename V35, typename V36, typename V37, typename V38>
DbTable & DbTable::AddRow(V1 const &v1, V2 const &v2, V3 const &v3, V4 const &v4, V5 const &v5, V6 const &v6, V7 const &v7, V8 const &v8, V9 const &v9, V10 const &v10, V11 const &v11, V12 const &v12, V13 const &v13, V14 const &v14, V15 const &v15, V16 const &v16, V17 const &v17, V18 const &v18, V19 const &v19, V20 const &v20, V21 const &v21, V22 const &v22, V23 const &v23, V24 const &v24, V25 const &v25, V26 const &v26, V27 const &v27, V28 const &v28, V29 const &v29, V30 const &v30, V31 const &v31, V32 const &v32, V33 const &v33, V34 const &v34, V35 const &v35, V36 const &v36, V37 const &v37, V38 const &v38) {
    assert( _colNames.Length() == 38 );
    assert( _colTypes[0] == DbTypeIDs<V1>::ID() );
    assert( _colTypes[1] == DbTypeIDs<V2>::ID() );
    assert( _colTypes[2] == DbTypeIDs<V3>::ID() );
    assert( _colTypes[3] == DbTypeIDs<V4>::ID() );
    assert( _colTypes[4] == DbTypeIDs<V5>::ID() );
    assert( _colTypes[5] == DbTypeIDs<V6>::ID() );
    assert( _colTypes[6] == DbTypeIDs<V7>::ID() );
    assert( _colTypes[7] == DbTypeIDs<V8>::ID() );
    assert( _colTypes[8] == DbTypeIDs<V9>::ID() );
    assert( _colTypes[9] == DbTypeIDs<V10>::ID() );
    assert( _colTypes[10] == DbTypeIDs<V11>::ID() );
    assert( _colTypes[11] == DbTypeIDs<V12>::ID() );
    assert( _colTypes[12] == DbTypeIDs<V13>::ID() );
    assert( _colTypes[13] == DbTypeIDs<V14>::ID() );
    assert( _colTypes[14] == DbTypeIDs<V15>::ID() );
    assert( _colTypes[15] == DbTypeIDs<V16>::ID() );
    assert( _colTypes[16] == DbTypeIDs<V17>::ID() );
    assert( _colTypes[17] == DbTypeIDs<V18>::ID() );
    assert( _colTypes[18] == DbTypeIDs<V19>::ID() );
    assert( _colTypes[19] == DbTypeIDs<V20>::ID() );
    assert( _colTypes[20] == DbTypeIDs<V21>::ID() );
    assert( _colTypes[21] == DbTypeIDs<V22>::ID() );
    assert( _colTypes[22] == DbTypeIDs<V23>::ID() );
    assert( _colTypes[23] == DbTypeIDs<V24>::ID() );
    assert( _colTypes[24] == DbTypeIDs<V25>::ID() );
    assert( _colTypes[25] == DbTypeIDs<V26>::ID() );
    assert( _colTypes[26] == DbTypeIDs<V27>::ID() );
    assert( _colTypes[27] == DbTypeIDs<V28>::ID() );
    assert( _colTypes[28] == DbTypeIDs<V29>::ID() );
    assert( _colTypes[29] == DbTypeIDs<V30>::ID() );
    assert( _colTypes[30] == DbTypeIDs<V31>::ID() );
    assert( _colTypes[31] == DbTypeIDs<V32>::ID() );
    assert( _colTypes[32] == DbTypeIDs<V33>::ID() );
    assert( _colTypes[33] == DbTypeIDs<V34>::ID() );
    assert( _colTypes[34] == DbTypeIDs<V35>::ID() );
    assert( _colTypes[35] == DbTypeIDs<V36>::ID() );
    assert( _colTypes[36] == DbTypeIDs<V37>::ID() );
    assert( _colTypes[37] == DbTypeIDs<V38>::ID() );
    ((List<V1>*)_colDatas[0])->Add(v1);
    ((List<V2>*)_colDatas[1])->Add(v2);
    ((List<V3>*)_colDatas[2])->Add(v3);
    ((List<V4>*)_colDatas[3])->Add(v4);
    ((List<V5>*)_colDatas[4])->Add(v5);
    ((List<V6>*)_colDatas[5])->Add(v6);
    ((List<V7>*)_colDatas[6])->Add(v7);
    ((List<V8>*)_colDatas[7])->Add(v8);
    ((List<V9>*)_colDatas[8])->Add(v9);
    ((List<V10>*)_colDatas[9])->Add(v10);
    ((List<V11>*)_colDatas[10])->Add(v11);
    ((List<V12>*)_colDatas[11])->Add(v12);
    ((List<V13>*)_colDatas[12])->Add(v13);
    ((List<V14>*)_colDatas[13])->Add(v14);
    ((List<V15>*)_colDatas[14])->Add(v15);
    ((List<V16>*)_colDatas[15])->Add(v16);
    ((List<V17>*)_colDatas[16])->Add(v17);
    ((List<V18>*)_colDatas[17])->Add(v18);
    ((List<V19>*)_colDatas[18])->Add(v19);
    ((List<V20>*)_colDatas[19])->Add(v20);
    ((List<V21>*)_colDatas[20])->Add(v21);
    ((List<V22>*)_colDatas[21])->Add(v22);
    ((List<V23>*)_colDatas[22])->Add(v23);
    ((List<V24>*)_colDatas[23])->Add(v24);
    ((List<V25>*)_colDatas[24])->Add(v25);
    ((List<V26>*)_colDatas[25])->Add(v26);
    ((List<V27>*)_colDatas[26])->Add(v27);
    ((List<V28>*)_colDatas[27])->Add(v28);
    ((List<V29>*)_colDatas[28])->Add(v29);
    ((List<V30>*)_colDatas[29])->Add(v30);
    ((List<V31>*)_colDatas[30])->Add(v31);
    ((List<V32>*)_colDatas[31])->Add(v32);
    ((List<V33>*)_colDatas[32])->Add(v33);
    ((List<V34>*)_colDatas[33])->Add(v34);
    ((List<V35>*)_colDatas[34])->Add(v35);
    ((List<V36>*)_colDatas[35])->Add(v36);
    ((List<V37>*)_colDatas[36])->Add(v37);
    ((List<V38>*)_colDatas[37])->Add(v38);
    ++_rowCount;
    return *this;
}
template<typename V1, typename V2, typename V3, typename V4, typename V5, typename V6, typename V7, typename V8, typename V9, typename V10, typename V11, typename V12, typename V13, typename V14, typename V15, typename V16, typename V17, typename V18, typename V19, typename V20, typename V21, typename V22, typename V23, typename V24, typename V25, typename V26, typename V27, typename V28, typename V29, typename V30, typename V31, typename V32, typename V33, typename V34, typename V35, typename V36, typename V37, typename V38, typename V39>
DbTable & DbTable::AddRow(V1 const &v1, V2 const &v2, V3 const &v3, V4 const &v4, V5 const &v5, V6 const &v6, V7 const &v7, V8 const &v8, V9 const &v9, V10 const &v10, V11 const &v11, V12 const &v12, V13 const &v13, V14 const &v14, V15 const &v15, V16 const &v16, V17 const &v17, V18 const &v18, V19 const &v19, V20 const &v20, V21 const &v21, V22 const &v22, V23 const &v23, V24 const &v24, V25 const &v25, V26 const &v26, V27 const &v27, V28 const &v28, V29 const &v29, V30 const &v30, V31 const &v31, V32 const &v32, V33 const &v33, V34 const &v34, V35 const &v35, V36 const &v36, V37 const &v37, V38 const &v38, V39 const &v39) {
    assert( _colNames.Length() == 39 );
    assert( _colTypes[0] == DbTypeIDs<V1>::ID() );
    assert( _colTypes[1] == DbTypeIDs<V2>::ID() );
    assert( _colTypes[2] == DbTypeIDs<V3>::ID() );
    assert( _colTypes[3] == DbTypeIDs<V4>::ID() );
    assert( _colTypes[4] == DbTypeIDs<V5>::ID() );
    assert( _colTypes[5] == DbTypeIDs<V6>::ID() );
    assert( _colTypes[6] == DbTypeIDs<V7>::ID() );
    assert( _colTypes[7] == DbTypeIDs<V8>::ID() );
    assert( _colTypes[8] == DbTypeIDs<V9>::ID() );
    assert( _colTypes[9] == DbTypeIDs<V10>::ID() );
    assert( _colTypes[10] == DbTypeIDs<V11>::ID() );
    assert( _colTypes[11] == DbTypeIDs<V12>::ID() );
    assert( _colTypes[12] == DbTypeIDs<V13>::ID() );
    assert( _colTypes[13] == DbTypeIDs<V14>::ID() );
    assert( _colTypes[14] == DbTypeIDs<V15>::ID() );
    assert( _colTypes[15] == DbTypeIDs<V16>::ID() );
    assert( _colTypes[16] == DbTypeIDs<V17>::ID() );
    assert( _colTypes[17] == DbTypeIDs<V18>::ID() );
    assert( _colTypes[18] == DbTypeIDs<V19>::ID() );
    assert( _colTypes[19] == DbTypeIDs<V20>::ID() );
    assert( _colTypes[20] == DbTypeIDs<V21>::ID() );
    assert( _colTypes[21] == DbTypeIDs<V22>::ID() );
    assert( _colTypes[22] == DbTypeIDs<V23>::ID() );
    assert( _colTypes[23] == DbTypeIDs<V24>::ID() );
    assert( _colTypes[24] == DbTypeIDs<V25>::ID() );
    assert( _colTypes[25] == DbTypeIDs<V26>::ID() );
    assert( _colTypes[26] == DbTypeIDs<V27>::ID() );
    assert( _colTypes[27] == DbTypeIDs<V28>::ID() );
    assert( _colTypes[28] == DbTypeIDs<V29>::ID() );
    assert( _colTypes[29] == DbTypeIDs<V30>::ID() );
    assert( _colTypes[30] == DbTypeIDs<V31>::ID() );
    assert( _colTypes[31] == DbTypeIDs<V32>::ID() );
    assert( _colTypes[32] == DbTypeIDs<V33>::ID() );
    assert( _colTypes[33] == DbTypeIDs<V34>::ID() );
    assert( _colTypes[34] == DbTypeIDs<V35>::ID() );
    assert( _colTypes[35] == DbTypeIDs<V36>::ID() );
    assert( _colTypes[36] == DbTypeIDs<V37>::ID() );
    assert( _colTypes[37] == DbTypeIDs<V38>::ID() );
    assert( _colTypes[38] == DbTypeIDs<V39>::ID() );
    ((List<V1>*)_colDatas[0])->Add(v1);
    ((List<V2>*)_colDatas[1])->Add(v2);
    ((List<V3>*)_colDatas[2])->Add(v3);
    ((List<V4>*)_colDatas[3])->Add(v4);
    ((List<V5>*)_colDatas[4])->Add(v5);
    ((List<V6>*)_colDatas[5])->Add(v6);
    ((List<V7>*)_colDatas[6])->Add(v7);
    ((List<V8>*)_colDatas[7])->Add(v8);
    ((List<V9>*)_colDatas[8])->Add(v9);
    ((List<V10>*)_colDatas[9])->Add(v10);
    ((List<V11>*)_colDatas[10])->Add(v11);
    ((List<V12>*)_colDatas[11])->Add(v12);
    ((List<V13>*)_colDatas[12])->Add(v13);
    ((List<V14>*)_colDatas[13])->Add(v14);
    ((List<V15>*)_colDatas[14])->Add(v15);
    ((List<V16>*)_colDatas[15])->Add(v16);
    ((List<V17>*)_colDatas[16])->Add(v17);
    ((List<V18>*)_colDatas[17])->Add(v18);
    ((List<V19>*)_colDatas[18])->Add(v19);
    ((List<V20>*)_colDatas[19])->Add(v20);
    ((List<V21>*)_colDatas[20])->Add(v21);
    ((List<V22>*)_colDatas[21])->Add(v22);
    ((List<V23>*)_colDatas[22])->Add(v23);
    ((List<V24>*)_colDatas[23])->Add(v24);
    ((List<V25>*)_colDatas[24])->Add(v25);
    ((List<V26>*)_colDatas[25])->Add(v26);
    ((List<V27>*)_colDatas[26])->Add(v27);
    ((List<V28>*)_colDatas[27])->Add(v28);
    ((List<V29>*)_colDatas[28])->Add(v29);
    ((List<V30>*)_colDatas[29])->Add(v30);
    ((List<V31>*)_colDatas[30])->Add(v31);
    ((List<V32>*)_colDatas[31])->Add(v32);
    ((List<V33>*)_colDatas[32])->Add(v33);
    ((List<V34>*)_colDatas[33])->Add(v34);
    ((List<V35>*)_colDatas[34])->Add(v35);
    ((List<V36>*)_colDatas[35])->Add(v36);
    ((List<V37>*)_colDatas[36])->Add(v37);
    ((List<V38>*)_colDatas[37])->Add(v38);
    ((List<V39>*)_colDatas[38])->Add(v39);
    ++_rowCount;
    return *this;
}
template<typename V1, typename V2, typename V3, typename V4, typename V5, typename V6, typename V7, typename V8, typename V9, typename V10, typename V11, typename V12, typename V13, typename V14, typename V15, typename V16, typename V17, typename V18, typename V19, typename V20, typename V21, typename V22, typename V23, typename V24, typename V25, typename V26, typename V27, typename V28, typename V29, typename V30, typename V31, typename V32, typename V33, typename V34, typename V35, typename V36, typename V37, typename V38, typename V39, typename V40>
DbTable & DbTable::AddRow(V1 const &v1, V2 const &v2, V3 const &v3, V4 const &v4, V5 const &v5, V6 const &v6, V7 const &v7, V8 const &v8, V9 const &v9, V10 const &v10, V11 const &v11, V12 const &v12, V13 const &v13, V14 const &v14, V15 const &v15, V16 const &v16, V17 const &v17, V18 const &v18, V19 const &v19, V20 const &v20, V21 const &v21, V22 const &v22, V23 const &v23, V24 const &v24, V25 const &v25, V26 const &v26, V27 const &v27, V28 const &v28, V29 const &v29, V30 const &v30, V31 const &v31, V32 const &v32, V33 const &v33, V34 const &v34, V35 const &v35, V36 const &v36, V37 const &v37, V38 const &v38, V39 const &v39, V40 const &v40) {
    assert( _colNames.Length() == 40 );
    assert( _colTypes[0] == DbTypeIDs<V1>::ID() );
    assert( _colTypes[1] == DbTypeIDs<V2>::ID() );
    assert( _colTypes[2] == DbTypeIDs<V3>::ID() );
    assert( _colTypes[3] == DbTypeIDs<V4>::ID() );
    assert( _colTypes[4] == DbTypeIDs<V5>::ID() );
    assert( _colTypes[5] == DbTypeIDs<V6>::ID() );
    assert( _colTypes[6] == DbTypeIDs<V7>::ID() );
    assert( _colTypes[7] == DbTypeIDs<V8>::ID() );
    assert( _colTypes[8] == DbTypeIDs<V9>::ID() );
    assert( _colTypes[9] == DbTypeIDs<V10>::ID() );
    assert( _colTypes[10] == DbTypeIDs<V11>::ID() );
    assert( _colTypes[11] == DbTypeIDs<V12>::ID() );
    assert( _colTypes[12] == DbTypeIDs<V13>::ID() );
    assert( _colTypes[13] == DbTypeIDs<V14>::ID() );
    assert( _colTypes[14] == DbTypeIDs<V15>::ID() );
    assert( _colTypes[15] == DbTypeIDs<V16>::ID() );
    assert( _colTypes[16] == DbTypeIDs<V17>::ID() );
    assert( _colTypes[17] == DbTypeIDs<V18>::ID() );
    assert( _colTypes[18] == DbTypeIDs<V19>::ID() );
    assert( _colTypes[19] == DbTypeIDs<V20>::ID() );
    assert( _colTypes[20] == DbTypeIDs<V21>::ID() );
    assert( _colTypes[21] == DbTypeIDs<V22>::ID() );
    assert( _colTypes[22] == DbTypeIDs<V23>::ID() );
    assert( _colTypes[23] == DbTypeIDs<V24>::ID() );
    assert( _colTypes[24] == DbTypeIDs<V25>::ID() );
    assert( _colTypes[25] == DbTypeIDs<V26>::ID() );
    assert( _colTypes[26] == DbTypeIDs<V27>::ID() );
    assert( _colTypes[27] == DbTypeIDs<V28>::ID() );
    assert( _colTypes[28] == DbTypeIDs<V29>::ID() );
    assert( _colTypes[29] == DbTypeIDs<V30>::ID() );
    assert( _colTypes[30] == DbTypeIDs<V31>::ID() );
    assert( _colTypes[31] == DbTypeIDs<V32>::ID() );
    assert( _colTypes[32] == DbTypeIDs<V33>::ID() );
    assert( _colTypes[33] == DbTypeIDs<V34>::ID() );
    assert( _colTypes[34] == DbTypeIDs<V35>::ID() );
    assert( _colTypes[35] == DbTypeIDs<V36>::ID() );
    assert( _colTypes[36] == DbTypeIDs<V37>::ID() );
    assert( _colTypes[37] == DbTypeIDs<V38>::ID() );
    assert( _colTypes[38] == DbTypeIDs<V39>::ID() );
    assert( _colTypes[39] == DbTypeIDs<V40>::ID() );
    ((List<V1>*)_colDatas[0])->Add(v1);
    ((List<V2>*)_colDatas[1])->Add(v2);
    ((List<V3>*)_colDatas[2])->Add(v3);
    ((List<V4>*)_colDatas[3])->Add(v4);
    ((List<V5>*)_colDatas[4])->Add(v5);
    ((List<V6>*)_colDatas[5])->Add(v6);
    ((List<V7>*)_colDatas[6])->Add(v7);
    ((List<V8>*)_colDatas[7])->Add(v8);
    ((List<V9>*)_colDatas[8])->Add(v9);
    ((List<V10>*)_colDatas[9])->Add(v10);
    ((List<V11>*)_colDatas[10])->Add(v11);
    ((List<V12>*)_colDatas[11])->Add(v12);
    ((List<V13>*)_colDatas[12])->Add(v13);
    ((List<V14>*)_colDatas[13])->Add(v14);
    ((List<V15>*)_colDatas[14])->Add(v15);
    ((List<V16>*)_colDatas[15])->Add(v16);
    ((List<V17>*)_colDatas[16])->Add(v17);
    ((List<V18>*)_colDatas[17])->Add(v18);
    ((List<V19>*)_colDatas[18])->Add(v19);
    ((List<V20>*)_colDatas[19])->Add(v20);
    ((List<V21>*)_colDatas[20])->Add(v21);
    ((List<V22>*)_colDatas[21])->Add(v22);
    ((List<V23>*)_colDatas[22])->Add(v23);
    ((List<V24>*)_colDatas[23])->Add(v24);
    ((List<V25>*)_colDatas[24])->Add(v25);
    ((List<V26>*)_colDatas[25])->Add(v26);
    ((List<V27>*)_colDatas[26])->Add(v27);
    ((List<V28>*)_colDatas[27])->Add(v28);
    ((List<V29>*)_colDatas[28])->Add(v29);
    ((List<V30>*)_colDatas[29])->Add(v30);
    ((List<V31>*)_colDatas[30])->Add(v31);
    ((List<V32>*)_colDatas[31])->Add(v32);
    ((List<V33>*)_colDatas[32])->Add(v33);
    ((List<V34>*)_colDatas[33])->Add(v34);
    ((List<V35>*)_colDatas[34])->Add(v35);
    ((List<V36>*)_colDatas[35])->Add(v36);
    ((List<V37>*)_colDatas[36])->Add(v37);
    ((List<V38>*)_colDatas[37])->Add(v38);
    ((List<V39>*)_colDatas[38])->Add(v39);
    ((List<V40>*)_colDatas[39])->Add(v40);
    ++_rowCount;
    return *this;
}
template<typename V1, typename V2, typename V3, typename V4, typename V5, typename V6, typename V7, typename V8, typename V9, typename V10, typename V11, typename V12, typename V13, typename V14, typename V15, typename V16, typename V17, typename V18, typename V19, typename V20, typename V21, typename V22, typename V23, typename V24, typename V25, typename V26, typename V27, typename V28, typename V29, typename V30, typename V31, typename V32, typename V33, typename V34, typename V35, typename V36, typename V37, typename V38, typename V39, typename V40, typename V41>
DbTable & DbTable::AddRow(V1 const &v1, V2 const &v2, V3 const &v3, V4 const &v4, V5 const &v5, V6 const &v6, V7 const &v7, V8 const &v8, V9 const &v9, V10 const &v10, V11 const &v11, V12 const &v12, V13 const &v13, V14 const &v14, V15 const &v15, V16 const &v16, V17 const &v17, V18 const &v18, V19 const &v19, V20 const &v20, V21 const &v21, V22 const &v22, V23 const &v23, V24 const &v24, V25 const &v25, V26 const &v26, V27 const &v27, V28 const &v28, V29 const &v29, V30 const &v30, V31 const &v31, V32 const &v32, V33 const &v33, V34 const &v34, V35 const &v35, V36 const &v36, V37 const &v37, V38 const &v38, V39 const &v39, V40 const &v40, V41 const &v41) {
    assert( _colNames.Length() == 41 );
    assert( _colTypes[0] == DbTypeIDs<V1>::ID() );
    assert( _colTypes[1] == DbTypeIDs<V2>::ID() );
    assert( _colTypes[2] == DbTypeIDs<V3>::ID() );
    assert( _colTypes[3] == DbTypeIDs<V4>::ID() );
    assert( _colTypes[4] == DbTypeIDs<V5>::ID() );
    assert( _colTypes[5] == DbTypeIDs<V6>::ID() );
    assert( _colTypes[6] == DbTypeIDs<V7>::ID() );
    assert( _colTypes[7] == DbTypeIDs<V8>::ID() );
    assert( _colTypes[8] == DbTypeIDs<V9>::ID() );
    assert( _colTypes[9] == DbTypeIDs<V10>::ID() );
    assert( _colTypes[10] == DbTypeIDs<V11>::ID() );
    assert( _colTypes[11] == DbTypeIDs<V12>::ID() );
    assert( _colTypes[12] == DbTypeIDs<V13>::ID() );
    assert( _colTypes[13] == DbTypeIDs<V14>::ID() );
    assert( _colTypes[14] == DbTypeIDs<V15>::ID() );
    assert( _colTypes[15] == DbTypeIDs<V16>::ID() );
    assert( _colTypes[16] == DbTypeIDs<V17>::ID() );
    assert( _colTypes[17] == DbTypeIDs<V18>::ID() );
    assert( _colTypes[18] == DbTypeIDs<V19>::ID() );
    assert( _colTypes[19] == DbTypeIDs<V20>::ID() );
    assert( _colTypes[20] == DbTypeIDs<V21>::ID() );
    assert( _colTypes[21] == DbTypeIDs<V22>::ID() );
    assert( _colTypes[22] == DbTypeIDs<V23>::ID() );
    assert( _colTypes[23] == DbTypeIDs<V24>::ID() );
    assert( _colTypes[24] == DbTypeIDs<V25>::ID() );
    assert( _colTypes[25] == DbTypeIDs<V26>::ID() );
    assert( _colTypes[26] == DbTypeIDs<V27>::ID() );
    assert( _colTypes[27] == DbTypeIDs<V28>::ID() );
    assert( _colTypes[28] == DbTypeIDs<V29>::ID() );
    assert( _colTypes[29] == DbTypeIDs<V30>::ID() );
    assert( _colTypes[30] == DbTypeIDs<V31>::ID() );
    assert( _colTypes[31] == DbTypeIDs<V32>::ID() );
    assert( _colTypes[32] == DbTypeIDs<V33>::ID() );
    assert( _colTypes[33] == DbTypeIDs<V34>::ID() );
    assert( _colTypes[34] == DbTypeIDs<V35>::ID() );
    assert( _colTypes[35] == DbTypeIDs<V36>::ID() );
    assert( _colTypes[36] == DbTypeIDs<V37>::ID() );
    assert( _colTypes[37] == DbTypeIDs<V38>::ID() );
    assert( _colTypes[38] == DbTypeIDs<V39>::ID() );
    assert( _colTypes[39] == DbTypeIDs<V40>::ID() );
    assert( _colTypes[40] == DbTypeIDs<V41>::ID() );
    ((List<V1>*)_colDatas[0])->Add(v1);
    ((List<V2>*)_colDatas[1])->Add(v2);
    ((List<V3>*)_colDatas[2])->Add(v3);
    ((List<V4>*)_colDatas[3])->Add(v4);
    ((List<V5>*)_colDatas[4])->Add(v5);
    ((List<V6>*)_colDatas[5])->Add(v6);
    ((List<V7>*)_colDatas[6])->Add(v7);
    ((List<V8>*)_colDatas[7])->Add(v8);
    ((List<V9>*)_colDatas[8])->Add(v9);
    ((List<V10>*)_colDatas[9])->Add(v10);
    ((List<V11>*)_colDatas[10])->Add(v11);
    ((List<V12>*)_colDatas[11])->Add(v12);
    ((List<V13>*)_colDatas[12])->Add(v13);
    ((List<V14>*)_colDatas[13])->Add(v14);
    ((List<V15>*)_colDatas[14])->Add(v15);
    ((List<V16>*)_colDatas[15])->Add(v16);
    ((List<V17>*)_colDatas[16])->Add(v17);
    ((List<V18>*)_colDatas[17])->Add(v18);
    ((List<V19>*)_colDatas[18])->Add(v19);
    ((List<V20>*)_colDatas[19])->Add(v20);
    ((List<V21>*)_colDatas[20])->Add(v21);
    ((List<V22>*)_colDatas[21])->Add(v22);
    ((List<V23>*)_colDatas[22])->Add(v23);
    ((List<V24>*)_colDatas[23])->Add(v24);
    ((List<V25>*)_colDatas[24])->Add(v25);
    ((List<V26>*)_colDatas[25])->Add(v26);
    ((List<V27>*)_colDatas[26])->Add(v27);
    ((List<V28>*)_colDatas[27])->Add(v28);
    ((List<V29>*)_colDatas[28])->Add(v29);
    ((List<V30>*)_colDatas[29])->Add(v30);
    ((List<V31>*)_colDatas[30])->Add(v31);
    ((List<V32>*)_colDatas[31])->Add(v32);
    ((List<V33>*)_colDatas[32])->Add(v33);
    ((List<V34>*)_colDatas[33])->Add(v34);
    ((List<V35>*)_colDatas[34])->Add(v35);
    ((List<V36>*)_colDatas[35])->Add(v36);
    ((List<V37>*)_colDatas[36])->Add(v37);
    ((List<V38>*)_colDatas[37])->Add(v38);
    ((List<V39>*)_colDatas[38])->Add(v39);
    ((List<V40>*)_colDatas[39])->Add(v40);
    ((List<V41>*)_colDatas[40])->Add(v41);
    ++_rowCount;
    return *this;
}
template<typename V1, typename V2, typename V3, typename V4, typename V5, typename V6, typename V7, typename V8, typename V9, typename V10, typename V11, typename V12, typename V13, typename V14, typename V15, typename V16, typename V17, typename V18, typename V19, typename V20, typename V21, typename V22, typename V23, typename V24, typename V25, typename V26, typename V27, typename V28, typename V29, typename V30, typename V31, typename V32, typename V33, typename V34, typename V35, typename V36, typename V37, typename V38, typename V39, typename V40, typename V41, typename V42>
DbTable & DbTable::AddRow(V1 const &v1, V2 const &v2, V3 const &v3, V4 const &v4, V5 const &v5, V6 const &v6, V7 const &v7, V8 const &v8, V9 const &v9, V10 const &v10, V11 const &v11, V12 const &v12, V13 const &v13, V14 const &v14, V15 const &v15, V16 const &v16, V17 const &v17, V18 const &v18, V19 const &v19, V20 const &v20, V21 const &v21, V22 const &v22, V23 const &v23, V24 const &v24, V25 const &v25, V26 const &v26, V27 const &v27, V28 const &v28, V29 const &v29, V30 const &v30, V31 const &v31, V32 const &v32, V33 const &v33, V34 const &v34, V35 const &v35, V36 const &v36, V37 const &v37, V38 const &v38, V39 const &v39, V40 const &v40, V41 const &v41, V42 const &v42) {
    assert( _colNames.Length() == 42 );
    assert( _colTypes[0] == DbTypeIDs<V1>::ID() );
    assert( _colTypes[1] == DbTypeIDs<V2>::ID() );
    assert( _colTypes[2] == DbTypeIDs<V3>::ID() );
    assert( _colTypes[3] == DbTypeIDs<V4>::ID() );
    assert( _colTypes[4] == DbTypeIDs<V5>::ID() );
    assert( _colTypes[5] == DbTypeIDs<V6>::ID() );
    assert( _colTypes[6] == DbTypeIDs<V7>::ID() );
    assert( _colTypes[7] == DbTypeIDs<V8>::ID() );
    assert( _colTypes[8] == DbTypeIDs<V9>::ID() );
    assert( _colTypes[9] == DbTypeIDs<V10>::ID() );
    assert( _colTypes[10] == DbTypeIDs<V11>::ID() );
    assert( _colTypes[11] == DbTypeIDs<V12>::ID() );
    assert( _colTypes[12] == DbTypeIDs<V13>::ID() );
    assert( _colTypes[13] == DbTypeIDs<V14>::ID() );
    assert( _colTypes[14] == DbTypeIDs<V15>::ID() );
    assert( _colTypes[15] == DbTypeIDs<V16>::ID() );
    assert( _colTypes[16] == DbTypeIDs<V17>::ID() );
    assert( _colTypes[17] == DbTypeIDs<V18>::ID() );
    assert( _colTypes[18] == DbTypeIDs<V19>::ID() );
    assert( _colTypes[19] == DbTypeIDs<V20>::ID() );
    assert( _colTypes[20] == DbTypeIDs<V21>::ID() );
    assert( _colTypes[21] == DbTypeIDs<V22>::ID() );
    assert( _colTypes[22] == DbTypeIDs<V23>::ID() );
    assert( _colTypes[23] == DbTypeIDs<V24>::ID() );
    assert( _colTypes[24] == DbTypeIDs<V25>::ID() );
    assert( _colTypes[25] == DbTypeIDs<V26>::ID() );
    assert( _colTypes[26] == DbTypeIDs<V27>::ID() );
    assert( _colTypes[27] == DbTypeIDs<V28>::ID() );
    assert( _colTypes[28] == DbTypeIDs<V29>::ID() );
    assert( _colTypes[29] == DbTypeIDs<V30>::ID() );
    assert( _colTypes[30] == DbTypeIDs<V31>::ID() );
    assert( _colTypes[31] == DbTypeIDs<V32>::ID() );
    assert( _colTypes[32] == DbTypeIDs<V33>::ID() );
    assert( _colTypes[33] == DbTypeIDs<V34>::ID() );
    assert( _colTypes[34] == DbTypeIDs<V35>::ID() );
    assert( _colTypes[35] == DbTypeIDs<V36>::ID() );
    assert( _colTypes[36] == DbTypeIDs<V37>::ID() );
    assert( _colTypes[37] == DbTypeIDs<V38>::ID() );
    assert( _colTypes[38] == DbTypeIDs<V39>::ID() );
    assert( _colTypes[39] == DbTypeIDs<V40>::ID() );
    assert( _colTypes[40] == DbTypeIDs<V41>::ID() );
    assert( _colTypes[41] == DbTypeIDs<V42>::ID() );
    ((List<V1>*)_colDatas[0])->Add(v1);
    ((List<V2>*)_colDatas[1])->Add(v2);
    ((List<V3>*)_colDatas[2])->Add(v3);
    ((List<V4>*)_colDatas[3])->Add(v4);
    ((List<V5>*)_colDatas[4])->Add(v5);
    ((List<V6>*)_colDatas[5])->Add(v6);
    ((List<V7>*)_colDatas[6])->Add(v7);
    ((List<V8>*)_colDatas[7])->Add(v8);
    ((List<V9>*)_colDatas[8])->Add(v9);
    ((List<V10>*)_colDatas[9])->Add(v10);
    ((List<V11>*)_colDatas[10])->Add(v11);
    ((List<V12>*)_colDatas[11])->Add(v12);
    ((List<V13>*)_colDatas[12])->Add(v13);
    ((List<V14>*)_colDatas[13])->Add(v14);
    ((List<V15>*)_colDatas[14])->Add(v15);
    ((List<V16>*)_colDatas[15])->Add(v16);
    ((List<V17>*)_colDatas[16])->Add(v17);
    ((List<V18>*)_colDatas[17])->Add(v18);
    ((List<V19>*)_colDatas[18])->Add(v19);
    ((List<V20>*)_colDatas[19])->Add(v20);
    ((List<V21>*)_colDatas[20])->Add(v21);
    ((List<V22>*)_colDatas[21])->Add(v22);
    ((List<V23>*)_colDatas[22])->Add(v23);
    ((List<V24>*)_colDatas[23])->Add(v24);
    ((List<V25>*)_colDatas[24])->Add(v25);
    ((List<V26>*)_colDatas[25])->Add(v26);
    ((List<V27>*)_colDatas[26])->Add(v27);
    ((List<V28>*)_colDatas[27])->Add(v28);
    ((List<V29>*)_colDatas[28])->Add(v29);
    ((List<V30>*)_colDatas[29])->Add(v30);
    ((List<V31>*)_colDatas[30])->Add(v31);
    ((List<V32>*)_colDatas[31])->Add(v32);
    ((List<V33>*)_colDatas[32])->Add(v33);
    ((List<V34>*)_colDatas[33])->Add(v34);
    ((List<V35>*)_colDatas[34])->Add(v35);
    ((List<V36>*)_colDatas[35])->Add(v36);
    ((List<V37>*)_colDatas[36])->Add(v37);
    ((List<V38>*)_colDatas[37])->Add(v38);
    ((List<V39>*)_colDatas[38])->Add(v39);
    ((List<V40>*)_colDatas[39])->Add(v40);
    ((List<V41>*)_colDatas[40])->Add(v41);
    ((List<V42>*)_colDatas[41])->Add(v42);
    ++_rowCount;
    return *this;
}
template<typename V1, typename V2, typename V3, typename V4, typename V5, typename V6, typename V7, typename V8, typename V9, typename V10, typename V11, typename V12, typename V13, typename V14, typename V15, typename V16, typename V17, typename V18, typename V19, typename V20, typename V21, typename V22, typename V23, typename V24, typename V25, typename V26, typename V27, typename V28, typename V29, typename V30, typename V31, typename V32, typename V33, typename V34, typename V35, typename V36, typename V37, typename V38, typename V39, typename V40, typename V41, typename V42, typename V43>
DbTable & DbTable::AddRow(V1 const &v1, V2 const &v2, V3 const &v3, V4 const &v4, V5 const &v5, V6 const &v6, V7 const &v7, V8 const &v8, V9 const &v9, V10 const &v10, V11 const &v11, V12 const &v12, V13 const &v13, V14 const &v14, V15 const &v15, V16 const &v16, V17 const &v17, V18 const &v18, V19 const &v19, V20 const &v20, V21 const &v21, V22 const &v22, V23 const &v23, V24 const &v24, V25 const &v25, V26 const &v26, V27 const &v27, V28 const &v28, V29 const &v29, V30 const &v30, V31 const &v31, V32 const &v32, V33 const &v33, V34 const &v34, V35 const &v35, V36 const &v36, V37 const &v37, V38 const &v38, V39 const &v39, V40 const &v40, V41 const &v41, V42 const &v42, V43 const &v43) {
    assert( _colNames.Length() == 43 );
    assert( _colTypes[0] == DbTypeIDs<V1>::ID() );
    assert( _colTypes[1] == DbTypeIDs<V2>::ID() );
    assert( _colTypes[2] == DbTypeIDs<V3>::ID() );
    assert( _colTypes[3] == DbTypeIDs<V4>::ID() );
    assert( _colTypes[4] == DbTypeIDs<V5>::ID() );
    assert( _colTypes[5] == DbTypeIDs<V6>::ID() );
    assert( _colTypes[6] == DbTypeIDs<V7>::ID() );
    assert( _colTypes[7] == DbTypeIDs<V8>::ID() );
    assert( _colTypes[8] == DbTypeIDs<V9>::ID() );
    assert( _colTypes[9] == DbTypeIDs<V10>::ID() );
    assert( _colTypes[10] == DbTypeIDs<V11>::ID() );
    assert( _colTypes[11] == DbTypeIDs<V12>::ID() );
    assert( _colTypes[12] == DbTypeIDs<V13>::ID() );
    assert( _colTypes[13] == DbTypeIDs<V14>::ID() );
    assert( _colTypes[14] == DbTypeIDs<V15>::ID() );
    assert( _colTypes[15] == DbTypeIDs<V16>::ID() );
    assert( _colTypes[16] == DbTypeIDs<V17>::ID() );
    assert( _colTypes[17] == DbTypeIDs<V18>::ID() );
    assert( _colTypes[18] == DbTypeIDs<V19>::ID() );
    assert( _colTypes[19] == DbTypeIDs<V20>::ID() );
    assert( _colTypes[20] == DbTypeIDs<V21>::ID() );
    assert( _colTypes[21] == DbTypeIDs<V22>::ID() );
    assert( _colTypes[22] == DbTypeIDs<V23>::ID() );
    assert( _colTypes[23] == DbTypeIDs<V24>::ID() );
    assert( _colTypes[24] == DbTypeIDs<V25>::ID() );
    assert( _colTypes[25] == DbTypeIDs<V26>::ID() );
    assert( _colTypes[26] == DbTypeIDs<V27>::ID() );
    assert( _colTypes[27] == DbTypeIDs<V28>::ID() );
    assert( _colTypes[28] == DbTypeIDs<V29>::ID() );
    assert( _colTypes[29] == DbTypeIDs<V30>::ID() );
    assert( _colTypes[30] == DbTypeIDs<V31>::ID() );
    assert( _colTypes[31] == DbTypeIDs<V32>::ID() );
    assert( _colTypes[32] == DbTypeIDs<V33>::ID() );
    assert( _colTypes[33] == DbTypeIDs<V34>::ID() );
    assert( _colTypes[34] == DbTypeIDs<V35>::ID() );
    assert( _colTypes[35] == DbTypeIDs<V36>::ID() );
    assert( _colTypes[36] == DbTypeIDs<V37>::ID() );
    assert( _colTypes[37] == DbTypeIDs<V38>::ID() );
    assert( _colTypes[38] == DbTypeIDs<V39>::ID() );
    assert( _colTypes[39] == DbTypeIDs<V40>::ID() );
    assert( _colTypes[40] == DbTypeIDs<V41>::ID() );
    assert( _colTypes[41] == DbTypeIDs<V42>::ID() );
    assert( _colTypes[42] == DbTypeIDs<V43>::ID() );
    ((List<V1>*)_colDatas[0])->Add(v1);
    ((List<V2>*)_colDatas[1])->Add(v2);
    ((List<V3>*)_colDatas[2])->Add(v3);
    ((List<V4>*)_colDatas[3])->Add(v4);
    ((List<V5>*)_colDatas[4])->Add(v5);
    ((List<V6>*)_colDatas[5])->Add(v6);
    ((List<V7>*)_colDatas[6])->Add(v7);
    ((List<V8>*)_colDatas[7])->Add(v8);
    ((List<V9>*)_colDatas[8])->Add(v9);
    ((List<V10>*)_colDatas[9])->Add(v10);
    ((List<V11>*)_colDatas[10])->Add(v11);
    ((List<V12>*)_colDatas[11])->Add(v12);
    ((List<V13>*)_colDatas[12])->Add(v13);
    ((List<V14>*)_colDatas[13])->Add(v14);
    ((List<V15>*)_colDatas[14])->Add(v15);
    ((List<V16>*)_colDatas[15])->Add(v16);
    ((List<V17>*)_colDatas[16])->Add(v17);
    ((List<V18>*)_colDatas[17])->Add(v18);
    ((List<V19>*)_colDatas[18])->Add(v19);
    ((List<V20>*)_colDatas[19])->Add(v20);
    ((List<V21>*)_colDatas[20])->Add(v21);
    ((List<V22>*)_colDatas[21])->Add(v22);
    ((List<V23>*)_colDatas[22])->Add(v23);
    ((List<V24>*)_colDatas[23])->Add(v24);
    ((List<V25>*)_colDatas[24])->Add(v25);
    ((List<V26>*)_colDatas[25])->Add(v26);
    ((List<V27>*)_colDatas[26])->Add(v27);
    ((List<V28>*)_colDatas[27])->Add(v28);
    ((List<V29>*)_colDatas[28])->Add(v29);
    ((List<V30>*)_colDatas[29])->Add(v30);
    ((List<V31>*)_colDatas[30])->Add(v31);
    ((List<V32>*)_colDatas[31])->Add(v32);
    ((List<V33>*)_colDatas[32])->Add(v33);
    ((List<V34>*)_colDatas[33])->Add(v34);
    ((List<V35>*)_colDatas[34])->Add(v35);
    ((List<V36>*)_colDatas[35])->Add(v36);
    ((List<V37>*)_colDatas[36])->Add(v37);
    ((List<V38>*)_colDatas[37])->Add(v38);
    ((List<V39>*)_colDatas[38])->Add(v39);
    ((List<V40>*)_colDatas[39])->Add(v40);
    ((List<V41>*)_colDatas[40])->Add(v41);
    ((List<V42>*)_colDatas[41])->Add(v42);
    ((List<V43>*)_colDatas[42])->Add(v43);
    ++_rowCount;
    return *this;
}
template<typename V1, typename V2, typename V3, typename V4, typename V5, typename V6, typename V7, typename V8, typename V9, typename V10, typename V11, typename V12, typename V13, typename V14, typename V15, typename V16, typename V17, typename V18, typename V19, typename V20, typename V21, typename V22, typename V23, typename V24, typename V25, typename V26, typename V27, typename V28, typename V29, typename V30, typename V31, typename V32, typename V33, typename V34, typename V35, typename V36, typename V37, typename V38, typename V39, typename V40, typename V41, typename V42, typename V43, typename V44>
DbTable & DbTable::AddRow(V1 const &v1, V2 const &v2, V3 const &v3, V4 const &v4, V5 const &v5, V6 const &v6, V7 const &v7, V8 const &v8, V9 const &v9, V10 const &v10, V11 const &v11, V12 const &v12, V13 const &v13, V14 const &v14, V15 const &v15, V16 const &v16, V17 const &v17, V18 const &v18, V19 const &v19, V20 const &v20, V21 const &v21, V22 const &v22, V23 const &v23, V24 const &v24, V25 const &v25, V26 const &v26, V27 const &v27, V28 const &v28, V29 const &v29, V30 const &v30, V31 const &v31, V32 const &v32, V33 const &v33, V34 const &v34, V35 const &v35, V36 const &v36, V37 const &v37, V38 const &v38, V39 const &v39, V40 const &v40, V41 const &v41, V42 const &v42, V43 const &v43, V44 const &v44) {
    assert( _colNames.Length() == 44 );
    assert( _colTypes[0] == DbTypeIDs<V1>::ID() );
    assert( _colTypes[1] == DbTypeIDs<V2>::ID() );
    assert( _colTypes[2] == DbTypeIDs<V3>::ID() );
    assert( _colTypes[3] == DbTypeIDs<V4>::ID() );
    assert( _colTypes[4] == DbTypeIDs<V5>::ID() );
    assert( _colTypes[5] == DbTypeIDs<V6>::ID() );
    assert( _colTypes[6] == DbTypeIDs<V7>::ID() );
    assert( _colTypes[7] == DbTypeIDs<V8>::ID() );
    assert( _colTypes[8] == DbTypeIDs<V9>::ID() );
    assert( _colTypes[9] == DbTypeIDs<V10>::ID() );
    assert( _colTypes[10] == DbTypeIDs<V11>::ID() );
    assert( _colTypes[11] == DbTypeIDs<V12>::ID() );
    assert( _colTypes[12] == DbTypeIDs<V13>::ID() );
    assert( _colTypes[13] == DbTypeIDs<V14>::ID() );
    assert( _colTypes[14] == DbTypeIDs<V15>::ID() );
    assert( _colTypes[15] == DbTypeIDs<V16>::ID() );
    assert( _colTypes[16] == DbTypeIDs<V17>::ID() );
    assert( _colTypes[17] == DbTypeIDs<V18>::ID() );
    assert( _colTypes[18] == DbTypeIDs<V19>::ID() );
    assert( _colTypes[19] == DbTypeIDs<V20>::ID() );
    assert( _colTypes[20] == DbTypeIDs<V21>::ID() );
    assert( _colTypes[21] == DbTypeIDs<V22>::ID() );
    assert( _colTypes[22] == DbTypeIDs<V23>::ID() );
    assert( _colTypes[23] == DbTypeIDs<V24>::ID() );
    assert( _colTypes[24] == DbTypeIDs<V25>::ID() );
    assert( _colTypes[25] == DbTypeIDs<V26>::ID() );
    assert( _colTypes[26] == DbTypeIDs<V27>::ID() );
    assert( _colTypes[27] == DbTypeIDs<V28>::ID() );
    assert( _colTypes[28] == DbTypeIDs<V29>::ID() );
    assert( _colTypes[29] == DbTypeIDs<V30>::ID() );
    assert( _colTypes[30] == DbTypeIDs<V31>::ID() );
    assert( _colTypes[31] == DbTypeIDs<V32>::ID() );
    assert( _colTypes[32] == DbTypeIDs<V33>::ID() );
    assert( _colTypes[33] == DbTypeIDs<V34>::ID() );
    assert( _colTypes[34] == DbTypeIDs<V35>::ID() );
    assert( _colTypes[35] == DbTypeIDs<V36>::ID() );
    assert( _colTypes[36] == DbTypeIDs<V37>::ID() );
    assert( _colTypes[37] == DbTypeIDs<V38>::ID() );
    assert( _colTypes[38] == DbTypeIDs<V39>::ID() );
    assert( _colTypes[39] == DbTypeIDs<V40>::ID() );
    assert( _colTypes[40] == DbTypeIDs<V41>::ID() );
    assert( _colTypes[41] == DbTypeIDs<V42>::ID() );
    assert( _colTypes[42] == DbTypeIDs<V43>::ID() );
    assert( _colTypes[43] == DbTypeIDs<V44>::ID() );
    ((List<V1>*)_colDatas[0])->Add(v1);
    ((List<V2>*)_colDatas[1])->Add(v2);
    ((List<V3>*)_colDatas[2])->Add(v3);
    ((List<V4>*)_colDatas[3])->Add(v4);
    ((List<V5>*)_colDatas[4])->Add(v5);
    ((List<V6>*)_colDatas[5])->Add(v6);
    ((List<V7>*)_colDatas[6])->Add(v7);
    ((List<V8>*)_colDatas[7])->Add(v8);
    ((List<V9>*)_colDatas[8])->Add(v9);
    ((List<V10>*)_colDatas[9])->Add(v10);
    ((List<V11>*)_colDatas[10])->Add(v11);
    ((List<V12>*)_colDatas[11])->Add(v12);
    ((List<V13>*)_colDatas[12])->Add(v13);
    ((List<V14>*)_colDatas[13])->Add(v14);
    ((List<V15>*)_colDatas[14])->Add(v15);
    ((List<V16>*)_colDatas[15])->Add(v16);
    ((List<V17>*)_colDatas[16])->Add(v17);
    ((List<V18>*)_colDatas[17])->Add(v18);
    ((List<V19>*)_colDatas[18])->Add(v19);
    ((List<V20>*)_colDatas[19])->Add(v20);
    ((List<V21>*)_colDatas[20])->Add(v21);
    ((List<V22>*)_colDatas[21])->Add(v22);
    ((List<V23>*)_colDatas[22])->Add(v23);
    ((List<V24>*)_colDatas[23])->Add(v24);
    ((List<V25>*)_colDatas[24])->Add(v25);
    ((List<V26>*)_colDatas[25])->Add(v26);
    ((List<V27>*)_colDatas[26])->Add(v27);
    ((List<V28>*)_colDatas[27])->Add(v28);
    ((List<V29>*)_colDatas[28])->Add(v29);
    ((List<V30>*)_colDatas[29])->Add(v30);
    ((List<V31>*)_colDatas[30])->Add(v31);
    ((List<V32>*)_colDatas[31])->Add(v32);
    ((List<V33>*)_colDatas[32])->Add(v33);
    ((List<V34>*)_colDatas[33])->Add(v34);
    ((List<V35>*)_colDatas[34])->Add(v35);
    ((List<V36>*)_colDatas[35])->Add(v36);
    ((List<V37>*)_colDatas[36])->Add(v37);
    ((List<V38>*)_colDatas[37])->Add(v38);
    ((List<V39>*)_colDatas[38])->Add(v39);
    ((List<V40>*)_colDatas[39])->Add(v40);
    ((List<V41>*)_colDatas[40])->Add(v41);
    ((List<V42>*)_colDatas[41])->Add(v42);
    ((List<V43>*)_colDatas[42])->Add(v43);
    ((List<V44>*)_colDatas[43])->Add(v44);
    ++_rowCount;
    return *this;
}
template<typename V1, typename V2, typename V3, typename V4, typename V5, typename V6, typename V7, typename V8, typename V9, typename V10, typename V11, typename V12, typename V13, typename V14, typename V15, typename V16, typename V17, typename V18, typename V19, typename V20, typename V21, typename V22, typename V23, typename V24, typename V25, typename V26, typename V27, typename V28, typename V29, typename V30, typename V31, typename V32, typename V33, typename V34, typename V35, typename V36, typename V37, typename V38, typename V39, typename V40, typename V41, typename V42, typename V43, typename V44, typename V45>
DbTable & DbTable::AddRow(V1 const &v1, V2 const &v2, V3 const &v3, V4 const &v4, V5 const &v5, V6 const &v6, V7 const &v7, V8 const &v8, V9 const &v9, V10 const &v10, V11 const &v11, V12 const &v12, V13 const &v13, V14 const &v14, V15 const &v15, V16 const &v16, V17 const &v17, V18 const &v18, V19 const &v19, V20 const &v20, V21 const &v21, V22 const &v22, V23 const &v23, V24 const &v24, V25 const &v25, V26 const &v26, V27 const &v27, V28 const &v28, V29 const &v29, V30 const &v30, V31 const &v31, V32 const &v32, V33 const &v33, V34 const &v34, V35 const &v35, V36 const &v36, V37 const &v37, V38 const &v38, V39 const &v39, V40 const &v40, V41 const &v41, V42 const &v42, V43 const &v43, V44 const &v44, V45 const &v45) {
    assert( _colNames.Length() == 45 );
    assert( _colTypes[0] == DbTypeIDs<V1>::ID() );
    assert( _colTypes[1] == DbTypeIDs<V2>::ID() );
    assert( _colTypes[2] == DbTypeIDs<V3>::ID() );
    assert( _colTypes[3] == DbTypeIDs<V4>::ID() );
    assert( _colTypes[4] == DbTypeIDs<V5>::ID() );
    assert( _colTypes[5] == DbTypeIDs<V6>::ID() );
    assert( _colTypes[6] == DbTypeIDs<V7>::ID() );
    assert( _colTypes[7] == DbTypeIDs<V8>::ID() );
    assert( _colTypes[8] == DbTypeIDs<V9>::ID() );
    assert( _colTypes[9] == DbTypeIDs<V10>::ID() );
    assert( _colTypes[10] == DbTypeIDs<V11>::ID() );
    assert( _colTypes[11] == DbTypeIDs<V12>::ID() );
    assert( _colTypes[12] == DbTypeIDs<V13>::ID() );
    assert( _colTypes[13] == DbTypeIDs<V14>::ID() );
    assert( _colTypes[14] == DbTypeIDs<V15>::ID() );
    assert( _colTypes[15] == DbTypeIDs<V16>::ID() );
    assert( _colTypes[16] == DbTypeIDs<V17>::ID() );
    assert( _colTypes[17] == DbTypeIDs<V18>::ID() );
    assert( _colTypes[18] == DbTypeIDs<V19>::ID() );
    assert( _colTypes[19] == DbTypeIDs<V20>::ID() );
    assert( _colTypes[20] == DbTypeIDs<V21>::ID() );
    assert( _colTypes[21] == DbTypeIDs<V22>::ID() );
    assert( _colTypes[22] == DbTypeIDs<V23>::ID() );
    assert( _colTypes[23] == DbTypeIDs<V24>::ID() );
    assert( _colTypes[24] == DbTypeIDs<V25>::ID() );
    assert( _colTypes[25] == DbTypeIDs<V26>::ID() );
    assert( _colTypes[26] == DbTypeIDs<V27>::ID() );
    assert( _colTypes[27] == DbTypeIDs<V28>::ID() );
    assert( _colTypes[28] == DbTypeIDs<V29>::ID() );
    assert( _colTypes[29] == DbTypeIDs<V30>::ID() );
    assert( _colTypes[30] == DbTypeIDs<V31>::ID() );
    assert( _colTypes[31] == DbTypeIDs<V32>::ID() );
    assert( _colTypes[32] == DbTypeIDs<V33>::ID() );
    assert( _colTypes[33] == DbTypeIDs<V34>::ID() );
    assert( _colTypes[34] == DbTypeIDs<V35>::ID() );
    assert( _colTypes[35] == DbTypeIDs<V36>::ID() );
    assert( _colTypes[36] == DbTypeIDs<V37>::ID() );
    assert( _colTypes[37] == DbTypeIDs<V38>::ID() );
    assert( _colTypes[38] == DbTypeIDs<V39>::ID() );
    assert( _colTypes[39] == DbTypeIDs<V40>::ID() );
    assert( _colTypes[40] == DbTypeIDs<V41>::ID() );
    assert( _colTypes[41] == DbTypeIDs<V42>::ID() );
    assert( _colTypes[42] == DbTypeIDs<V43>::ID() );
    assert( _colTypes[43] == DbTypeIDs<V44>::ID() );
    assert( _colTypes[44] == DbTypeIDs<V45>::ID() );
    ((List<V1>*)_colDatas[0])->Add(v1);
    ((List<V2>*)_colDatas[1])->Add(v2);
    ((List<V3>*)_colDatas[2])->Add(v3);
    ((List<V4>*)_colDatas[3])->Add(v4);
    ((List<V5>*)_colDatas[4])->Add(v5);
    ((List<V6>*)_colDatas[5])->Add(v6);
    ((List<V7>*)_colDatas[6])->Add(v7);
    ((List<V8>*)_colDatas[7])->Add(v8);
    ((List<V9>*)_colDatas[8])->Add(v9);
    ((List<V10>*)_colDatas[9])->Add(v10);
    ((List<V11>*)_colDatas[10])->Add(v11);
    ((List<V12>*)_colDatas[11])->Add(v12);
    ((List<V13>*)_colDatas[12])->Add(v13);
    ((List<V14>*)_colDatas[13])->Add(v14);
    ((List<V15>*)_colDatas[14])->Add(v15);
    ((List<V16>*)_colDatas[15])->Add(v16);
    ((List<V17>*)_colDatas[16])->Add(v17);
    ((List<V18>*)_colDatas[17])->Add(v18);
    ((List<V19>*)_colDatas[18])->Add(v19);
    ((List<V20>*)_colDatas[19])->Add(v20);
    ((List<V21>*)_colDatas[20])->Add(v21);
    ((List<V22>*)_colDatas[21])->Add(v22);
    ((List<V23>*)_colDatas[22])->Add(v23);
    ((List<V24>*)_colDatas[23])->Add(v24);
    ((List<V25>*)_colDatas[24])->Add(v25);
    ((List<V26>*)_colDatas[25])->Add(v26);
    ((List<V27>*)_colDatas[26])->Add(v27);
    ((List<V28>*)_colDatas[27])->Add(v28);
    ((List<V29>*)_colDatas[28])->Add(v29);
    ((List<V30>*)_colDatas[29])->Add(v30);
    ((List<V31>*)_colDatas[30])->Add(v31);
    ((List<V32>*)_colDatas[31])->Add(v32);
    ((List<V33>*)_colDatas[32])->Add(v33);
    ((List<V34>*)_colDatas[33])->Add(v34);
    ((List<V35>*)_colDatas[34])->Add(v35);
    ((List<V36>*)_colDatas[35])->Add(v36);
    ((List<V37>*)_colDatas[36])->Add(v37);
    ((List<V38>*)_colDatas[37])->Add(v38);
    ((List<V39>*)_colDatas[38])->Add(v39);
    ((List<V40>*)_colDatas[39])->Add(v40);
    ((List<V41>*)_colDatas[40])->Add(v41);
    ((List<V42>*)_colDatas[41])->Add(v42);
    ((List<V43>*)_colDatas[42])->Add(v43);
    ((List<V44>*)_colDatas[43])->Add(v44);
    ((List<V45>*)_colDatas[44])->Add(v45);
    ++_rowCount;
    return *this;
}
template<typename V1, typename V2, typename V3, typename V4, typename V5, typename V6, typename V7, typename V8, typename V9, typename V10, typename V11, typename V12, typename V13, typename V14, typename V15, typename V16, typename V17, typename V18, typename V19, typename V20, typename V21, typename V22, typename V23, typename V24, typename V25, typename V26, typename V27, typename V28, typename V29, typename V30, typename V31, typename V32, typename V33, typename V34, typename V35, typename V36, typename V37, typename V38, typename V39, typename V40, typename V41, typename V42, typename V43, typename V44, typename V45, typename V46>
DbTable & DbTable::AddRow(V1 const &v1, V2 const &v2, V3 const &v3, V4 const &v4, V5 const &v5, V6 const &v6, V7 const &v7, V8 const &v8, V9 const &v9, V10 const &v10, V11 const &v11, V12 const &v12, V13 const &v13, V14 const &v14, V15 const &v15, V16 const &v16, V17 const &v17, V18 const &v18, V19 const &v19, V20 const &v20, V21 const &v21, V22 const &v22, V23 const &v23, V24 const &v24, V25 const &v25, V26 const &v26, V27 const &v27, V28 const &v28, V29 const &v29, V30 const &v30, V31 const &v31, V32 const &v32, V33 const &v33, V34 const &v34, V35 const &v35, V36 const &v36, V37 const &v37, V38 const &v38, V39 const &v39, V40 const &v40, V41 const &v41, V42 const &v42, V43 const &v43, V44 const &v44, V45 const &v45, V46 const &v46) {
    assert( _colNames.Length() == 46 );
    assert( _colTypes[0] == DbTypeIDs<V1>::ID() );
    assert( _colTypes[1] == DbTypeIDs<V2>::ID() );
    assert( _colTypes[2] == DbTypeIDs<V3>::ID() );
    assert( _colTypes[3] == DbTypeIDs<V4>::ID() );
    assert( _colTypes[4] == DbTypeIDs<V5>::ID() );
    assert( _colTypes[5] == DbTypeIDs<V6>::ID() );
    assert( _colTypes[6] == DbTypeIDs<V7>::ID() );
    assert( _colTypes[7] == DbTypeIDs<V8>::ID() );
    assert( _colTypes[8] == DbTypeIDs<V9>::ID() );
    assert( _colTypes[9] == DbTypeIDs<V10>::ID() );
    assert( _colTypes[10] == DbTypeIDs<V11>::ID() );
    assert( _colTypes[11] == DbTypeIDs<V12>::ID() );
    assert( _colTypes[12] == DbTypeIDs<V13>::ID() );
    assert( _colTypes[13] == DbTypeIDs<V14>::ID() );
    assert( _colTypes[14] == DbTypeIDs<V15>::ID() );
    assert( _colTypes[15] == DbTypeIDs<V16>::ID() );
    assert( _colTypes[16] == DbTypeIDs<V17>::ID() );
    assert( _colTypes[17] == DbTypeIDs<V18>::ID() );
    assert( _colTypes[18] == DbTypeIDs<V19>::ID() );
    assert( _colTypes[19] == DbTypeIDs<V20>::ID() );
    assert( _colTypes[20] == DbTypeIDs<V21>::ID() );
    assert( _colTypes[21] == DbTypeIDs<V22>::ID() );
    assert( _colTypes[22] == DbTypeIDs<V23>::ID() );
    assert( _colTypes[23] == DbTypeIDs<V24>::ID() );
    assert( _colTypes[24] == DbTypeIDs<V25>::ID() );
    assert( _colTypes[25] == DbTypeIDs<V26>::ID() );
    assert( _colTypes[26] == DbTypeIDs<V27>::ID() );
    assert( _colTypes[27] == DbTypeIDs<V28>::ID() );
    assert( _colTypes[28] == DbTypeIDs<V29>::ID() );
    assert( _colTypes[29] == DbTypeIDs<V30>::ID() );
    assert( _colTypes[30] == DbTypeIDs<V31>::ID() );
    assert( _colTypes[31] == DbTypeIDs<V32>::ID() );
    assert( _colTypes[32] == DbTypeIDs<V33>::ID() );
    assert( _colTypes[33] == DbTypeIDs<V34>::ID() );
    assert( _colTypes[34] == DbTypeIDs<V35>::ID() );
    assert( _colTypes[35] == DbTypeIDs<V36>::ID() );
    assert( _colTypes[36] == DbTypeIDs<V37>::ID() );
    assert( _colTypes[37] == DbTypeIDs<V38>::ID() );
    assert( _colTypes[38] == DbTypeIDs<V39>::ID() );
    assert( _colTypes[39] == DbTypeIDs<V40>::ID() );
    assert( _colTypes[40] == DbTypeIDs<V41>::ID() );
    assert( _colTypes[41] == DbTypeIDs<V42>::ID() );
    assert( _colTypes[42] == DbTypeIDs<V43>::ID() );
    assert( _colTypes[43] == DbTypeIDs<V44>::ID() );
    assert( _colTypes[44] == DbTypeIDs<V45>::ID() );
    assert( _colTypes[45] == DbTypeIDs<V46>::ID() );
    ((List<V1>*)_colDatas[0])->Add(v1);
    ((List<V2>*)_colDatas[1])->Add(v2);
    ((List<V3>*)_colDatas[2])->Add(v3);
    ((List<V4>*)_colDatas[3])->Add(v4);
    ((List<V5>*)_colDatas[4])->Add(v5);
    ((List<V6>*)_colDatas[5])->Add(v6);
    ((List<V7>*)_colDatas[6])->Add(v7);
    ((List<V8>*)_colDatas[7])->Add(v8);
    ((List<V9>*)_colDatas[8])->Add(v9);
    ((List<V10>*)_colDatas[9])->Add(v10);
    ((List<V11>*)_colDatas[10])->Add(v11);
    ((List<V12>*)_colDatas[11])->Add(v12);
    ((List<V13>*)_colDatas[12])->Add(v13);
    ((List<V14>*)_colDatas[13])->Add(v14);
    ((List<V15>*)_colDatas[14])->Add(v15);
    ((List<V16>*)_colDatas[15])->Add(v16);
    ((List<V17>*)_colDatas[16])->Add(v17);
    ((List<V18>*)_colDatas[17])->Add(v18);
    ((List<V19>*)_colDatas[18])->Add(v19);
    ((List<V20>*)_colDatas[19])->Add(v20);
    ((List<V21>*)_colDatas[20])->Add(v21);
    ((List<V22>*)_colDatas[21])->Add(v22);
    ((List<V23>*)_colDatas[22])->Add(v23);
    ((List<V24>*)_colDatas[23])->Add(v24);
    ((List<V25>*)_colDatas[24])->Add(v25);
    ((List<V26>*)_colDatas[25])->Add(v26);
    ((List<V27>*)_colDatas[26])->Add(v27);
    ((List<V28>*)_colDatas[27])->Add(v28);
    ((List<V29>*)_colDatas[28])->Add(v29);
    ((List<V30>*)_colDatas[29])->Add(v30);
    ((List<V31>*)_colDatas[30])->Add(v31);
    ((List<V32>*)_colDatas[31])->Add(v32);
    ((List<V33>*)_colDatas[32])->Add(v33);
    ((List<V34>*)_colDatas[33])->Add(v34);
    ((List<V35>*)_colDatas[34])->Add(v35);
    ((List<V36>*)_colDatas[35])->Add(v36);
    ((List<V37>*)_colDatas[36])->Add(v37);
    ((List<V38>*)_colDatas[37])->Add(v38);
    ((List<V39>*)_colDatas[38])->Add(v39);
    ((List<V40>*)_colDatas[39])->Add(v40);
    ((List<V41>*)_colDatas[40])->Add(v41);
    ((List<V42>*)_colDatas[41])->Add(v42);
    ((List<V43>*)_colDatas[42])->Add(v43);
    ((List<V44>*)_colDatas[43])->Add(v44);
    ((List<V45>*)_colDatas[44])->Add(v45);
    ((List<V46>*)_colDatas[45])->Add(v46);
    ++_rowCount;
    return *this;
}
template<typename V1, typename V2, typename V3, typename V4, typename V5, typename V6, typename V7, typename V8, typename V9, typename V10, typename V11, typename V12, typename V13, typename V14, typename V15, typename V16, typename V17, typename V18, typename V19, typename V20, typename V21, typename V22, typename V23, typename V24, typename V25, typename V26, typename V27, typename V28, typename V29, typename V30, typename V31, typename V32, typename V33, typename V34, typename V35, typename V36, typename V37, typename V38, typename V39, typename V40, typename V41, typename V42, typename V43, typename V44, typename V45, typename V46, typename V47>
DbTable & DbTable::AddRow(V1 const &v1, V2 const &v2, V3 const &v3, V4 const &v4, V5 const &v5, V6 const &v6, V7 const &v7, V8 const &v8, V9 const &v9, V10 const &v10, V11 const &v11, V12 const &v12, V13 const &v13, V14 const &v14, V15 const &v15, V16 const &v16, V17 const &v17, V18 const &v18, V19 const &v19, V20 const &v20, V21 const &v21, V22 const &v22, V23 const &v23, V24 const &v24, V25 const &v25, V26 const &v26, V27 const &v27, V28 const &v28, V29 const &v29, V30 const &v30, V31 const &v31, V32 const &v32, V33 const &v33, V34 const &v34, V35 const &v35, V36 const &v36, V37 const &v37, V38 const &v38, V39 const &v39, V40 const &v40, V41 const &v41, V42 const &v42, V43 const &v43, V44 const &v44, V45 const &v45, V46 const &v46, V47 const &v47) {
    assert( _colNames.Length() == 47 );
    assert( _colTypes[0] == DbTypeIDs<V1>::ID() );
    assert( _colTypes[1] == DbTypeIDs<V2>::ID() );
    assert( _colTypes[2] == DbTypeIDs<V3>::ID() );
    assert( _colTypes[3] == DbTypeIDs<V4>::ID() );
    assert( _colTypes[4] == DbTypeIDs<V5>::ID() );
    assert( _colTypes[5] == DbTypeIDs<V6>::ID() );
    assert( _colTypes[6] == DbTypeIDs<V7>::ID() );
    assert( _colTypes[7] == DbTypeIDs<V8>::ID() );
    assert( _colTypes[8] == DbTypeIDs<V9>::ID() );
    assert( _colTypes[9] == DbTypeIDs<V10>::ID() );
    assert( _colTypes[10] == DbTypeIDs<V11>::ID() );
    assert( _colTypes[11] == DbTypeIDs<V12>::ID() );
    assert( _colTypes[12] == DbTypeIDs<V13>::ID() );
    assert( _colTypes[13] == DbTypeIDs<V14>::ID() );
    assert( _colTypes[14] == DbTypeIDs<V15>::ID() );
    assert( _colTypes[15] == DbTypeIDs<V16>::ID() );
    assert( _colTypes[16] == DbTypeIDs<V17>::ID() );
    assert( _colTypes[17] == DbTypeIDs<V18>::ID() );
    assert( _colTypes[18] == DbTypeIDs<V19>::ID() );
    assert( _colTypes[19] == DbTypeIDs<V20>::ID() );
    assert( _colTypes[20] == DbTypeIDs<V21>::ID() );
    assert( _colTypes[21] == DbTypeIDs<V22>::ID() );
    assert( _colTypes[22] == DbTypeIDs<V23>::ID() );
    assert( _colTypes[23] == DbTypeIDs<V24>::ID() );
    assert( _colTypes[24] == DbTypeIDs<V25>::ID() );
    assert( _colTypes[25] == DbTypeIDs<V26>::ID() );
    assert( _colTypes[26] == DbTypeIDs<V27>::ID() );
    assert( _colTypes[27] == DbTypeIDs<V28>::ID() );
    assert( _colTypes[28] == DbTypeIDs<V29>::ID() );
    assert( _colTypes[29] == DbTypeIDs<V30>::ID() );
    assert( _colTypes[30] == DbTypeIDs<V31>::ID() );
    assert( _colTypes[31] == DbTypeIDs<V32>::ID() );
    assert( _colTypes[32] == DbTypeIDs<V33>::ID() );
    assert( _colTypes[33] == DbTypeIDs<V34>::ID() );
    assert( _colTypes[34] == DbTypeIDs<V35>::ID() );
    assert( _colTypes[35] == DbTypeIDs<V36>::ID() );
    assert( _colTypes[36] == DbTypeIDs<V37>::ID() );
    assert( _colTypes[37] == DbTypeIDs<V38>::ID() );
    assert( _colTypes[38] == DbTypeIDs<V39>::ID() );
    assert( _colTypes[39] == DbTypeIDs<V40>::ID() );
    assert( _colTypes[40] == DbTypeIDs<V41>::ID() );
    assert( _colTypes[41] == DbTypeIDs<V42>::ID() );
    assert( _colTypes[42] == DbTypeIDs<V43>::ID() );
    assert( _colTypes[43] == DbTypeIDs<V44>::ID() );
    assert( _colTypes[44] == DbTypeIDs<V45>::ID() );
    assert( _colTypes[45] == DbTypeIDs<V46>::ID() );
    assert( _colTypes[46] == DbTypeIDs<V47>::ID() );
    ((List<V1>*)_colDatas[0])->Add(v1);
    ((List<V2>*)_colDatas[1])->Add(v2);
    ((List<V3>*)_colDatas[2])->Add(v3);
    ((List<V4>*)_colDatas[3])->Add(v4);
    ((List<V5>*)_colDatas[4])->Add(v5);
    ((List<V6>*)_colDatas[5])->Add(v6);
    ((List<V7>*)_colDatas[6])->Add(v7);
    ((List<V8>*)_colDatas[7])->Add(v8);
    ((List<V9>*)_colDatas[8])->Add(v9);
    ((List<V10>*)_colDatas[9])->Add(v10);
    ((List<V11>*)_colDatas[10])->Add(v11);
    ((List<V12>*)_colDatas[11])->Add(v12);
    ((List<V13>*)_colDatas[12])->Add(v13);
    ((List<V14>*)_colDatas[13])->Add(v14);
    ((List<V15>*)_colDatas[14])->Add(v15);
    ((List<V16>*)_colDatas[15])->Add(v16);
    ((List<V17>*)_colDatas[16])->Add(v17);
    ((List<V18>*)_colDatas[17])->Add(v18);
    ((List<V19>*)_colDatas[18])->Add(v19);
    ((List<V20>*)_colDatas[19])->Add(v20);
    ((List<V21>*)_colDatas[20])->Add(v21);
    ((List<V22>*)_colDatas[21])->Add(v22);
    ((List<V23>*)_colDatas[22])->Add(v23);
    ((List<V24>*)_colDatas[23])->Add(v24);
    ((List<V25>*)_colDatas[24])->Add(v25);
    ((List<V26>*)_colDatas[25])->Add(v26);
    ((List<V27>*)_colDatas[26])->Add(v27);
    ((List<V28>*)_colDatas[27])->Add(v28);
    ((List<V29>*)_colDatas[28])->Add(v29);
    ((List<V30>*)_colDatas[29])->Add(v30);
    ((List<V31>*)_colDatas[30])->Add(v31);
    ((List<V32>*)_colDatas[31])->Add(v32);
    ((List<V33>*)_colDatas[32])->Add(v33);
    ((List<V34>*)_colDatas[33])->Add(v34);
    ((List<V35>*)_colDatas[34])->Add(v35);
    ((List<V36>*)_colDatas[35])->Add(v36);
    ((List<V37>*)_colDatas[36])->Add(v37);
    ((List<V38>*)_colDatas[37])->Add(v38);
    ((List<V39>*)_colDatas[38])->Add(v39);
    ((List<V40>*)_colDatas[39])->Add(v40);
    ((List<V41>*)_colDatas[40])->Add(v41);
    ((List<V42>*)_colDatas[41])->Add(v42);
    ((List<V43>*)_colDatas[42])->Add(v43);
    ((List<V44>*)_colDatas[43])->Add(v44);
    ((List<V45>*)_colDatas[44])->Add(v45);
    ((List<V46>*)_colDatas[45])->Add(v46);
    ((List<V47>*)_colDatas[46])->Add(v47);
    ++_rowCount;
    return *this;
}
template<typename V1, typename V2, typename V3, typename V4, typename V5, typename V6, typename V7, typename V8, typename V9, typename V10, typename V11, typename V12, typename V13, typename V14, typename V15, typename V16, typename V17, typename V18, typename V19, typename V20, typename V21, typename V22, typename V23, typename V24, typename V25, typename V26, typename V27, typename V28, typename V29, typename V30, typename V31, typename V32, typename V33, typename V34, typename V35, typename V36, typename V37, typename V38, typename V39, typename V40, typename V41, typename V42, typename V43, typename V44, typename V45, typename V46, typename V47, typename V48>
DbTable & DbTable::AddRow(V1 const &v1, V2 const &v2, V3 const &v3, V4 const &v4, V5 const &v5, V6 const &v6, V7 const &v7, V8 const &v8, V9 const &v9, V10 const &v10, V11 const &v11, V12 const &v12, V13 const &v13, V14 const &v14, V15 const &v15, V16 const &v16, V17 const &v17, V18 const &v18, V19 const &v19, V20 const &v20, V21 const &v21, V22 const &v22, V23 const &v23, V24 const &v24, V25 const &v25, V26 const &v26, V27 const &v27, V28 const &v28, V29 const &v29, V30 const &v30, V31 const &v31, V32 const &v32, V33 const &v33, V34 const &v34, V35 const &v35, V36 const &v36, V37 const &v37, V38 const &v38, V39 const &v39, V40 const &v40, V41 const &v41, V42 const &v42, V43 const &v43, V44 const &v44, V45 const &v45, V46 const &v46, V47 const &v47, V48 const &v48) {
    assert( _colNames.Length() == 48 );
    assert( _colTypes[0] == DbTypeIDs<V1>::ID() );
    assert( _colTypes[1] == DbTypeIDs<V2>::ID() );
    assert( _colTypes[2] == DbTypeIDs<V3>::ID() );
    assert( _colTypes[3] == DbTypeIDs<V4>::ID() );
    assert( _colTypes[4] == DbTypeIDs<V5>::ID() );
    assert( _colTypes[5] == DbTypeIDs<V6>::ID() );
    assert( _colTypes[6] == DbTypeIDs<V7>::ID() );
    assert( _colTypes[7] == DbTypeIDs<V8>::ID() );
    assert( _colTypes[8] == DbTypeIDs<V9>::ID() );
    assert( _colTypes[9] == DbTypeIDs<V10>::ID() );
    assert( _colTypes[10] == DbTypeIDs<V11>::ID() );
    assert( _colTypes[11] == DbTypeIDs<V12>::ID() );
    assert( _colTypes[12] == DbTypeIDs<V13>::ID() );
    assert( _colTypes[13] == DbTypeIDs<V14>::ID() );
    assert( _colTypes[14] == DbTypeIDs<V15>::ID() );
    assert( _colTypes[15] == DbTypeIDs<V16>::ID() );
    assert( _colTypes[16] == DbTypeIDs<V17>::ID() );
    assert( _colTypes[17] == DbTypeIDs<V18>::ID() );
    assert( _colTypes[18] == DbTypeIDs<V19>::ID() );
    assert( _colTypes[19] == DbTypeIDs<V20>::ID() );
    assert( _colTypes[20] == DbTypeIDs<V21>::ID() );
    assert( _colTypes[21] == DbTypeIDs<V22>::ID() );
    assert( _colTypes[22] == DbTypeIDs<V23>::ID() );
    assert( _colTypes[23] == DbTypeIDs<V24>::ID() );
    assert( _colTypes[24] == DbTypeIDs<V25>::ID() );
    assert( _colTypes[25] == DbTypeIDs<V26>::ID() );
    assert( _colTypes[26] == DbTypeIDs<V27>::ID() );
    assert( _colTypes[27] == DbTypeIDs<V28>::ID() );
    assert( _colTypes[28] == DbTypeIDs<V29>::ID() );
    assert( _colTypes[29] == DbTypeIDs<V30>::ID() );
    assert( _colTypes[30] == DbTypeIDs<V31>::ID() );
    assert( _colTypes[31] == DbTypeIDs<V32>::ID() );
    assert( _colTypes[32] == DbTypeIDs<V33>::ID() );
    assert( _colTypes[33] == DbTypeIDs<V34>::ID() );
    assert( _colTypes[34] == DbTypeIDs<V35>::ID() );
    assert( _colTypes[35] == DbTypeIDs<V36>::ID() );
    assert( _colTypes[36] == DbTypeIDs<V37>::ID() );
    assert( _colTypes[37] == DbTypeIDs<V38>::ID() );
    assert( _colTypes[38] == DbTypeIDs<V39>::ID() );
    assert( _colTypes[39] == DbTypeIDs<V40>::ID() );
    assert( _colTypes[40] == DbTypeIDs<V41>::ID() );
    assert( _colTypes[41] == DbTypeIDs<V42>::ID() );
    assert( _colTypes[42] == DbTypeIDs<V43>::ID() );
    assert( _colTypes[43] == DbTypeIDs<V44>::ID() );
    assert( _colTypes[44] == DbTypeIDs<V45>::ID() );
    assert( _colTypes[45] == DbTypeIDs<V46>::ID() );
    assert( _colTypes[46] == DbTypeIDs<V47>::ID() );
    assert( _colTypes[47] == DbTypeIDs<V48>::ID() );
    ((List<V1>*)_colDatas[0])->Add(v1);
    ((List<V2>*)_colDatas[1])->Add(v2);
    ((List<V3>*)_colDatas[2])->Add(v3);
    ((List<V4>*)_colDatas[3])->Add(v4);
    ((List<V5>*)_colDatas[4])->Add(v5);
    ((List<V6>*)_colDatas[5])->Add(v6);
    ((List<V7>*)_colDatas[6])->Add(v7);
    ((List<V8>*)_colDatas[7])->Add(v8);
    ((List<V9>*)_colDatas[8])->Add(v9);
    ((List<V10>*)_colDatas[9])->Add(v10);
    ((List<V11>*)_colDatas[10])->Add(v11);
    ((List<V12>*)_colDatas[11])->Add(v12);
    ((List<V13>*)_colDatas[12])->Add(v13);
    ((List<V14>*)_colDatas[13])->Add(v14);
    ((List<V15>*)_colDatas[14])->Add(v15);
    ((List<V16>*)_colDatas[15])->Add(v16);
    ((List<V17>*)_colDatas[16])->Add(v17);
    ((List<V18>*)_colDatas[17])->Add(v18);
    ((List<V19>*)_colDatas[18])->Add(v19);
    ((List<V20>*)_colDatas[19])->Add(v20);
    ((List<V21>*)_colDatas[20])->Add(v21);
    ((List<V22>*)_colDatas[21])->Add(v22);
    ((List<V23>*)_colDatas[22])->Add(v23);
    ((List<V24>*)_colDatas[23])->Add(v24);
    ((List<V25>*)_colDatas[24])->Add(v25);
    ((List<V26>*)_colDatas[25])->Add(v26);
    ((List<V27>*)_colDatas[26])->Add(v27);
    ((List<V28>*)_colDatas[27])->Add(v28);
    ((List<V29>*)_colDatas[28])->Add(v29);
    ((List<V30>*)_colDatas[29])->Add(v30);
    ((List<V31>*)_colDatas[30])->Add(v31);
    ((List<V32>*)_colDatas[31])->Add(v32);
    ((List<V33>*)_colDatas[32])->Add(v33);
    ((List<V34>*)_colDatas[33])->Add(v34);
    ((List<V35>*)_colDatas[34])->Add(v35);
    ((List<V36>*)_colDatas[35])->Add(v36);
    ((List<V37>*)_colDatas[36])->Add(v37);
    ((List<V38>*)_colDatas[37])->Add(v38);
    ((List<V39>*)_colDatas[38])->Add(v39);
    ((List<V40>*)_colDatas[39])->Add(v40);
    ((List<V41>*)_colDatas[40])->Add(v41);
    ((List<V42>*)_colDatas[41])->Add(v42);
    ((List<V43>*)_colDatas[42])->Add(v43);
    ((List<V44>*)_colDatas[43])->Add(v44);
    ((List<V45>*)_colDatas[44])->Add(v45);
    ((List<V46>*)_colDatas[45])->Add(v46);
    ((List<V47>*)_colDatas[46])->Add(v47);
    ((List<V48>*)_colDatas[47])->Add(v48);
    ++_rowCount;
    return *this;
}
template<typename V1, typename V2, typename V3, typename V4, typename V5, typename V6, typename V7, typename V8, typename V9, typename V10, typename V11, typename V12, typename V13, typename V14, typename V15, typename V16, typename V17, typename V18, typename V19, typename V20, typename V21, typename V22, typename V23, typename V24, typename V25, typename V26, typename V27, typename V28, typename V29, typename V30, typename V31, typename V32, typename V33, typename V34, typename V35, typename V36, typename V37, typename V38, typename V39, typename V40, typename V41, typename V42, typename V43, typename V44, typename V45, typename V46, typename V47, typename V48, typename V49>
DbTable & DbTable::AddRow(V1 const &v1, V2 const &v2, V3 const &v3, V4 const &v4, V5 const &v5, V6 const &v6, V7 const &v7, V8 const &v8, V9 const &v9, V10 const &v10, V11 const &v11, V12 const &v12, V13 const &v13, V14 const &v14, V15 const &v15, V16 const &v16, V17 const &v17, V18 const &v18, V19 const &v19, V20 const &v20, V21 const &v21, V22 const &v22, V23 const &v23, V24 const &v24, V25 const &v25, V26 const &v26, V27 const &v27, V28 const &v28, V29 const &v29, V30 const &v30, V31 const &v31, V32 const &v32, V33 const &v33, V34 const &v34, V35 const &v35, V36 const &v36, V37 const &v37, V38 const &v38, V39 const &v39, V40 const &v40, V41 const &v41, V42 const &v42, V43 const &v43, V44 const &v44, V45 const &v45, V46 const &v46, V47 const &v47, V48 const &v48, V49 const &v49) {
    assert( _colNames.Length() == 49 );
    assert( _colTypes[0] == DbTypeIDs<V1>::ID() );
    assert( _colTypes[1] == DbTypeIDs<V2>::ID() );
    assert( _colTypes[2] == DbTypeIDs<V3>::ID() );
    assert( _colTypes[3] == DbTypeIDs<V4>::ID() );
    assert( _colTypes[4] == DbTypeIDs<V5>::ID() );
    assert( _colTypes[5] == DbTypeIDs<V6>::ID() );
    assert( _colTypes[6] == DbTypeIDs<V7>::ID() );
    assert( _colTypes[7] == DbTypeIDs<V8>::ID() );
    assert( _colTypes[8] == DbTypeIDs<V9>::ID() );
    assert( _colTypes[9] == DbTypeIDs<V10>::ID() );
    assert( _colTypes[10] == DbTypeIDs<V11>::ID() );
    assert( _colTypes[11] == DbTypeIDs<V12>::ID() );
    assert( _colTypes[12] == DbTypeIDs<V13>::ID() );
    assert( _colTypes[13] == DbTypeIDs<V14>::ID() );
    assert( _colTypes[14] == DbTypeIDs<V15>::ID() );
    assert( _colTypes[15] == DbTypeIDs<V16>::ID() );
    assert( _colTypes[16] == DbTypeIDs<V17>::ID() );
    assert( _colTypes[17] == DbTypeIDs<V18>::ID() );
    assert( _colTypes[18] == DbTypeIDs<V19>::ID() );
    assert( _colTypes[19] == DbTypeIDs<V20>::ID() );
    assert( _colTypes[20] == DbTypeIDs<V21>::ID() );
    assert( _colTypes[21] == DbTypeIDs<V22>::ID() );
    assert( _colTypes[22] == DbTypeIDs<V23>::ID() );
    assert( _colTypes[23] == DbTypeIDs<V24>::ID() );
    assert( _colTypes[24] == DbTypeIDs<V25>::ID() );
    assert( _colTypes[25] == DbTypeIDs<V26>::ID() );
    assert( _colTypes[26] == DbTypeIDs<V27>::ID() );
    assert( _colTypes[27] == DbTypeIDs<V28>::ID() );
    assert( _colTypes[28] == DbTypeIDs<V29>::ID() );
    assert( _colTypes[29] == DbTypeIDs<V30>::ID() );
    assert( _colTypes[30] == DbTypeIDs<V31>::ID() );
    assert( _colTypes[31] == DbTypeIDs<V32>::ID() );
    assert( _colTypes[32] == DbTypeIDs<V33>::ID() );
    assert( _colTypes[33] == DbTypeIDs<V34>::ID() );
    assert( _colTypes[34] == DbTypeIDs<V35>::ID() );
    assert( _colTypes[35] == DbTypeIDs<V36>::ID() );
    assert( _colTypes[36] == DbTypeIDs<V37>::ID() );
    assert( _colTypes[37] == DbTypeIDs<V38>::ID() );
    assert( _colTypes[38] == DbTypeIDs<V39>::ID() );
    assert( _colTypes[39] == DbTypeIDs<V40>::ID() );
    assert( _colTypes[40] == DbTypeIDs<V41>::ID() );
    assert( _colTypes[41] == DbTypeIDs<V42>::ID() );
    assert( _colTypes[42] == DbTypeIDs<V43>::ID() );
    assert( _colTypes[43] == DbTypeIDs<V44>::ID() );
    assert( _colTypes[44] == DbTypeIDs<V45>::ID() );
    assert( _colTypes[45] == DbTypeIDs<V46>::ID() );
    assert( _colTypes[46] == DbTypeIDs<V47>::ID() );
    assert( _colTypes[47] == DbTypeIDs<V48>::ID() );
    assert( _colTypes[48] == DbTypeIDs<V49>::ID() );
    ((List<V1>*)_colDatas[0])->Add(v1);
    ((List<V2>*)_colDatas[1])->Add(v2);
    ((List<V3>*)_colDatas[2])->Add(v3);
    ((List<V4>*)_colDatas[3])->Add(v4);
    ((List<V5>*)_colDatas[4])->Add(v5);
    ((List<V6>*)_colDatas[5])->Add(v6);
    ((List<V7>*)_colDatas[6])->Add(v7);
    ((List<V8>*)_colDatas[7])->Add(v8);
    ((List<V9>*)_colDatas[8])->Add(v9);
    ((List<V10>*)_colDatas[9])->Add(v10);
    ((List<V11>*)_colDatas[10])->Add(v11);
    ((List<V12>*)_colDatas[11])->Add(v12);
    ((List<V13>*)_colDatas[12])->Add(v13);
    ((List<V14>*)_colDatas[13])->Add(v14);
    ((List<V15>*)_colDatas[14])->Add(v15);
    ((List<V16>*)_colDatas[15])->Add(v16);
    ((List<V17>*)_colDatas[16])->Add(v17);
    ((List<V18>*)_colDatas[17])->Add(v18);
    ((List<V19>*)_colDatas[18])->Add(v19);
    ((List<V20>*)_colDatas[19])->Add(v20);
    ((List<V21>*)_colDatas[20])->Add(v21);
    ((List<V22>*)_colDatas[21])->Add(v22);
    ((List<V23>*)_colDatas[22])->Add(v23);
    ((List<V24>*)_colDatas[23])->Add(v24);
    ((List<V25>*)_colDatas[24])->Add(v25);
    ((List<V26>*)_colDatas[25])->Add(v26);
    ((List<V27>*)_colDatas[26])->Add(v27);
    ((List<V28>*)_colDatas[27])->Add(v28);
    ((List<V29>*)_colDatas[28])->Add(v29);
    ((List<V30>*)_colDatas[29])->Add(v30);
    ((List<V31>*)_colDatas[30])->Add(v31);
    ((List<V32>*)_colDatas[31])->Add(v32);
    ((List<V33>*)_colDatas[32])->Add(v33);
    ((List<V34>*)_colDatas[33])->Add(v34);
    ((List<V35>*)_colDatas[34])->Add(v35);
    ((List<V36>*)_colDatas[35])->Add(v36);
    ((List<V37>*)_colDatas[36])->Add(v37);
    ((List<V38>*)_colDatas[37])->Add(v38);
    ((List<V39>*)_colDatas[38])->Add(v39);
    ((List<V40>*)_colDatas[39])->Add(v40);
    ((List<V41>*)_colDatas[40])->Add(v41);
    ((List<V42>*)_colDatas[41])->Add(v42);
    ((List<V43>*)_colDatas[42])->Add(v43);
    ((List<V44>*)_colDatas[43])->Add(v44);
    ((List<V45>*)_colDatas[44])->Add(v45);
    ((List<V46>*)_colDatas[45])->Add(v46);
    ((List<V47>*)_colDatas[46])->Add(v47);
    ((List<V48>*)_colDatas[47])->Add(v48);
    ((List<V49>*)_colDatas[48])->Add(v49);
    ++_rowCount;
    return *this;
}
template<typename V1, typename V2, typename V3, typename V4, typename V5, typename V6, typename V7, typename V8, typename V9, typename V10, typename V11, typename V12, typename V13, typename V14, typename V15, typename V16, typename V17, typename V18, typename V19, typename V20, typename V21, typename V22, typename V23, typename V24, typename V25, typename V26, typename V27, typename V28, typename V29, typename V30, typename V31, typename V32, typename V33, typename V34, typename V35, typename V36, typename V37, typename V38, typename V39, typename V40, typename V41, typename V42, typename V43, typename V44, typename V45, typename V46, typename V47, typename V48, typename V49, typename V50>
DbTable & DbTable::AddRow(V1 const &v1, V2 const &v2, V3 const &v3, V4 const &v4, V5 const &v5, V6 const &v6, V7 const &v7, V8 const &v8, V9 const &v9, V10 const &v10, V11 const &v11, V12 const &v12, V13 const &v13, V14 const &v14, V15 const &v15, V16 const &v16, V17 const &v17, V18 const &v18, V19 const &v19, V20 const &v20, V21 const &v21, V22 const &v22, V23 const &v23, V24 const &v24, V25 const &v25, V26 const &v26, V27 const &v27, V28 const &v28, V29 const &v29, V30 const &v30, V31 const &v31, V32 const &v32, V33 const &v33, V34 const &v34, V35 const &v35, V36 const &v36, V37 const &v37, V38 const &v38, V39 const &v39, V40 const &v40, V41 const &v41, V42 const &v42, V43 const &v43, V44 const &v44, V45 const &v45, V46 const &v46, V47 const &v47, V48 const &v48, V49 const &v49, V50 const &v50) {
    assert( _colNames.Length() == 50 );
    assert( _colTypes[0] == DbTypeIDs<V1>::ID() );
    assert( _colTypes[1] == DbTypeIDs<V2>::ID() );
    assert( _colTypes[2] == DbTypeIDs<V3>::ID() );
    assert( _colTypes[3] == DbTypeIDs<V4>::ID() );
    assert( _colTypes[4] == DbTypeIDs<V5>::ID() );
    assert( _colTypes[5] == DbTypeIDs<V6>::ID() );
    assert( _colTypes[6] == DbTypeIDs<V7>::ID() );
    assert( _colTypes[7] == DbTypeIDs<V8>::ID() );
    assert( _colTypes[8] == DbTypeIDs<V9>::ID() );
    assert( _colTypes[9] == DbTypeIDs<V10>::ID() );
    assert( _colTypes[10] == DbTypeIDs<V11>::ID() );
    assert( _colTypes[11] == DbTypeIDs<V12>::ID() );
    assert( _colTypes[12] == DbTypeIDs<V13>::ID() );
    assert( _colTypes[13] == DbTypeIDs<V14>::ID() );
    assert( _colTypes[14] == DbTypeIDs<V15>::ID() );
    assert( _colTypes[15] == DbTypeIDs<V16>::ID() );
    assert( _colTypes[16] == DbTypeIDs<V17>::ID() );
    assert( _colTypes[17] == DbTypeIDs<V18>::ID() );
    assert( _colTypes[18] == DbTypeIDs<V19>::ID() );
    assert( _colTypes[19] == DbTypeIDs<V20>::ID() );
    assert( _colTypes[20] == DbTypeIDs<V21>::ID() );
    assert( _colTypes[21] == DbTypeIDs<V22>::ID() );
    assert( _colTypes[22] == DbTypeIDs<V23>::ID() );
    assert( _colTypes[23] == DbTypeIDs<V24>::ID() );
    assert( _colTypes[24] == DbTypeIDs<V25>::ID() );
    assert( _colTypes[25] == DbTypeIDs<V26>::ID() );
    assert( _colTypes[26] == DbTypeIDs<V27>::ID() );
    assert( _colTypes[27] == DbTypeIDs<V28>::ID() );
    assert( _colTypes[28] == DbTypeIDs<V29>::ID() );
    assert( _colTypes[29] == DbTypeIDs<V30>::ID() );
    assert( _colTypes[30] == DbTypeIDs<V31>::ID() );
    assert( _colTypes[31] == DbTypeIDs<V32>::ID() );
    assert( _colTypes[32] == DbTypeIDs<V33>::ID() );
    assert( _colTypes[33] == DbTypeIDs<V34>::ID() );
    assert( _colTypes[34] == DbTypeIDs<V35>::ID() );
    assert( _colTypes[35] == DbTypeIDs<V36>::ID() );
    assert( _colTypes[36] == DbTypeIDs<V37>::ID() );
    assert( _colTypes[37] == DbTypeIDs<V38>::ID() );
    assert( _colTypes[38] == DbTypeIDs<V39>::ID() );
    assert( _colTypes[39] == DbTypeIDs<V40>::ID() );
    assert( _colTypes[40] == DbTypeIDs<V41>::ID() );
    assert( _colTypes[41] == DbTypeIDs<V42>::ID() );
    assert( _colTypes[42] == DbTypeIDs<V43>::ID() );
    assert( _colTypes[43] == DbTypeIDs<V44>::ID() );
    assert( _colTypes[44] == DbTypeIDs<V45>::ID() );
    assert( _colTypes[45] == DbTypeIDs<V46>::ID() );
    assert( _colTypes[46] == DbTypeIDs<V47>::ID() );
    assert( _colTypes[47] == DbTypeIDs<V48>::ID() );
    assert( _colTypes[48] == DbTypeIDs<V49>::ID() );
    assert( _colTypes[49] == DbTypeIDs<V50>::ID() );
    ((List<V1>*)_colDatas[0])->Add(v1);
    ((List<V2>*)_colDatas[1])->Add(v2);
    ((List<V3>*)_colDatas[2])->Add(v3);
    ((List<V4>*)_colDatas[3])->Add(v4);
    ((List<V5>*)_colDatas[4])->Add(v5);
    ((List<V6>*)_colDatas[5])->Add(v6);
    ((List<V7>*)_colDatas[6])->Add(v7);
    ((List<V8>*)_colDatas[7])->Add(v8);
    ((List<V9>*)_colDatas[8])->Add(v9);
    ((List<V10>*)_colDatas[9])->Add(v10);
    ((List<V11>*)_colDatas[10])->Add(v11);
    ((List<V12>*)_colDatas[11])->Add(v12);
    ((List<V13>*)_colDatas[12])->Add(v13);
    ((List<V14>*)_colDatas[13])->Add(v14);
    ((List<V15>*)_colDatas[14])->Add(v15);
    ((List<V16>*)_colDatas[15])->Add(v16);
    ((List<V17>*)_colDatas[16])->Add(v17);
    ((List<V18>*)_colDatas[17])->Add(v18);
    ((List<V19>*)_colDatas[18])->Add(v19);
    ((List<V20>*)_colDatas[19])->Add(v20);
    ((List<V21>*)_colDatas[20])->Add(v21);
    ((List<V22>*)_colDatas[21])->Add(v22);
    ((List<V23>*)_colDatas[22])->Add(v23);
    ((List<V24>*)_colDatas[23])->Add(v24);
    ((List<V25>*)_colDatas[24])->Add(v25);
    ((List<V26>*)_colDatas[25])->Add(v26);
    ((List<V27>*)_colDatas[26])->Add(v27);
    ((List<V28>*)_colDatas[27])->Add(v28);
    ((List<V29>*)_colDatas[28])->Add(v29);
    ((List<V30>*)_colDatas[29])->Add(v30);
    ((List<V31>*)_colDatas[30])->Add(v31);
    ((List<V32>*)_colDatas[31])->Add(v32);
    ((List<V33>*)_colDatas[32])->Add(v33);
    ((List<V34>*)_colDatas[33])->Add(v34);
    ((List<V35>*)_colDatas[34])->Add(v35);
    ((List<V36>*)_colDatas[35])->Add(v36);
    ((List<V37>*)_colDatas[36])->Add(v37);
    ((List<V38>*)_colDatas[37])->Add(v38);
    ((List<V39>*)_colDatas[38])->Add(v39);
    ((List<V40>*)_colDatas[39])->Add(v40);
    ((List<V41>*)_colDatas[40])->Add(v41);
    ((List<V42>*)_colDatas[41])->Add(v42);
    ((List<V43>*)_colDatas[42])->Add(v43);
    ((List<V44>*)_colDatas[43])->Add(v44);
    ((List<V45>*)_colDatas[44])->Add(v45);
    ((List<V46>*)_colDatas[45])->Add(v46);
    ((List<V47>*)_colDatas[46])->Add(v47);
    ((List<V48>*)_colDatas[47])->Add(v48);
    ((List<V49>*)_colDatas[48])->Add(v49);
    ((List<V50>*)_colDatas[49])->Add(v50);
    ++_rowCount;
    return *this;
}
template<typename V1, typename V2, typename V3, typename V4, typename V5, typename V6, typename V7, typename V8, typename V9, typename V10, typename V11, typename V12, typename V13, typename V14, typename V15, typename V16, typename V17, typename V18, typename V19, typename V20, typename V21, typename V22, typename V23, typename V24, typename V25, typename V26, typename V27, typename V28, typename V29, typename V30, typename V31, typename V32, typename V33, typename V34, typename V35, typename V36, typename V37, typename V38, typename V39, typename V40, typename V41, typename V42, typename V43, typename V44, typename V45, typename V46, typename V47, typename V48, typename V49, typename V50, typename V51>
DbTable & DbTable::AddRow(V1 const &v1, V2 const &v2, V3 const &v3, V4 const &v4, V5 const &v5, V6 const &v6, V7 const &v7, V8 const &v8, V9 const &v9, V10 const &v10, V11 const &v11, V12 const &v12, V13 const &v13, V14 const &v14, V15 const &v15, V16 const &v16, V17 const &v17, V18 const &v18, V19 const &v19, V20 const &v20, V21 const &v21, V22 const &v22, V23 const &v23, V24 const &v24, V25 const &v25, V26 const &v26, V27 const &v27, V28 const &v28, V29 const &v29, V30 const &v30, V31 const &v31, V32 const &v32, V33 const &v33, V34 const &v34, V35 const &v35, V36 const &v36, V37 const &v37, V38 const &v38, V39 const &v39, V40 const &v40, V41 const &v41, V42 const &v42, V43 const &v43, V44 const &v44, V45 const &v45, V46 const &v46, V47 const &v47, V48 const &v48, V49 const &v49, V50 const &v50, V51 const &v51) {
    assert( _colNames.Length() == 51 );
    assert( _colTypes[0] == DbTypeIDs<V1>::ID() );
    assert( _colTypes[1] == DbTypeIDs<V2>::ID() );
    assert( _colTypes[2] == DbTypeIDs<V3>::ID() );
    assert( _colTypes[3] == DbTypeIDs<V4>::ID() );
    assert( _colTypes[4] == DbTypeIDs<V5>::ID() );
    assert( _colTypes[5] == DbTypeIDs<V6>::ID() );
    assert( _colTypes[6] == DbTypeIDs<V7>::ID() );
    assert( _colTypes[7] == DbTypeIDs<V8>::ID() );
    assert( _colTypes[8] == DbTypeIDs<V9>::ID() );
    assert( _colTypes[9] == DbTypeIDs<V10>::ID() );
    assert( _colTypes[10] == DbTypeIDs<V11>::ID() );
    assert( _colTypes[11] == DbTypeIDs<V12>::ID() );
    assert( _colTypes[12] == DbTypeIDs<V13>::ID() );
    assert( _colTypes[13] == DbTypeIDs<V14>::ID() );
    assert( _colTypes[14] == DbTypeIDs<V15>::ID() );
    assert( _colTypes[15] == DbTypeIDs<V16>::ID() );
    assert( _colTypes[16] == DbTypeIDs<V17>::ID() );
    assert( _colTypes[17] == DbTypeIDs<V18>::ID() );
    assert( _colTypes[18] == DbTypeIDs<V19>::ID() );
    assert( _colTypes[19] == DbTypeIDs<V20>::ID() );
    assert( _colTypes[20] == DbTypeIDs<V21>::ID() );
    assert( _colTypes[21] == DbTypeIDs<V22>::ID() );
    assert( _colTypes[22] == DbTypeIDs<V23>::ID() );
    assert( _colTypes[23] == DbTypeIDs<V24>::ID() );
    assert( _colTypes[24] == DbTypeIDs<V25>::ID() );
    assert( _colTypes[25] == DbTypeIDs<V26>::ID() );
    assert( _colTypes[26] == DbTypeIDs<V27>::ID() );
    assert( _colTypes[27] == DbTypeIDs<V28>::ID() );
    assert( _colTypes[28] == DbTypeIDs<V29>::ID() );
    assert( _colTypes[29] == DbTypeIDs<V30>::ID() );
    assert( _colTypes[30] == DbTypeIDs<V31>::ID() );
    assert( _colTypes[31] == DbTypeIDs<V32>::ID() );
    assert( _colTypes[32] == DbTypeIDs<V33>::ID() );
    assert( _colTypes[33] == DbTypeIDs<V34>::ID() );
    assert( _colTypes[34] == DbTypeIDs<V35>::ID() );
    assert( _colTypes[35] == DbTypeIDs<V36>::ID() );
    assert( _colTypes[36] == DbTypeIDs<V37>::ID() );
    assert( _colTypes[37] == DbTypeIDs<V38>::ID() );
    assert( _colTypes[38] == DbTypeIDs<V39>::ID() );
    assert( _colTypes[39] == DbTypeIDs<V40>::ID() );
    assert( _colTypes[40] == DbTypeIDs<V41>::ID() );
    assert( _colTypes[41] == DbTypeIDs<V42>::ID() );
    assert( _colTypes[42] == DbTypeIDs<V43>::ID() );
    assert( _colTypes[43] == DbTypeIDs<V44>::ID() );
    assert( _colTypes[44] == DbTypeIDs<V45>::ID() );
    assert( _colTypes[45] == DbTypeIDs<V46>::ID() );
    assert( _colTypes[46] == DbTypeIDs<V47>::ID() );
    assert( _colTypes[47] == DbTypeIDs<V48>::ID() );
    assert( _colTypes[48] == DbTypeIDs<V49>::ID() );
    assert( _colTypes[49] == DbTypeIDs<V50>::ID() );
    assert( _colTypes[50] == DbTypeIDs<V51>::ID() );
    ((List<V1>*)_colDatas[0])->Add(v1);
    ((List<V2>*)_colDatas[1])->Add(v2);
    ((List<V3>*)_colDatas[2])->Add(v3);
    ((List<V4>*)_colDatas[3])->Add(v4);
    ((List<V5>*)_colDatas[4])->Add(v5);
    ((List<V6>*)_colDatas[5])->Add(v6);
    ((List<V7>*)_colDatas[6])->Add(v7);
    ((List<V8>*)_colDatas[7])->Add(v8);
    ((List<V9>*)_colDatas[8])->Add(v9);
    ((List<V10>*)_colDatas[9])->Add(v10);
    ((List<V11>*)_colDatas[10])->Add(v11);
    ((List<V12>*)_colDatas[11])->Add(v12);
    ((List<V13>*)_colDatas[12])->Add(v13);
    ((List<V14>*)_colDatas[13])->Add(v14);
    ((List<V15>*)_colDatas[14])->Add(v15);
    ((List<V16>*)_colDatas[15])->Add(v16);
    ((List<V17>*)_colDatas[16])->Add(v17);
    ((List<V18>*)_colDatas[17])->Add(v18);
    ((List<V19>*)_colDatas[18])->Add(v19);
    ((List<V20>*)_colDatas[19])->Add(v20);
    ((List<V21>*)_colDatas[20])->Add(v21);
    ((List<V22>*)_colDatas[21])->Add(v22);
    ((List<V23>*)_colDatas[22])->Add(v23);
    ((List<V24>*)_colDatas[23])->Add(v24);
    ((List<V25>*)_colDatas[24])->Add(v25);
    ((List<V26>*)_colDatas[25])->Add(v26);
    ((List<V27>*)_colDatas[26])->Add(v27);
    ((List<V28>*)_colDatas[27])->Add(v28);
    ((List<V29>*)_colDatas[28])->Add(v29);
    ((List<V30>*)_colDatas[29])->Add(v30);
    ((List<V31>*)_colDatas[30])->Add(v31);
    ((List<V32>*)_colDatas[31])->Add(v32);
    ((List<V33>*)_colDatas[32])->Add(v33);
    ((List<V34>*)_colDatas[33])->Add(v34);
    ((List<V35>*)_colDatas[34])->Add(v35);
    ((List<V36>*)_colDatas[35])->Add(v36);
    ((List<V37>*)_colDatas[36])->Add(v37);
    ((List<V38>*)_colDatas[37])->Add(v38);
    ((List<V39>*)_colDatas[38])->Add(v39);
    ((List<V40>*)_colDatas[39])->Add(v40);
    ((List<V41>*)_colDatas[40])->Add(v41);
    ((List<V42>*)_colDatas[41])->Add(v42);
    ((List<V43>*)_colDatas[42])->Add(v43);
    ((List<V44>*)_colDatas[43])->Add(v44);
    ((List<V45>*)_colDatas[44])->Add(v45);
    ((List<V46>*)_colDatas[45])->Add(v46);
    ((List<V47>*)_colDatas[46])->Add(v47);
    ((List<V48>*)_colDatas[47])->Add(v48);
    ((List<V49>*)_colDatas[48])->Add(v49);
    ((List<V50>*)_colDatas[49])->Add(v50);
    ((List<V51>*)_colDatas[50])->Add(v51);
    ++_rowCount;
    return *this;
}
template<typename V1, typename V2, typename V3, typename V4, typename V5, typename V6, typename V7, typename V8, typename V9, typename V10, typename V11, typename V12, typename V13, typename V14, typename V15, typename V16, typename V17, typename V18, typename V19, typename V20, typename V21, typename V22, typename V23, typename V24, typename V25, typename V26, typename V27, typename V28, typename V29, typename V30, typename V31, typename V32, typename V33, typename V34, typename V35, typename V36, typename V37, typename V38, typename V39, typename V40, typename V41, typename V42, typename V43, typename V44, typename V45, typename V46, typename V47, typename V48, typename V49, typename V50, typename V51, typename V52>
DbTable & DbTable::AddRow(V1 const &v1, V2 const &v2, V3 const &v3, V4 const &v4, V5 const &v5, V6 const &v6, V7 const &v7, V8 const &v8, V9 const &v9, V10 const &v10, V11 const &v11, V12 const &v12, V13 const &v13, V14 const &v14, V15 const &v15, V16 const &v16, V17 const &v17, V18 const &v18, V19 const &v19, V20 const &v20, V21 const &v21, V22 const &v22, V23 const &v23, V24 const &v24, V25 const &v25, V26 const &v26, V27 const &v27, V28 const &v28, V29 const &v29, V30 const &v30, V31 const &v31, V32 const &v32, V33 const &v33, V34 const &v34, V35 const &v35, V36 const &v36, V37 const &v37, V38 const &v38, V39 const &v39, V40 const &v40, V41 const &v41, V42 const &v42, V43 const &v43, V44 const &v44, V45 const &v45, V46 const &v46, V47 const &v47, V48 const &v48, V49 const &v49, V50 const &v50, V51 const &v51, V52 const &v52) {
    assert( _colNames.Length() == 52 );
    assert( _colTypes[0] == DbTypeIDs<V1>::ID() );
    assert( _colTypes[1] == DbTypeIDs<V2>::ID() );
    assert( _colTypes[2] == DbTypeIDs<V3>::ID() );
    assert( _colTypes[3] == DbTypeIDs<V4>::ID() );
    assert( _colTypes[4] == DbTypeIDs<V5>::ID() );
    assert( _colTypes[5] == DbTypeIDs<V6>::ID() );
    assert( _colTypes[6] == DbTypeIDs<V7>::ID() );
    assert( _colTypes[7] == DbTypeIDs<V8>::ID() );
    assert( _colTypes[8] == DbTypeIDs<V9>::ID() );
    assert( _colTypes[9] == DbTypeIDs<V10>::ID() );
    assert( _colTypes[10] == DbTypeIDs<V11>::ID() );
    assert( _colTypes[11] == DbTypeIDs<V12>::ID() );
    assert( _colTypes[12] == DbTypeIDs<V13>::ID() );
    assert( _colTypes[13] == DbTypeIDs<V14>::ID() );
    assert( _colTypes[14] == DbTypeIDs<V15>::ID() );
    assert( _colTypes[15] == DbTypeIDs<V16>::ID() );
    assert( _colTypes[16] == DbTypeIDs<V17>::ID() );
    assert( _colTypes[17] == DbTypeIDs<V18>::ID() );
    assert( _colTypes[18] == DbTypeIDs<V19>::ID() );
    assert( _colTypes[19] == DbTypeIDs<V20>::ID() );
    assert( _colTypes[20] == DbTypeIDs<V21>::ID() );
    assert( _colTypes[21] == DbTypeIDs<V22>::ID() );
    assert( _colTypes[22] == DbTypeIDs<V23>::ID() );
    assert( _colTypes[23] == DbTypeIDs<V24>::ID() );
    assert( _colTypes[24] == DbTypeIDs<V25>::ID() );
    assert( _colTypes[25] == DbTypeIDs<V26>::ID() );
    assert( _colTypes[26] == DbTypeIDs<V27>::ID() );
    assert( _colTypes[27] == DbTypeIDs<V28>::ID() );
    assert( _colTypes[28] == DbTypeIDs<V29>::ID() );
    assert( _colTypes[29] == DbTypeIDs<V30>::ID() );
    assert( _colTypes[30] == DbTypeIDs<V31>::ID() );
    assert( _colTypes[31] == DbTypeIDs<V32>::ID() );
    assert( _colTypes[32] == DbTypeIDs<V33>::ID() );
    assert( _colTypes[33] == DbTypeIDs<V34>::ID() );
    assert( _colTypes[34] == DbTypeIDs<V35>::ID() );
    assert( _colTypes[35] == DbTypeIDs<V36>::ID() );
    assert( _colTypes[36] == DbTypeIDs<V37>::ID() );
    assert( _colTypes[37] == DbTypeIDs<V38>::ID() );
    assert( _colTypes[38] == DbTypeIDs<V39>::ID() );
    assert( _colTypes[39] == DbTypeIDs<V40>::ID() );
    assert( _colTypes[40] == DbTypeIDs<V41>::ID() );
    assert( _colTypes[41] == DbTypeIDs<V42>::ID() );
    assert( _colTypes[42] == DbTypeIDs<V43>::ID() );
    assert( _colTypes[43] == DbTypeIDs<V44>::ID() );
    assert( _colTypes[44] == DbTypeIDs<V45>::ID() );
    assert( _colTypes[45] == DbTypeIDs<V46>::ID() );
    assert( _colTypes[46] == DbTypeIDs<V47>::ID() );
    assert( _colTypes[47] == DbTypeIDs<V48>::ID() );
    assert( _colTypes[48] == DbTypeIDs<V49>::ID() );
    assert( _colTypes[49] == DbTypeIDs<V50>::ID() );
    assert( _colTypes[50] == DbTypeIDs<V51>::ID() );
    assert( _colTypes[51] == DbTypeIDs<V52>::ID() );
    ((List<V1>*)_colDatas[0])->Add(v1);
    ((List<V2>*)_colDatas[1])->Add(v2);
    ((List<V3>*)_colDatas[2])->Add(v3);
    ((List<V4>*)_colDatas[3])->Add(v4);
    ((List<V5>*)_colDatas[4])->Add(v5);
    ((List<V6>*)_colDatas[5])->Add(v6);
    ((List<V7>*)_colDatas[6])->Add(v7);
    ((List<V8>*)_colDatas[7])->Add(v8);
    ((List<V9>*)_colDatas[8])->Add(v9);
    ((List<V10>*)_colDatas[9])->Add(v10);
    ((List<V11>*)_colDatas[10])->Add(v11);
    ((List<V12>*)_colDatas[11])->Add(v12);
    ((List<V13>*)_colDatas[12])->Add(v13);
    ((List<V14>*)_colDatas[13])->Add(v14);
    ((List<V15>*)_colDatas[14])->Add(v15);
    ((List<V16>*)_colDatas[15])->Add(v16);
    ((List<V17>*)_colDatas[16])->Add(v17);
    ((List<V18>*)_colDatas[17])->Add(v18);
    ((List<V19>*)_colDatas[18])->Add(v19);
    ((List<V20>*)_colDatas[19])->Add(v20);
    ((List<V21>*)_colDatas[20])->Add(v21);
    ((List<V22>*)_colDatas[21])->Add(v22);
    ((List<V23>*)_colDatas[22])->Add(v23);
    ((List<V24>*)_colDatas[23])->Add(v24);
    ((List<V25>*)_colDatas[24])->Add(v25);
    ((List<V26>*)_colDatas[25])->Add(v26);
    ((List<V27>*)_colDatas[26])->Add(v27);
    ((List<V28>*)_colDatas[27])->Add(v28);
    ((List<V29>*)_colDatas[28])->Add(v29);
    ((List<V30>*)_colDatas[29])->Add(v30);
    ((List<V31>*)_colDatas[30])->Add(v31);
    ((List<V32>*)_colDatas[31])->Add(v32);
    ((List<V33>*)_colDatas[32])->Add(v33);
    ((List<V34>*)_colDatas[33])->Add(v34);
    ((List<V35>*)_colDatas[34])->Add(v35);
    ((List<V36>*)_colDatas[35])->Add(v36);
    ((List<V37>*)_colDatas[36])->Add(v37);
    ((List<V38>*)_colDatas[37])->Add(v38);
    ((List<V39>*)_colDatas[38])->Add(v39);
    ((List<V40>*)_colDatas[39])->Add(v40);
    ((List<V41>*)_colDatas[40])->Add(v41);
    ((List<V42>*)_colDatas[41])->Add(v42);
    ((List<V43>*)_colDatas[42])->Add(v43);
    ((List<V44>*)_colDatas[43])->Add(v44);
    ((List<V45>*)_colDatas[44])->Add(v45);
    ((List<V46>*)_colDatas[45])->Add(v46);
    ((List<V47>*)_colDatas[46])->Add(v47);
    ((List<V48>*)_colDatas[47])->Add(v48);
    ((List<V49>*)_colDatas[48])->Add(v49);
    ((List<V50>*)_colDatas[49])->Add(v50);
    ((List<V51>*)_colDatas[50])->Add(v51);
    ((List<V52>*)_colDatas[51])->Add(v52);
    ++_rowCount;
    return *this;
}
template<typename V1, typename V2, typename V3, typename V4, typename V5, typename V6, typename V7, typename V8, typename V9, typename V10, typename V11, typename V12, typename V13, typename V14, typename V15, typename V16, typename V17, typename V18, typename V19, typename V20, typename V21, typename V22, typename V23, typename V24, typename V25, typename V26, typename V27, typename V28, typename V29, typename V30, typename V31, typename V32, typename V33, typename V34, typename V35, typename V36, typename V37, typename V38, typename V39, typename V40, typename V41, typename V42, typename V43, typename V44, typename V45, typename V46, typename V47, typename V48, typename V49, typename V50, typename V51, typename V52, typename V53>
DbTable & DbTable::AddRow(V1 const &v1, V2 const &v2, V3 const &v3, V4 const &v4, V5 const &v5, V6 const &v6, V7 const &v7, V8 const &v8, V9 const &v9, V10 const &v10, V11 const &v11, V12 const &v12, V13 const &v13, V14 const &v14, V15 const &v15, V16 const &v16, V17 const &v17, V18 const &v18, V19 const &v19, V20 const &v20, V21 const &v21, V22 const &v22, V23 const &v23, V24 const &v24, V25 const &v25, V26 const &v26, V27 const &v27, V28 const &v28, V29 const &v29, V30 const &v30, V31 const &v31, V32 const &v32, V33 const &v33, V34 const &v34, V35 const &v35, V36 const &v36, V37 const &v37, V38 const &v38, V39 const &v39, V40 const &v40, V41 const &v41, V42 const &v42, V43 const &v43, V44 const &v44, V45 const &v45, V46 const &v46, V47 const &v47, V48 const &v48, V49 const &v49, V50 const &v50, V51 const &v51, V52 const &v52, V53 const &v53) {
    assert( _colNames.Length() == 53 );
    assert( _colTypes[0] == DbTypeIDs<V1>::ID() );
    assert( _colTypes[1] == DbTypeIDs<V2>::ID() );
    assert( _colTypes[2] == DbTypeIDs<V3>::ID() );
    assert( _colTypes[3] == DbTypeIDs<V4>::ID() );
    assert( _colTypes[4] == DbTypeIDs<V5>::ID() );
    assert( _colTypes[5] == DbTypeIDs<V6>::ID() );
    assert( _colTypes[6] == DbTypeIDs<V7>::ID() );
    assert( _colTypes[7] == DbTypeIDs<V8>::ID() );
    assert( _colTypes[8] == DbTypeIDs<V9>::ID() );
    assert( _colTypes[9] == DbTypeIDs<V10>::ID() );
    assert( _colTypes[10] == DbTypeIDs<V11>::ID() );
    assert( _colTypes[11] == DbTypeIDs<V12>::ID() );
    assert( _colTypes[12] == DbTypeIDs<V13>::ID() );
    assert( _colTypes[13] == DbTypeIDs<V14>::ID() );
    assert( _colTypes[14] == DbTypeIDs<V15>::ID() );
    assert( _colTypes[15] == DbTypeIDs<V16>::ID() );
    assert( _colTypes[16] == DbTypeIDs<V17>::ID() );
    assert( _colTypes[17] == DbTypeIDs<V18>::ID() );
    assert( _colTypes[18] == DbTypeIDs<V19>::ID() );
    assert( _colTypes[19] == DbTypeIDs<V20>::ID() );
    assert( _colTypes[20] == DbTypeIDs<V21>::ID() );
    assert( _colTypes[21] == DbTypeIDs<V22>::ID() );
    assert( _colTypes[22] == DbTypeIDs<V23>::ID() );
    assert( _colTypes[23] == DbTypeIDs<V24>::ID() );
    assert( _colTypes[24] == DbTypeIDs<V25>::ID() );
    assert( _colTypes[25] == DbTypeIDs<V26>::ID() );
    assert( _colTypes[26] == DbTypeIDs<V27>::ID() );
    assert( _colTypes[27] == DbTypeIDs<V28>::ID() );
    assert( _colTypes[28] == DbTypeIDs<V29>::ID() );
    assert( _colTypes[29] == DbTypeIDs<V30>::ID() );
    assert( _colTypes[30] == DbTypeIDs<V31>::ID() );
    assert( _colTypes[31] == DbTypeIDs<V32>::ID() );
    assert( _colTypes[32] == DbTypeIDs<V33>::ID() );
    assert( _colTypes[33] == DbTypeIDs<V34>::ID() );
    assert( _colTypes[34] == DbTypeIDs<V35>::ID() );
    assert( _colTypes[35] == DbTypeIDs<V36>::ID() );
    assert( _colTypes[36] == DbTypeIDs<V37>::ID() );
    assert( _colTypes[37] == DbTypeIDs<V38>::ID() );
    assert( _colTypes[38] == DbTypeIDs<V39>::ID() );
    assert( _colTypes[39] == DbTypeIDs<V40>::ID() );
    assert( _colTypes[40] == DbTypeIDs<V41>::ID() );
    assert( _colTypes[41] == DbTypeIDs<V42>::ID() );
    assert( _colTypes[42] == DbTypeIDs<V43>::ID() );
    assert( _colTypes[43] == DbTypeIDs<V44>::ID() );
    assert( _colTypes[44] == DbTypeIDs<V45>::ID() );
    assert( _colTypes[45] == DbTypeIDs<V46>::ID() );
    assert( _colTypes[46] == DbTypeIDs<V47>::ID() );
    assert( _colTypes[47] == DbTypeIDs<V48>::ID() );
    assert( _colTypes[48] == DbTypeIDs<V49>::ID() );
    assert( _colTypes[49] == DbTypeIDs<V50>::ID() );
    assert( _colTypes[50] == DbTypeIDs<V51>::ID() );
    assert( _colTypes[51] == DbTypeIDs<V52>::ID() );
    assert( _colTypes[52] == DbTypeIDs<V53>::ID() );
    ((List<V1>*)_colDatas[0])->Add(v1);
    ((List<V2>*)_colDatas[1])->Add(v2);
    ((List<V3>*)_colDatas[2])->Add(v3);
    ((List<V4>*)_colDatas[3])->Add(v4);
    ((List<V5>*)_colDatas[4])->Add(v5);
    ((List<V6>*)_colDatas[5])->Add(v6);
    ((List<V7>*)_colDatas[6])->Add(v7);
    ((List<V8>*)_colDatas[7])->Add(v8);
    ((List<V9>*)_colDatas[8])->Add(v9);
    ((List<V10>*)_colDatas[9])->Add(v10);
    ((List<V11>*)_colDatas[10])->Add(v11);
    ((List<V12>*)_colDatas[11])->Add(v12);
    ((List<V13>*)_colDatas[12])->Add(v13);
    ((List<V14>*)_colDatas[13])->Add(v14);
    ((List<V15>*)_colDatas[14])->Add(v15);
    ((List<V16>*)_colDatas[15])->Add(v16);
    ((List<V17>*)_colDatas[16])->Add(v17);
    ((List<V18>*)_colDatas[17])->Add(v18);
    ((List<V19>*)_colDatas[18])->Add(v19);
    ((List<V20>*)_colDatas[19])->Add(v20);
    ((List<V21>*)_colDatas[20])->Add(v21);
    ((List<V22>*)_colDatas[21])->Add(v22);
    ((List<V23>*)_colDatas[22])->Add(v23);
    ((List<V24>*)_colDatas[23])->Add(v24);
    ((List<V25>*)_colDatas[24])->Add(v25);
    ((List<V26>*)_colDatas[25])->Add(v26);
    ((List<V27>*)_colDatas[26])->Add(v27);
    ((List<V28>*)_colDatas[27])->Add(v28);
    ((List<V29>*)_colDatas[28])->Add(v29);
    ((List<V30>*)_colDatas[29])->Add(v30);
    ((List<V31>*)_colDatas[30])->Add(v31);
    ((List<V32>*)_colDatas[31])->Add(v32);
    ((List<V33>*)_colDatas[32])->Add(v33);
    ((List<V34>*)_colDatas[33])->Add(v34);
    ((List<V35>*)_colDatas[34])->Add(v35);
    ((List<V36>*)_colDatas[35])->Add(v36);
    ((List<V37>*)_colDatas[36])->Add(v37);
    ((List<V38>*)_colDatas[37])->Add(v38);
    ((List<V39>*)_colDatas[38])->Add(v39);
    ((List<V40>*)_colDatas[39])->Add(v40);
    ((List<V41>*)_colDatas[40])->Add(v41);
    ((List<V42>*)_colDatas[41])->Add(v42);
    ((List<V43>*)_colDatas[42])->Add(v43);
    ((List<V44>*)_colDatas[43])->Add(v44);
    ((List<V45>*)_colDatas[44])->Add(v45);
    ((List<V46>*)_colDatas[45])->Add(v46);
    ((List<V47>*)_colDatas[46])->Add(v47);
    ((List<V48>*)_colDatas[47])->Add(v48);
    ((List<V49>*)_colDatas[48])->Add(v49);
    ((List<V50>*)_colDatas[49])->Add(v50);
    ((List<V51>*)_colDatas[50])->Add(v51);
    ((List<V52>*)_colDatas[51])->Add(v52);
    ((List<V53>*)_colDatas[52])->Add(v53);
    ++_rowCount;
    return *this;
}
template<typename V1, typename V2, typename V3, typename V4, typename V5, typename V6, typename V7, typename V8, typename V9, typename V10, typename V11, typename V12, typename V13, typename V14, typename V15, typename V16, typename V17, typename V18, typename V19, typename V20, typename V21, typename V22, typename V23, typename V24, typename V25, typename V26, typename V27, typename V28, typename V29, typename V30, typename V31, typename V32, typename V33, typename V34, typename V35, typename V36, typename V37, typename V38, typename V39, typename V40, typename V41, typename V42, typename V43, typename V44, typename V45, typename V46, typename V47, typename V48, typename V49, typename V50, typename V51, typename V52, typename V53, typename V54>
DbTable & DbTable::AddRow(V1 const &v1, V2 const &v2, V3 const &v3, V4 const &v4, V5 const &v5, V6 const &v6, V7 const &v7, V8 const &v8, V9 const &v9, V10 const &v10, V11 const &v11, V12 const &v12, V13 const &v13, V14 const &v14, V15 const &v15, V16 const &v16, V17 const &v17, V18 const &v18, V19 const &v19, V20 const &v20, V21 const &v21, V22 const &v22, V23 const &v23, V24 const &v24, V25 const &v25, V26 const &v26, V27 const &v27, V28 const &v28, V29 const &v29, V30 const &v30, V31 const &v31, V32 const &v32, V33 const &v33, V34 const &v34, V35 const &v35, V36 const &v36, V37 const &v37, V38 const &v38, V39 const &v39, V40 const &v40, V41 const &v41, V42 const &v42, V43 const &v43, V44 const &v44, V45 const &v45, V46 const &v46, V47 const &v47, V48 const &v48, V49 const &v49, V50 const &v50, V51 const &v51, V52 const &v52, V53 const &v53, V54 const &v54) {
    assert( _colNames.Length() == 54 );
    assert( _colTypes[0] == DbTypeIDs<V1>::ID() );
    assert( _colTypes[1] == DbTypeIDs<V2>::ID() );
    assert( _colTypes[2] == DbTypeIDs<V3>::ID() );
    assert( _colTypes[3] == DbTypeIDs<V4>::ID() );
    assert( _colTypes[4] == DbTypeIDs<V5>::ID() );
    assert( _colTypes[5] == DbTypeIDs<V6>::ID() );
    assert( _colTypes[6] == DbTypeIDs<V7>::ID() );
    assert( _colTypes[7] == DbTypeIDs<V8>::ID() );
    assert( _colTypes[8] == DbTypeIDs<V9>::ID() );
    assert( _colTypes[9] == DbTypeIDs<V10>::ID() );
    assert( _colTypes[10] == DbTypeIDs<V11>::ID() );
    assert( _colTypes[11] == DbTypeIDs<V12>::ID() );
    assert( _colTypes[12] == DbTypeIDs<V13>::ID() );
    assert( _colTypes[13] == DbTypeIDs<V14>::ID() );
    assert( _colTypes[14] == DbTypeIDs<V15>::ID() );
    assert( _colTypes[15] == DbTypeIDs<V16>::ID() );
    assert( _colTypes[16] == DbTypeIDs<V17>::ID() );
    assert( _colTypes[17] == DbTypeIDs<V18>::ID() );
    assert( _colTypes[18] == DbTypeIDs<V19>::ID() );
    assert( _colTypes[19] == DbTypeIDs<V20>::ID() );
    assert( _colTypes[20] == DbTypeIDs<V21>::ID() );
    assert( _colTypes[21] == DbTypeIDs<V22>::ID() );
    assert( _colTypes[22] == DbTypeIDs<V23>::ID() );
    assert( _colTypes[23] == DbTypeIDs<V24>::ID() );
    assert( _colTypes[24] == DbTypeIDs<V25>::ID() );
    assert( _colTypes[25] == DbTypeIDs<V26>::ID() );
    assert( _colTypes[26] == DbTypeIDs<V27>::ID() );
    assert( _colTypes[27] == DbTypeIDs<V28>::ID() );
    assert( _colTypes[28] == DbTypeIDs<V29>::ID() );
    assert( _colTypes[29] == DbTypeIDs<V30>::ID() );
    assert( _colTypes[30] == DbTypeIDs<V31>::ID() );
    assert( _colTypes[31] == DbTypeIDs<V32>::ID() );
    assert( _colTypes[32] == DbTypeIDs<V33>::ID() );
    assert( _colTypes[33] == DbTypeIDs<V34>::ID() );
    assert( _colTypes[34] == DbTypeIDs<V35>::ID() );
    assert( _colTypes[35] == DbTypeIDs<V36>::ID() );
    assert( _colTypes[36] == DbTypeIDs<V37>::ID() );
    assert( _colTypes[37] == DbTypeIDs<V38>::ID() );
    assert( _colTypes[38] == DbTypeIDs<V39>::ID() );
    assert( _colTypes[39] == DbTypeIDs<V40>::ID() );
    assert( _colTypes[40] == DbTypeIDs<V41>::ID() );
    assert( _colTypes[41] == DbTypeIDs<V42>::ID() );
    assert( _colTypes[42] == DbTypeIDs<V43>::ID() );
    assert( _colTypes[43] == DbTypeIDs<V44>::ID() );
    assert( _colTypes[44] == DbTypeIDs<V45>::ID() );
    assert( _colTypes[45] == DbTypeIDs<V46>::ID() );
    assert( _colTypes[46] == DbTypeIDs<V47>::ID() );
    assert( _colTypes[47] == DbTypeIDs<V48>::ID() );
    assert( _colTypes[48] == DbTypeIDs<V49>::ID() );
    assert( _colTypes[49] == DbTypeIDs<V50>::ID() );
    assert( _colTypes[50] == DbTypeIDs<V51>::ID() );
    assert( _colTypes[51] == DbTypeIDs<V52>::ID() );
    assert( _colTypes[52] == DbTypeIDs<V53>::ID() );
    assert( _colTypes[53] == DbTypeIDs<V54>::ID() );
    ((List<V1>*)_colDatas[0])->Add(v1);
    ((List<V2>*)_colDatas[1])->Add(v2);
    ((List<V3>*)_colDatas[2])->Add(v3);
    ((List<V4>*)_colDatas[3])->Add(v4);
    ((List<V5>*)_colDatas[4])->Add(v5);
    ((List<V6>*)_colDatas[5])->Add(v6);
    ((List<V7>*)_colDatas[6])->Add(v7);
    ((List<V8>*)_colDatas[7])->Add(v8);
    ((List<V9>*)_colDatas[8])->Add(v9);
    ((List<V10>*)_colDatas[9])->Add(v10);
    ((List<V11>*)_colDatas[10])->Add(v11);
    ((List<V12>*)_colDatas[11])->Add(v12);
    ((List<V13>*)_colDatas[12])->Add(v13);
    ((List<V14>*)_colDatas[13])->Add(v14);
    ((List<V15>*)_colDatas[14])->Add(v15);
    ((List<V16>*)_colDatas[15])->Add(v16);
    ((List<V17>*)_colDatas[16])->Add(v17);
    ((List<V18>*)_colDatas[17])->Add(v18);
    ((List<V19>*)_colDatas[18])->Add(v19);
    ((List<V20>*)_colDatas[19])->Add(v20);
    ((List<V21>*)_colDatas[20])->Add(v21);
    ((List<V22>*)_colDatas[21])->Add(v22);
    ((List<V23>*)_colDatas[22])->Add(v23);
    ((List<V24>*)_colDatas[23])->Add(v24);
    ((List<V25>*)_colDatas[24])->Add(v25);
    ((List<V26>*)_colDatas[25])->Add(v26);
    ((List<V27>*)_colDatas[26])->Add(v27);
    ((List<V28>*)_colDatas[27])->Add(v28);
    ((List<V29>*)_colDatas[28])->Add(v29);
    ((List<V30>*)_colDatas[29])->Add(v30);
    ((List<V31>*)_colDatas[30])->Add(v31);
    ((List<V32>*)_colDatas[31])->Add(v32);
    ((List<V33>*)_colDatas[32])->Add(v33);
    ((List<V34>*)_colDatas[33])->Add(v34);
    ((List<V35>*)_colDatas[34])->Add(v35);
    ((List<V36>*)_colDatas[35])->Add(v36);
    ((List<V37>*)_colDatas[36])->Add(v37);
    ((List<V38>*)_colDatas[37])->Add(v38);
    ((List<V39>*)_colDatas[38])->Add(v39);
    ((List<V40>*)_colDatas[39])->Add(v40);
    ((List<V41>*)_colDatas[40])->Add(v41);
    ((List<V42>*)_colDatas[41])->Add(v42);
    ((List<V43>*)_colDatas[42])->Add(v43);
    ((List<V44>*)_colDatas[43])->Add(v44);
    ((List<V45>*)_colDatas[44])->Add(v45);
    ((List<V46>*)_colDatas[45])->Add(v46);
    ((List<V47>*)_colDatas[46])->Add(v47);
    ((List<V48>*)_colDatas[47])->Add(v48);
    ((List<V49>*)_colDatas[48])->Add(v49);
    ((List<V50>*)_colDatas[49])->Add(v50);
    ((List<V51>*)_colDatas[50])->Add(v51);
    ((List<V52>*)_colDatas[51])->Add(v52);
    ((List<V53>*)_colDatas[52])->Add(v53);
    ((List<V54>*)_colDatas[53])->Add(v54);
    ++_rowCount;
    return *this;
}
template<typename V1, typename V2, typename V3, typename V4, typename V5, typename V6, typename V7, typename V8, typename V9, typename V10, typename V11, typename V12, typename V13, typename V14, typename V15, typename V16, typename V17, typename V18, typename V19, typename V20, typename V21, typename V22, typename V23, typename V24, typename V25, typename V26, typename V27, typename V28, typename V29, typename V30, typename V31, typename V32, typename V33, typename V34, typename V35, typename V36, typename V37, typename V38, typename V39, typename V40, typename V41, typename V42, typename V43, typename V44, typename V45, typename V46, typename V47, typename V48, typename V49, typename V50, typename V51, typename V52, typename V53, typename V54, typename V55>
DbTable & DbTable::AddRow(V1 const &v1, V2 const &v2, V3 const &v3, V4 const &v4, V5 const &v5, V6 const &v6, V7 const &v7, V8 const &v8, V9 const &v9, V10 const &v10, V11 const &v11, V12 const &v12, V13 const &v13, V14 const &v14, V15 const &v15, V16 const &v16, V17 const &v17, V18 const &v18, V19 const &v19, V20 const &v20, V21 const &v21, V22 const &v22, V23 const &v23, V24 const &v24, V25 const &v25, V26 const &v26, V27 const &v27, V28 const &v28, V29 const &v29, V30 const &v30, V31 const &v31, V32 const &v32, V33 const &v33, V34 const &v34, V35 const &v35, V36 const &v36, V37 const &v37, V38 const &v38, V39 const &v39, V40 const &v40, V41 const &v41, V42 const &v42, V43 const &v43, V44 const &v44, V45 const &v45, V46 const &v46, V47 const &v47, V48 const &v48, V49 const &v49, V50 const &v50, V51 const &v51, V52 const &v52, V53 const &v53, V54 const &v54, V55 const &v55) {
    assert( _colNames.Length() == 55 );
    assert( _colTypes[0] == DbTypeIDs<V1>::ID() );
    assert( _colTypes[1] == DbTypeIDs<V2>::ID() );
    assert( _colTypes[2] == DbTypeIDs<V3>::ID() );
    assert( _colTypes[3] == DbTypeIDs<V4>::ID() );
    assert( _colTypes[4] == DbTypeIDs<V5>::ID() );
    assert( _colTypes[5] == DbTypeIDs<V6>::ID() );
    assert( _colTypes[6] == DbTypeIDs<V7>::ID() );
    assert( _colTypes[7] == DbTypeIDs<V8>::ID() );
    assert( _colTypes[8] == DbTypeIDs<V9>::ID() );
    assert( _colTypes[9] == DbTypeIDs<V10>::ID() );
    assert( _colTypes[10] == DbTypeIDs<V11>::ID() );
    assert( _colTypes[11] == DbTypeIDs<V12>::ID() );
    assert( _colTypes[12] == DbTypeIDs<V13>::ID() );
    assert( _colTypes[13] == DbTypeIDs<V14>::ID() );
    assert( _colTypes[14] == DbTypeIDs<V15>::ID() );
    assert( _colTypes[15] == DbTypeIDs<V16>::ID() );
    assert( _colTypes[16] == DbTypeIDs<V17>::ID() );
    assert( _colTypes[17] == DbTypeIDs<V18>::ID() );
    assert( _colTypes[18] == DbTypeIDs<V19>::ID() );
    assert( _colTypes[19] == DbTypeIDs<V20>::ID() );
    assert( _colTypes[20] == DbTypeIDs<V21>::ID() );
    assert( _colTypes[21] == DbTypeIDs<V22>::ID() );
    assert( _colTypes[22] == DbTypeIDs<V23>::ID() );
    assert( _colTypes[23] == DbTypeIDs<V24>::ID() );
    assert( _colTypes[24] == DbTypeIDs<V25>::ID() );
    assert( _colTypes[25] == DbTypeIDs<V26>::ID() );
    assert( _colTypes[26] == DbTypeIDs<V27>::ID() );
    assert( _colTypes[27] == DbTypeIDs<V28>::ID() );
    assert( _colTypes[28] == DbTypeIDs<V29>::ID() );
    assert( _colTypes[29] == DbTypeIDs<V30>::ID() );
    assert( _colTypes[30] == DbTypeIDs<V31>::ID() );
    assert( _colTypes[31] == DbTypeIDs<V32>::ID() );
    assert( _colTypes[32] == DbTypeIDs<V33>::ID() );
    assert( _colTypes[33] == DbTypeIDs<V34>::ID() );
    assert( _colTypes[34] == DbTypeIDs<V35>::ID() );
    assert( _colTypes[35] == DbTypeIDs<V36>::ID() );
    assert( _colTypes[36] == DbTypeIDs<V37>::ID() );
    assert( _colTypes[37] == DbTypeIDs<V38>::ID() );
    assert( _colTypes[38] == DbTypeIDs<V39>::ID() );
    assert( _colTypes[39] == DbTypeIDs<V40>::ID() );
    assert( _colTypes[40] == DbTypeIDs<V41>::ID() );
    assert( _colTypes[41] == DbTypeIDs<V42>::ID() );
    assert( _colTypes[42] == DbTypeIDs<V43>::ID() );
    assert( _colTypes[43] == DbTypeIDs<V44>::ID() );
    assert( _colTypes[44] == DbTypeIDs<V45>::ID() );
    assert( _colTypes[45] == DbTypeIDs<V46>::ID() );
    assert( _colTypes[46] == DbTypeIDs<V47>::ID() );
    assert( _colTypes[47] == DbTypeIDs<V48>::ID() );
    assert( _colTypes[48] == DbTypeIDs<V49>::ID() );
    assert( _colTypes[49] == DbTypeIDs<V50>::ID() );
    assert( _colTypes[50] == DbTypeIDs<V51>::ID() );
    assert( _colTypes[51] == DbTypeIDs<V52>::ID() );
    assert( _colTypes[52] == DbTypeIDs<V53>::ID() );
    assert( _colTypes[53] == DbTypeIDs<V54>::ID() );
    assert( _colTypes[54] == DbTypeIDs<V55>::ID() );
    ((List<V1>*)_colDatas[0])->Add(v1);
    ((List<V2>*)_colDatas[1])->Add(v2);
    ((List<V3>*)_colDatas[2])->Add(v3);
    ((List<V4>*)_colDatas[3])->Add(v4);
    ((List<V5>*)_colDatas[4])->Add(v5);
    ((List<V6>*)_colDatas[5])->Add(v6);
    ((List<V7>*)_colDatas[6])->Add(v7);
    ((List<V8>*)_colDatas[7])->Add(v8);
    ((List<V9>*)_colDatas[8])->Add(v9);
    ((List<V10>*)_colDatas[9])->Add(v10);
    ((List<V11>*)_colDatas[10])->Add(v11);
    ((List<V12>*)_colDatas[11])->Add(v12);
    ((List<V13>*)_colDatas[12])->Add(v13);
    ((List<V14>*)_colDatas[13])->Add(v14);
    ((List<V15>*)_colDatas[14])->Add(v15);
    ((List<V16>*)_colDatas[15])->Add(v16);
    ((List<V17>*)_colDatas[16])->Add(v17);
    ((List<V18>*)_colDatas[17])->Add(v18);
    ((List<V19>*)_colDatas[18])->Add(v19);
    ((List<V20>*)_colDatas[19])->Add(v20);
    ((List<V21>*)_colDatas[20])->Add(v21);
    ((List<V22>*)_colDatas[21])->Add(v22);
    ((List<V23>*)_colDatas[22])->Add(v23);
    ((List<V24>*)_colDatas[23])->Add(v24);
    ((List<V25>*)_colDatas[24])->Add(v25);
    ((List<V26>*)_colDatas[25])->Add(v26);
    ((List<V27>*)_colDatas[26])->Add(v27);
    ((List<V28>*)_colDatas[27])->Add(v28);
    ((List<V29>*)_colDatas[28])->Add(v29);
    ((List<V30>*)_colDatas[29])->Add(v30);
    ((List<V31>*)_colDatas[30])->Add(v31);
    ((List<V32>*)_colDatas[31])->Add(v32);
    ((List<V33>*)_colDatas[32])->Add(v33);
    ((List<V34>*)_colDatas[33])->Add(v34);
    ((List<V35>*)_colDatas[34])->Add(v35);
    ((List<V36>*)_colDatas[35])->Add(v36);
    ((List<V37>*)_colDatas[36])->Add(v37);
    ((List<V38>*)_colDatas[37])->Add(v38);
    ((List<V39>*)_colDatas[38])->Add(v39);
    ((List<V40>*)_colDatas[39])->Add(v40);
    ((List<V41>*)_colDatas[40])->Add(v41);
    ((List<V42>*)_colDatas[41])->Add(v42);
    ((List<V43>*)_colDatas[42])->Add(v43);
    ((List<V44>*)_colDatas[43])->Add(v44);
    ((List<V45>*)_colDatas[44])->Add(v45);
    ((List<V46>*)_colDatas[45])->Add(v46);
    ((List<V47>*)_colDatas[46])->Add(v47);
    ((List<V48>*)_colDatas[47])->Add(v48);
    ((List<V49>*)_colDatas[48])->Add(v49);
    ((List<V50>*)_colDatas[49])->Add(v50);
    ((List<V51>*)_colDatas[50])->Add(v51);
    ((List<V52>*)_colDatas[51])->Add(v52);
    ((List<V53>*)_colDatas[52])->Add(v53);
    ((List<V54>*)_colDatas[53])->Add(v54);
    ((List<V55>*)_colDatas[54])->Add(v55);
    ++_rowCount;
    return *this;
}
template<typename V1, typename V2, typename V3, typename V4, typename V5, typename V6, typename V7, typename V8, typename V9, typename V10, typename V11, typename V12, typename V13, typename V14, typename V15, typename V16, typename V17, typename V18, typename V19, typename V20, typename V21, typename V22, typename V23, typename V24, typename V25, typename V26, typename V27, typename V28, typename V29, typename V30, typename V31, typename V32, typename V33, typename V34, typename V35, typename V36, typename V37, typename V38, typename V39, typename V40, typename V41, typename V42, typename V43, typename V44, typename V45, typename V46, typename V47, typename V48, typename V49, typename V50, typename V51, typename V52, typename V53, typename V54, typename V55, typename V56>
DbTable & DbTable::AddRow(V1 const &v1, V2 const &v2, V3 const &v3, V4 const &v4, V5 const &v5, V6 const &v6, V7 const &v7, V8 const &v8, V9 const &v9, V10 const &v10, V11 const &v11, V12 const &v12, V13 const &v13, V14 const &v14, V15 const &v15, V16 const &v16, V17 const &v17, V18 const &v18, V19 const &v19, V20 const &v20, V21 const &v21, V22 const &v22, V23 const &v23, V24 const &v24, V25 const &v25, V26 const &v26, V27 const &v27, V28 const &v28, V29 const &v29, V30 const &v30, V31 const &v31, V32 const &v32, V33 const &v33, V34 const &v34, V35 const &v35, V36 const &v36, V37 const &v37, V38 const &v38, V39 const &v39, V40 const &v40, V41 const &v41, V42 const &v42, V43 const &v43, V44 const &v44, V45 const &v45, V46 const &v46, V47 const &v47, V48 const &v48, V49 const &v49, V50 const &v50, V51 const &v51, V52 const &v52, V53 const &v53, V54 const &v54, V55 const &v55, V56 const &v56) {
    assert( _colNames.Length() == 56 );
    assert( _colTypes[0] == DbTypeIDs<V1>::ID() );
    assert( _colTypes[1] == DbTypeIDs<V2>::ID() );
    assert( _colTypes[2] == DbTypeIDs<V3>::ID() );
    assert( _colTypes[3] == DbTypeIDs<V4>::ID() );
    assert( _colTypes[4] == DbTypeIDs<V5>::ID() );
    assert( _colTypes[5] == DbTypeIDs<V6>::ID() );
    assert( _colTypes[6] == DbTypeIDs<V7>::ID() );
    assert( _colTypes[7] == DbTypeIDs<V8>::ID() );
    assert( _colTypes[8] == DbTypeIDs<V9>::ID() );
    assert( _colTypes[9] == DbTypeIDs<V10>::ID() );
    assert( _colTypes[10] == DbTypeIDs<V11>::ID() );
    assert( _colTypes[11] == DbTypeIDs<V12>::ID() );
    assert( _colTypes[12] == DbTypeIDs<V13>::ID() );
    assert( _colTypes[13] == DbTypeIDs<V14>::ID() );
    assert( _colTypes[14] == DbTypeIDs<V15>::ID() );
    assert( _colTypes[15] == DbTypeIDs<V16>::ID() );
    assert( _colTypes[16] == DbTypeIDs<V17>::ID() );
    assert( _colTypes[17] == DbTypeIDs<V18>::ID() );
    assert( _colTypes[18] == DbTypeIDs<V19>::ID() );
    assert( _colTypes[19] == DbTypeIDs<V20>::ID() );
    assert( _colTypes[20] == DbTypeIDs<V21>::ID() );
    assert( _colTypes[21] == DbTypeIDs<V22>::ID() );
    assert( _colTypes[22] == DbTypeIDs<V23>::ID() );
    assert( _colTypes[23] == DbTypeIDs<V24>::ID() );
    assert( _colTypes[24] == DbTypeIDs<V25>::ID() );
    assert( _colTypes[25] == DbTypeIDs<V26>::ID() );
    assert( _colTypes[26] == DbTypeIDs<V27>::ID() );
    assert( _colTypes[27] == DbTypeIDs<V28>::ID() );
    assert( _colTypes[28] == DbTypeIDs<V29>::ID() );
    assert( _colTypes[29] == DbTypeIDs<V30>::ID() );
    assert( _colTypes[30] == DbTypeIDs<V31>::ID() );
    assert( _colTypes[31] == DbTypeIDs<V32>::ID() );
    assert( _colTypes[32] == DbTypeIDs<V33>::ID() );
    assert( _colTypes[33] == DbTypeIDs<V34>::ID() );
    assert( _colTypes[34] == DbTypeIDs<V35>::ID() );
    assert( _colTypes[35] == DbTypeIDs<V36>::ID() );
    assert( _colTypes[36] == DbTypeIDs<V37>::ID() );
    assert( _colTypes[37] == DbTypeIDs<V38>::ID() );
    assert( _colTypes[38] == DbTypeIDs<V39>::ID() );
    assert( _colTypes[39] == DbTypeIDs<V40>::ID() );
    assert( _colTypes[40] == DbTypeIDs<V41>::ID() );
    assert( _colTypes[41] == DbTypeIDs<V42>::ID() );
    assert( _colTypes[42] == DbTypeIDs<V43>::ID() );
    assert( _colTypes[43] == DbTypeIDs<V44>::ID() );
    assert( _colTypes[44] == DbTypeIDs<V45>::ID() );
    assert( _colTypes[45] == DbTypeIDs<V46>::ID() );
    assert( _colTypes[46] == DbTypeIDs<V47>::ID() );
    assert( _colTypes[47] == DbTypeIDs<V48>::ID() );
    assert( _colTypes[48] == DbTypeIDs<V49>::ID() );
    assert( _colTypes[49] == DbTypeIDs<V50>::ID() );
    assert( _colTypes[50] == DbTypeIDs<V51>::ID() );
    assert( _colTypes[51] == DbTypeIDs<V52>::ID() );
    assert( _colTypes[52] == DbTypeIDs<V53>::ID() );
    assert( _colTypes[53] == DbTypeIDs<V54>::ID() );
    assert( _colTypes[54] == DbTypeIDs<V55>::ID() );
    assert( _colTypes[55] == DbTypeIDs<V56>::ID() );
    ((List<V1>*)_colDatas[0])->Add(v1);
    ((List<V2>*)_colDatas[1])->Add(v2);
    ((List<V3>*)_colDatas[2])->Add(v3);
    ((List<V4>*)_colDatas[3])->Add(v4);
    ((List<V5>*)_colDatas[4])->Add(v5);
    ((List<V6>*)_colDatas[5])->Add(v6);
    ((List<V7>*)_colDatas[6])->Add(v7);
    ((List<V8>*)_colDatas[7])->Add(v8);
    ((List<V9>*)_colDatas[8])->Add(v9);
    ((List<V10>*)_colDatas[9])->Add(v10);
    ((List<V11>*)_colDatas[10])->Add(v11);
    ((List<V12>*)_colDatas[11])->Add(v12);
    ((List<V13>*)_colDatas[12])->Add(v13);
    ((List<V14>*)_colDatas[13])->Add(v14);
    ((List<V15>*)_colDatas[14])->Add(v15);
    ((List<V16>*)_colDatas[15])->Add(v16);
    ((List<V17>*)_colDatas[16])->Add(v17);
    ((List<V18>*)_colDatas[17])->Add(v18);
    ((List<V19>*)_colDatas[18])->Add(v19);
    ((List<V20>*)_colDatas[19])->Add(v20);
    ((List<V21>*)_colDatas[20])->Add(v21);
    ((List<V22>*)_colDatas[21])->Add(v22);
    ((List<V23>*)_colDatas[22])->Add(v23);
    ((List<V24>*)_colDatas[23])->Add(v24);
    ((List<V25>*)_colDatas[24])->Add(v25);
    ((List<V26>*)_colDatas[25])->Add(v26);
    ((List<V27>*)_colDatas[26])->Add(v27);
    ((List<V28>*)_colDatas[27])->Add(v28);
    ((List<V29>*)_colDatas[28])->Add(v29);
    ((List<V30>*)_colDatas[29])->Add(v30);
    ((List<V31>*)_colDatas[30])->Add(v31);
    ((List<V32>*)_colDatas[31])->Add(v32);
    ((List<V33>*)_colDatas[32])->Add(v33);
    ((List<V34>*)_colDatas[33])->Add(v34);
    ((List<V35>*)_colDatas[34])->Add(v35);
    ((List<V36>*)_colDatas[35])->Add(v36);
    ((List<V37>*)_colDatas[36])->Add(v37);
    ((List<V38>*)_colDatas[37])->Add(v38);
    ((List<V39>*)_colDatas[38])->Add(v39);
    ((List<V40>*)_colDatas[39])->Add(v40);
    ((List<V41>*)_colDatas[40])->Add(v41);
    ((List<V42>*)_colDatas[41])->Add(v42);
    ((List<V43>*)_colDatas[42])->Add(v43);
    ((List<V44>*)_colDatas[43])->Add(v44);
    ((List<V45>*)_colDatas[44])->Add(v45);
    ((List<V46>*)_colDatas[45])->Add(v46);
    ((List<V47>*)_colDatas[46])->Add(v47);
    ((List<V48>*)_colDatas[47])->Add(v48);
    ((List<V49>*)_colDatas[48])->Add(v49);
    ((List<V50>*)_colDatas[49])->Add(v50);
    ((List<V51>*)_colDatas[50])->Add(v51);
    ((List<V52>*)_colDatas[51])->Add(v52);
    ((List<V53>*)_colDatas[52])->Add(v53);
    ((List<V54>*)_colDatas[53])->Add(v54);
    ((List<V55>*)_colDatas[54])->Add(v55);
    ((List<V56>*)_colDatas[55])->Add(v56);
    ++_rowCount;
    return *this;
}
template<typename V1, typename V2, typename V3, typename V4, typename V5, typename V6, typename V7, typename V8, typename V9, typename V10, typename V11, typename V12, typename V13, typename V14, typename V15, typename V16, typename V17, typename V18, typename V19, typename V20, typename V21, typename V22, typename V23, typename V24, typename V25, typename V26, typename V27, typename V28, typename V29, typename V30, typename V31, typename V32, typename V33, typename V34, typename V35, typename V36, typename V37, typename V38, typename V39, typename V40, typename V41, typename V42, typename V43, typename V44, typename V45, typename V46, typename V47, typename V48, typename V49, typename V50, typename V51, typename V52, typename V53, typename V54, typename V55, typename V56, typename V57>
DbTable & DbTable::AddRow(V1 const &v1, V2 const &v2, V3 const &v3, V4 const &v4, V5 const &v5, V6 const &v6, V7 const &v7, V8 const &v8, V9 const &v9, V10 const &v10, V11 const &v11, V12 const &v12, V13 const &v13, V14 const &v14, V15 const &v15, V16 const &v16, V17 const &v17, V18 const &v18, V19 const &v19, V20 const &v20, V21 const &v21, V22 const &v22, V23 const &v23, V24 const &v24, V25 const &v25, V26 const &v26, V27 const &v27, V28 const &v28, V29 const &v29, V30 const &v30, V31 const &v31, V32 const &v32, V33 const &v33, V34 const &v34, V35 const &v35, V36 const &v36, V37 const &v37, V38 const &v38, V39 const &v39, V40 const &v40, V41 const &v41, V42 const &v42, V43 const &v43, V44 const &v44, V45 const &v45, V46 const &v46, V47 const &v47, V48 const &v48, V49 const &v49, V50 const &v50, V51 const &v51, V52 const &v52, V53 const &v53, V54 const &v54, V55 const &v55, V56 const &v56, V57 const &v57) {
    assert( _colNames.Length() == 57 );
    assert( _colTypes[0] == DbTypeIDs<V1>::ID() );
    assert( _colTypes[1] == DbTypeIDs<V2>::ID() );
    assert( _colTypes[2] == DbTypeIDs<V3>::ID() );
    assert( _colTypes[3] == DbTypeIDs<V4>::ID() );
    assert( _colTypes[4] == DbTypeIDs<V5>::ID() );
    assert( _colTypes[5] == DbTypeIDs<V6>::ID() );
    assert( _colTypes[6] == DbTypeIDs<V7>::ID() );
    assert( _colTypes[7] == DbTypeIDs<V8>::ID() );
    assert( _colTypes[8] == DbTypeIDs<V9>::ID() );
    assert( _colTypes[9] == DbTypeIDs<V10>::ID() );
    assert( _colTypes[10] == DbTypeIDs<V11>::ID() );
    assert( _colTypes[11] == DbTypeIDs<V12>::ID() );
    assert( _colTypes[12] == DbTypeIDs<V13>::ID() );
    assert( _colTypes[13] == DbTypeIDs<V14>::ID() );
    assert( _colTypes[14] == DbTypeIDs<V15>::ID() );
    assert( _colTypes[15] == DbTypeIDs<V16>::ID() );
    assert( _colTypes[16] == DbTypeIDs<V17>::ID() );
    assert( _colTypes[17] == DbTypeIDs<V18>::ID() );
    assert( _colTypes[18] == DbTypeIDs<V19>::ID() );
    assert( _colTypes[19] == DbTypeIDs<V20>::ID() );
    assert( _colTypes[20] == DbTypeIDs<V21>::ID() );
    assert( _colTypes[21] == DbTypeIDs<V22>::ID() );
    assert( _colTypes[22] == DbTypeIDs<V23>::ID() );
    assert( _colTypes[23] == DbTypeIDs<V24>::ID() );
    assert( _colTypes[24] == DbTypeIDs<V25>::ID() );
    assert( _colTypes[25] == DbTypeIDs<V26>::ID() );
    assert( _colTypes[26] == DbTypeIDs<V27>::ID() );
    assert( _colTypes[27] == DbTypeIDs<V28>::ID() );
    assert( _colTypes[28] == DbTypeIDs<V29>::ID() );
    assert( _colTypes[29] == DbTypeIDs<V30>::ID() );
    assert( _colTypes[30] == DbTypeIDs<V31>::ID() );
    assert( _colTypes[31] == DbTypeIDs<V32>::ID() );
    assert( _colTypes[32] == DbTypeIDs<V33>::ID() );
    assert( _colTypes[33] == DbTypeIDs<V34>::ID() );
    assert( _colTypes[34] == DbTypeIDs<V35>::ID() );
    assert( _colTypes[35] == DbTypeIDs<V36>::ID() );
    assert( _colTypes[36] == DbTypeIDs<V37>::ID() );
    assert( _colTypes[37] == DbTypeIDs<V38>::ID() );
    assert( _colTypes[38] == DbTypeIDs<V39>::ID() );
    assert( _colTypes[39] == DbTypeIDs<V40>::ID() );
    assert( _colTypes[40] == DbTypeIDs<V41>::ID() );
    assert( _colTypes[41] == DbTypeIDs<V42>::ID() );
    assert( _colTypes[42] == DbTypeIDs<V43>::ID() );
    assert( _colTypes[43] == DbTypeIDs<V44>::ID() );
    assert( _colTypes[44] == DbTypeIDs<V45>::ID() );
    assert( _colTypes[45] == DbTypeIDs<V46>::ID() );
    assert( _colTypes[46] == DbTypeIDs<V47>::ID() );
    assert( _colTypes[47] == DbTypeIDs<V48>::ID() );
    assert( _colTypes[48] == DbTypeIDs<V49>::ID() );
    assert( _colTypes[49] == DbTypeIDs<V50>::ID() );
    assert( _colTypes[50] == DbTypeIDs<V51>::ID() );
    assert( _colTypes[51] == DbTypeIDs<V52>::ID() );
    assert( _colTypes[52] == DbTypeIDs<V53>::ID() );
    assert( _colTypes[53] == DbTypeIDs<V54>::ID() );
    assert( _colTypes[54] == DbTypeIDs<V55>::ID() );
    assert( _colTypes[55] == DbTypeIDs<V56>::ID() );
    assert( _colTypes[56] == DbTypeIDs<V57>::ID() );
    ((List<V1>*)_colDatas[0])->Add(v1);
    ((List<V2>*)_colDatas[1])->Add(v2);
    ((List<V3>*)_colDatas[2])->Add(v3);
    ((List<V4>*)_colDatas[3])->Add(v4);
    ((List<V5>*)_colDatas[4])->Add(v5);
    ((List<V6>*)_colDatas[5])->Add(v6);
    ((List<V7>*)_colDatas[6])->Add(v7);
    ((List<V8>*)_colDatas[7])->Add(v8);
    ((List<V9>*)_colDatas[8])->Add(v9);
    ((List<V10>*)_colDatas[9])->Add(v10);
    ((List<V11>*)_colDatas[10])->Add(v11);
    ((List<V12>*)_colDatas[11])->Add(v12);
    ((List<V13>*)_colDatas[12])->Add(v13);
    ((List<V14>*)_colDatas[13])->Add(v14);
    ((List<V15>*)_colDatas[14])->Add(v15);
    ((List<V16>*)_colDatas[15])->Add(v16);
    ((List<V17>*)_colDatas[16])->Add(v17);
    ((List<V18>*)_colDatas[17])->Add(v18);
    ((List<V19>*)_colDatas[18])->Add(v19);
    ((List<V20>*)_colDatas[19])->Add(v20);
    ((List<V21>*)_colDatas[20])->Add(v21);
    ((List<V22>*)_colDatas[21])->Add(v22);
    ((List<V23>*)_colDatas[22])->Add(v23);
    ((List<V24>*)_colDatas[23])->Add(v24);
    ((List<V25>*)_colDatas[24])->Add(v25);
    ((List<V26>*)_colDatas[25])->Add(v26);
    ((List<V27>*)_colDatas[26])->Add(v27);
    ((List<V28>*)_colDatas[27])->Add(v28);
    ((List<V29>*)_colDatas[28])->Add(v29);
    ((List<V30>*)_colDatas[29])->Add(v30);
    ((List<V31>*)_colDatas[30])->Add(v31);
    ((List<V32>*)_colDatas[31])->Add(v32);
    ((List<V33>*)_colDatas[32])->Add(v33);
    ((List<V34>*)_colDatas[33])->Add(v34);
    ((List<V35>*)_colDatas[34])->Add(v35);
    ((List<V36>*)_colDatas[35])->Add(v36);
    ((List<V37>*)_colDatas[36])->Add(v37);
    ((List<V38>*)_colDatas[37])->Add(v38);
    ((List<V39>*)_colDatas[38])->Add(v39);
    ((List<V40>*)_colDatas[39])->Add(v40);
    ((List<V41>*)_colDatas[40])->Add(v41);
    ((List<V42>*)_colDatas[41])->Add(v42);
    ((List<V43>*)_colDatas[42])->Add(v43);
    ((List<V44>*)_colDatas[43])->Add(v44);
    ((List<V45>*)_colDatas[44])->Add(v45);
    ((List<V46>*)_colDatas[45])->Add(v46);
    ((List<V47>*)_colDatas[46])->Add(v47);
    ((List<V48>*)_colDatas[47])->Add(v48);
    ((List<V49>*)_colDatas[48])->Add(v49);
    ((List<V50>*)_colDatas[49])->Add(v50);
    ((List<V51>*)_colDatas[50])->Add(v51);
    ((List<V52>*)_colDatas[51])->Add(v52);
    ((List<V53>*)_colDatas[52])->Add(v53);
    ((List<V54>*)_colDatas[53])->Add(v54);
    ((List<V55>*)_colDatas[54])->Add(v55);
    ((List<V56>*)_colDatas[55])->Add(v56);
    ((List<V57>*)_colDatas[56])->Add(v57);
    ++_rowCount;
    return *this;
}
template<typename V1, typename V2, typename V3, typename V4, typename V5, typename V6, typename V7, typename V8, typename V9, typename V10, typename V11, typename V12, typename V13, typename V14, typename V15, typename V16, typename V17, typename V18, typename V19, typename V20, typename V21, typename V22, typename V23, typename V24, typename V25, typename V26, typename V27, typename V28, typename V29, typename V30, typename V31, typename V32, typename V33, typename V34, typename V35, typename V36, typename V37, typename V38, typename V39, typename V40, typename V41, typename V42, typename V43, typename V44, typename V45, typename V46, typename V47, typename V48, typename V49, typename V50, typename V51, typename V52, typename V53, typename V54, typename V55, typename V56, typename V57, typename V58>
DbTable & DbTable::AddRow(V1 const &v1, V2 const &v2, V3 const &v3, V4 const &v4, V5 const &v5, V6 const &v6, V7 const &v7, V8 const &v8, V9 const &v9, V10 const &v10, V11 const &v11, V12 const &v12, V13 const &v13, V14 const &v14, V15 const &v15, V16 const &v16, V17 const &v17, V18 const &v18, V19 const &v19, V20 const &v20, V21 const &v21, V22 const &v22, V23 const &v23, V24 const &v24, V25 const &v25, V26 const &v26, V27 const &v27, V28 const &v28, V29 const &v29, V30 const &v30, V31 const &v31, V32 const &v32, V33 const &v33, V34 const &v34, V35 const &v35, V36 const &v36, V37 const &v37, V38 const &v38, V39 const &v39, V40 const &v40, V41 const &v41, V42 const &v42, V43 const &v43, V44 const &v44, V45 const &v45, V46 const &v46, V47 const &v47, V48 const &v48, V49 const &v49, V50 const &v50, V51 const &v51, V52 const &v52, V53 const &v53, V54 const &v54, V55 const &v55, V56 const &v56, V57 const &v57, V58 const &v58) {
    assert( _colNames.Length() == 58 );
    assert( _colTypes[0] == DbTypeIDs<V1>::ID() );
    assert( _colTypes[1] == DbTypeIDs<V2>::ID() );
    assert( _colTypes[2] == DbTypeIDs<V3>::ID() );
    assert( _colTypes[3] == DbTypeIDs<V4>::ID() );
    assert( _colTypes[4] == DbTypeIDs<V5>::ID() );
    assert( _colTypes[5] == DbTypeIDs<V6>::ID() );
    assert( _colTypes[6] == DbTypeIDs<V7>::ID() );
    assert( _colTypes[7] == DbTypeIDs<V8>::ID() );
    assert( _colTypes[8] == DbTypeIDs<V9>::ID() );
    assert( _colTypes[9] == DbTypeIDs<V10>::ID() );
    assert( _colTypes[10] == DbTypeIDs<V11>::ID() );
    assert( _colTypes[11] == DbTypeIDs<V12>::ID() );
    assert( _colTypes[12] == DbTypeIDs<V13>::ID() );
    assert( _colTypes[13] == DbTypeIDs<V14>::ID() );
    assert( _colTypes[14] == DbTypeIDs<V15>::ID() );
    assert( _colTypes[15] == DbTypeIDs<V16>::ID() );
    assert( _colTypes[16] == DbTypeIDs<V17>::ID() );
    assert( _colTypes[17] == DbTypeIDs<V18>::ID() );
    assert( _colTypes[18] == DbTypeIDs<V19>::ID() );
    assert( _colTypes[19] == DbTypeIDs<V20>::ID() );
    assert( _colTypes[20] == DbTypeIDs<V21>::ID() );
    assert( _colTypes[21] == DbTypeIDs<V22>::ID() );
    assert( _colTypes[22] == DbTypeIDs<V23>::ID() );
    assert( _colTypes[23] == DbTypeIDs<V24>::ID() );
    assert( _colTypes[24] == DbTypeIDs<V25>::ID() );
    assert( _colTypes[25] == DbTypeIDs<V26>::ID() );
    assert( _colTypes[26] == DbTypeIDs<V27>::ID() );
    assert( _colTypes[27] == DbTypeIDs<V28>::ID() );
    assert( _colTypes[28] == DbTypeIDs<V29>::ID() );
    assert( _colTypes[29] == DbTypeIDs<V30>::ID() );
    assert( _colTypes[30] == DbTypeIDs<V31>::ID() );
    assert( _colTypes[31] == DbTypeIDs<V32>::ID() );
    assert( _colTypes[32] == DbTypeIDs<V33>::ID() );
    assert( _colTypes[33] == DbTypeIDs<V34>::ID() );
    assert( _colTypes[34] == DbTypeIDs<V35>::ID() );
    assert( _colTypes[35] == DbTypeIDs<V36>::ID() );
    assert( _colTypes[36] == DbTypeIDs<V37>::ID() );
    assert( _colTypes[37] == DbTypeIDs<V38>::ID() );
    assert( _colTypes[38] == DbTypeIDs<V39>::ID() );
    assert( _colTypes[39] == DbTypeIDs<V40>::ID() );
    assert( _colTypes[40] == DbTypeIDs<V41>::ID() );
    assert( _colTypes[41] == DbTypeIDs<V42>::ID() );
    assert( _colTypes[42] == DbTypeIDs<V43>::ID() );
    assert( _colTypes[43] == DbTypeIDs<V44>::ID() );
    assert( _colTypes[44] == DbTypeIDs<V45>::ID() );
    assert( _colTypes[45] == DbTypeIDs<V46>::ID() );
    assert( _colTypes[46] == DbTypeIDs<V47>::ID() );
    assert( _colTypes[47] == DbTypeIDs<V48>::ID() );
    assert( _colTypes[48] == DbTypeIDs<V49>::ID() );
    assert( _colTypes[49] == DbTypeIDs<V50>::ID() );
    assert( _colTypes[50] == DbTypeIDs<V51>::ID() );
    assert( _colTypes[51] == DbTypeIDs<V52>::ID() );
    assert( _colTypes[52] == DbTypeIDs<V53>::ID() );
    assert( _colTypes[53] == DbTypeIDs<V54>::ID() );
    assert( _colTypes[54] == DbTypeIDs<V55>::ID() );
    assert( _colTypes[55] == DbTypeIDs<V56>::ID() );
    assert( _colTypes[56] == DbTypeIDs<V57>::ID() );
    assert( _colTypes[57] == DbTypeIDs<V58>::ID() );
    ((List<V1>*)_colDatas[0])->Add(v1);
    ((List<V2>*)_colDatas[1])->Add(v2);
    ((List<V3>*)_colDatas[2])->Add(v3);
    ((List<V4>*)_colDatas[3])->Add(v4);
    ((List<V5>*)_colDatas[4])->Add(v5);
    ((List<V6>*)_colDatas[5])->Add(v6);
    ((List<V7>*)_colDatas[6])->Add(v7);
    ((List<V8>*)_colDatas[7])->Add(v8);
    ((List<V9>*)_colDatas[8])->Add(v9);
    ((List<V10>*)_colDatas[9])->Add(v10);
    ((List<V11>*)_colDatas[10])->Add(v11);
    ((List<V12>*)_colDatas[11])->Add(v12);
    ((List<V13>*)_colDatas[12])->Add(v13);
    ((List<V14>*)_colDatas[13])->Add(v14);
    ((List<V15>*)_colDatas[14])->Add(v15);
    ((List<V16>*)_colDatas[15])->Add(v16);
    ((List<V17>*)_colDatas[16])->Add(v17);
    ((List<V18>*)_colDatas[17])->Add(v18);
    ((List<V19>*)_colDatas[18])->Add(v19);
    ((List<V20>*)_colDatas[19])->Add(v20);
    ((List<V21>*)_colDatas[20])->Add(v21);
    ((List<V22>*)_colDatas[21])->Add(v22);
    ((List<V23>*)_colDatas[22])->Add(v23);
    ((List<V24>*)_colDatas[23])->Add(v24);
    ((List<V25>*)_colDatas[24])->Add(v25);
    ((List<V26>*)_colDatas[25])->Add(v26);
    ((List<V27>*)_colDatas[26])->Add(v27);
    ((List<V28>*)_colDatas[27])->Add(v28);
    ((List<V29>*)_colDatas[28])->Add(v29);
    ((List<V30>*)_colDatas[29])->Add(v30);
    ((List<V31>*)_colDatas[30])->Add(v31);
    ((List<V32>*)_colDatas[31])->Add(v32);
    ((List<V33>*)_colDatas[32])->Add(v33);
    ((List<V34>*)_colDatas[33])->Add(v34);
    ((List<V35>*)_colDatas[34])->Add(v35);
    ((List<V36>*)_colDatas[35])->Add(v36);
    ((List<V37>*)_colDatas[36])->Add(v37);
    ((List<V38>*)_colDatas[37])->Add(v38);
    ((List<V39>*)_colDatas[38])->Add(v39);
    ((List<V40>*)_colDatas[39])->Add(v40);
    ((List<V41>*)_colDatas[40])->Add(v41);
    ((List<V42>*)_colDatas[41])->Add(v42);
    ((List<V43>*)_colDatas[42])->Add(v43);
    ((List<V44>*)_colDatas[43])->Add(v44);
    ((List<V45>*)_colDatas[44])->Add(v45);
    ((List<V46>*)_colDatas[45])->Add(v46);
    ((List<V47>*)_colDatas[46])->Add(v47);
    ((List<V48>*)_colDatas[47])->Add(v48);
    ((List<V49>*)_colDatas[48])->Add(v49);
    ((List<V50>*)_colDatas[49])->Add(v50);
    ((List<V51>*)_colDatas[50])->Add(v51);
    ((List<V52>*)_colDatas[51])->Add(v52);
    ((List<V53>*)_colDatas[52])->Add(v53);
    ((List<V54>*)_colDatas[53])->Add(v54);
    ((List<V55>*)_colDatas[54])->Add(v55);
    ((List<V56>*)_colDatas[55])->Add(v56);
    ((List<V57>*)_colDatas[56])->Add(v57);
    ((List<V58>*)_colDatas[57])->Add(v58);
    ++_rowCount;
    return *this;
}
template<typename V1, typename V2, typename V3, typename V4, typename V5, typename V6, typename V7, typename V8, typename V9, typename V10, typename V11, typename V12, typename V13, typename V14, typename V15, typename V16, typename V17, typename V18, typename V19, typename V20, typename V21, typename V22, typename V23, typename V24, typename V25, typename V26, typename V27, typename V28, typename V29, typename V30, typename V31, typename V32, typename V33, typename V34, typename V35, typename V36, typename V37, typename V38, typename V39, typename V40, typename V41, typename V42, typename V43, typename V44, typename V45, typename V46, typename V47, typename V48, typename V49, typename V50, typename V51, typename V52, typename V53, typename V54, typename V55, typename V56, typename V57, typename V58, typename V59>
DbTable & DbTable::AddRow(V1 const &v1, V2 const &v2, V3 const &v3, V4 const &v4, V5 const &v5, V6 const &v6, V7 const &v7, V8 const &v8, V9 const &v9, V10 const &v10, V11 const &v11, V12 const &v12, V13 const &v13, V14 const &v14, V15 const &v15, V16 const &v16, V17 const &v17, V18 const &v18, V19 const &v19, V20 const &v20, V21 const &v21, V22 const &v22, V23 const &v23, V24 const &v24, V25 const &v25, V26 const &v26, V27 const &v27, V28 const &v28, V29 const &v29, V30 const &v30, V31 const &v31, V32 const &v32, V33 const &v33, V34 const &v34, V35 const &v35, V36 const &v36, V37 const &v37, V38 const &v38, V39 const &v39, V40 const &v40, V41 const &v41, V42 const &v42, V43 const &v43, V44 const &v44, V45 const &v45, V46 const &v46, V47 const &v47, V48 const &v48, V49 const &v49, V50 const &v50, V51 const &v51, V52 const &v52, V53 const &v53, V54 const &v54, V55 const &v55, V56 const &v56, V57 const &v57, V58 const &v58, V59 const &v59) {
    assert( _colNames.Length() == 59 );
    assert( _colTypes[0] == DbTypeIDs<V1>::ID() );
    assert( _colTypes[1] == DbTypeIDs<V2>::ID() );
    assert( _colTypes[2] == DbTypeIDs<V3>::ID() );
    assert( _colTypes[3] == DbTypeIDs<V4>::ID() );
    assert( _colTypes[4] == DbTypeIDs<V5>::ID() );
    assert( _colTypes[5] == DbTypeIDs<V6>::ID() );
    assert( _colTypes[6] == DbTypeIDs<V7>::ID() );
    assert( _colTypes[7] == DbTypeIDs<V8>::ID() );
    assert( _colTypes[8] == DbTypeIDs<V9>::ID() );
    assert( _colTypes[9] == DbTypeIDs<V10>::ID() );
    assert( _colTypes[10] == DbTypeIDs<V11>::ID() );
    assert( _colTypes[11] == DbTypeIDs<V12>::ID() );
    assert( _colTypes[12] == DbTypeIDs<V13>::ID() );
    assert( _colTypes[13] == DbTypeIDs<V14>::ID() );
    assert( _colTypes[14] == DbTypeIDs<V15>::ID() );
    assert( _colTypes[15] == DbTypeIDs<V16>::ID() );
    assert( _colTypes[16] == DbTypeIDs<V17>::ID() );
    assert( _colTypes[17] == DbTypeIDs<V18>::ID() );
    assert( _colTypes[18] == DbTypeIDs<V19>::ID() );
    assert( _colTypes[19] == DbTypeIDs<V20>::ID() );
    assert( _colTypes[20] == DbTypeIDs<V21>::ID() );
    assert( _colTypes[21] == DbTypeIDs<V22>::ID() );
    assert( _colTypes[22] == DbTypeIDs<V23>::ID() );
    assert( _colTypes[23] == DbTypeIDs<V24>::ID() );
    assert( _colTypes[24] == DbTypeIDs<V25>::ID() );
    assert( _colTypes[25] == DbTypeIDs<V26>::ID() );
    assert( _colTypes[26] == DbTypeIDs<V27>::ID() );
    assert( _colTypes[27] == DbTypeIDs<V28>::ID() );
    assert( _colTypes[28] == DbTypeIDs<V29>::ID() );
    assert( _colTypes[29] == DbTypeIDs<V30>::ID() );
    assert( _colTypes[30] == DbTypeIDs<V31>::ID() );
    assert( _colTypes[31] == DbTypeIDs<V32>::ID() );
    assert( _colTypes[32] == DbTypeIDs<V33>::ID() );
    assert( _colTypes[33] == DbTypeIDs<V34>::ID() );
    assert( _colTypes[34] == DbTypeIDs<V35>::ID() );
    assert( _colTypes[35] == DbTypeIDs<V36>::ID() );
    assert( _colTypes[36] == DbTypeIDs<V37>::ID() );
    assert( _colTypes[37] == DbTypeIDs<V38>::ID() );
    assert( _colTypes[38] == DbTypeIDs<V39>::ID() );
    assert( _colTypes[39] == DbTypeIDs<V40>::ID() );
    assert( _colTypes[40] == DbTypeIDs<V41>::ID() );
    assert( _colTypes[41] == DbTypeIDs<V42>::ID() );
    assert( _colTypes[42] == DbTypeIDs<V43>::ID() );
    assert( _colTypes[43] == DbTypeIDs<V44>::ID() );
    assert( _colTypes[44] == DbTypeIDs<V45>::ID() );
    assert( _colTypes[45] == DbTypeIDs<V46>::ID() );
    assert( _colTypes[46] == DbTypeIDs<V47>::ID() );
    assert( _colTypes[47] == DbTypeIDs<V48>::ID() );
    assert( _colTypes[48] == DbTypeIDs<V49>::ID() );
    assert( _colTypes[49] == DbTypeIDs<V50>::ID() );
    assert( _colTypes[50] == DbTypeIDs<V51>::ID() );
    assert( _colTypes[51] == DbTypeIDs<V52>::ID() );
    assert( _colTypes[52] == DbTypeIDs<V53>::ID() );
    assert( _colTypes[53] == DbTypeIDs<V54>::ID() );
    assert( _colTypes[54] == DbTypeIDs<V55>::ID() );
    assert( _colTypes[55] == DbTypeIDs<V56>::ID() );
    assert( _colTypes[56] == DbTypeIDs<V57>::ID() );
    assert( _colTypes[57] == DbTypeIDs<V58>::ID() );
    assert( _colTypes[58] == DbTypeIDs<V59>::ID() );
    ((List<V1>*)_colDatas[0])->Add(v1);
    ((List<V2>*)_colDatas[1])->Add(v2);
    ((List<V3>*)_colDatas[2])->Add(v3);
    ((List<V4>*)_colDatas[3])->Add(v4);
    ((List<V5>*)_colDatas[4])->Add(v5);
    ((List<V6>*)_colDatas[5])->Add(v6);
    ((List<V7>*)_colDatas[6])->Add(v7);
    ((List<V8>*)_colDatas[7])->Add(v8);
    ((List<V9>*)_colDatas[8])->Add(v9);
    ((List<V10>*)_colDatas[9])->Add(v10);
    ((List<V11>*)_colDatas[10])->Add(v11);
    ((List<V12>*)_colDatas[11])->Add(v12);
    ((List<V13>*)_colDatas[12])->Add(v13);
    ((List<V14>*)_colDatas[13])->Add(v14);
    ((List<V15>*)_colDatas[14])->Add(v15);
    ((List<V16>*)_colDatas[15])->Add(v16);
    ((List<V17>*)_colDatas[16])->Add(v17);
    ((List<V18>*)_colDatas[17])->Add(v18);
    ((List<V19>*)_colDatas[18])->Add(v19);
    ((List<V20>*)_colDatas[19])->Add(v20);
    ((List<V21>*)_colDatas[20])->Add(v21);
    ((List<V22>*)_colDatas[21])->Add(v22);
    ((List<V23>*)_colDatas[22])->Add(v23);
    ((List<V24>*)_colDatas[23])->Add(v24);
    ((List<V25>*)_colDatas[24])->Add(v25);
    ((List<V26>*)_colDatas[25])->Add(v26);
    ((List<V27>*)_colDatas[26])->Add(v27);
    ((List<V28>*)_colDatas[27])->Add(v28);
    ((List<V29>*)_colDatas[28])->Add(v29);
    ((List<V30>*)_colDatas[29])->Add(v30);
    ((List<V31>*)_colDatas[30])->Add(v31);
    ((List<V32>*)_colDatas[31])->Add(v32);
    ((List<V33>*)_colDatas[32])->Add(v33);
    ((List<V34>*)_colDatas[33])->Add(v34);
    ((List<V35>*)_colDatas[34])->Add(v35);
    ((List<V36>*)_colDatas[35])->Add(v36);
    ((List<V37>*)_colDatas[36])->Add(v37);
    ((List<V38>*)_colDatas[37])->Add(v38);
    ((List<V39>*)_colDatas[38])->Add(v39);
    ((List<V40>*)_colDatas[39])->Add(v40);
    ((List<V41>*)_colDatas[40])->Add(v41);
    ((List<V42>*)_colDatas[41])->Add(v42);
    ((List<V43>*)_colDatas[42])->Add(v43);
    ((List<V44>*)_colDatas[43])->Add(v44);
    ((List<V45>*)_colDatas[44])->Add(v45);
    ((List<V46>*)_colDatas[45])->Add(v46);
    ((List<V47>*)_colDatas[46])->Add(v47);
    ((List<V48>*)_colDatas[47])->Add(v48);
    ((List<V49>*)_colDatas[48])->Add(v49);
    ((List<V50>*)_colDatas[49])->Add(v50);
    ((List<V51>*)_colDatas[50])->Add(v51);
    ((List<V52>*)_colDatas[51])->Add(v52);
    ((List<V53>*)_colDatas[52])->Add(v53);
    ((List<V54>*)_colDatas[53])->Add(v54);
    ((List<V55>*)_colDatas[54])->Add(v55);
    ((List<V56>*)_colDatas[55])->Add(v56);
    ((List<V57>*)_colDatas[56])->Add(v57);
    ((List<V58>*)_colDatas[57])->Add(v58);
    ((List<V59>*)_colDatas[58])->Add(v59);
    ++_rowCount;
    return *this;
}
template<typename V1, typename V2, typename V3, typename V4, typename V5, typename V6, typename V7, typename V8, typename V9, typename V10, typename V11, typename V12, typename V13, typename V14, typename V15, typename V16, typename V17, typename V18, typename V19, typename V20, typename V21, typename V22, typename V23, typename V24, typename V25, typename V26, typename V27, typename V28, typename V29, typename V30, typename V31, typename V32, typename V33, typename V34, typename V35, typename V36, typename V37, typename V38, typename V39, typename V40, typename V41, typename V42, typename V43, typename V44, typename V45, typename V46, typename V47, typename V48, typename V49, typename V50, typename V51, typename V52, typename V53, typename V54, typename V55, typename V56, typename V57, typename V58, typename V59, typename V60>
DbTable & DbTable::AddRow(V1 const &v1, V2 const &v2, V3 const &v3, V4 const &v4, V5 const &v5, V6 const &v6, V7 const &v7, V8 const &v8, V9 const &v9, V10 const &v10, V11 const &v11, V12 const &v12, V13 const &v13, V14 const &v14, V15 const &v15, V16 const &v16, V17 const &v17, V18 const &v18, V19 const &v19, V20 const &v20, V21 const &v21, V22 const &v22, V23 const &v23, V24 const &v24, V25 const &v25, V26 const &v26, V27 const &v27, V28 const &v28, V29 const &v29, V30 const &v30, V31 const &v31, V32 const &v32, V33 const &v33, V34 const &v34, V35 const &v35, V36 const &v36, V37 const &v37, V38 const &v38, V39 const &v39, V40 const &v40, V41 const &v41, V42 const &v42, V43 const &v43, V44 const &v44, V45 const &v45, V46 const &v46, V47 const &v47, V48 const &v48, V49 const &v49, V50 const &v50, V51 const &v51, V52 const &v52, V53 const &v53, V54 const &v54, V55 const &v55, V56 const &v56, V57 const &v57, V58 const &v58, V59 const &v59, V60 const &v60) {
    assert( _colNames.Length() == 60 );
    assert( _colTypes[0] == DbTypeIDs<V1>::ID() );
    assert( _colTypes[1] == DbTypeIDs<V2>::ID() );
    assert( _colTypes[2] == DbTypeIDs<V3>::ID() );
    assert( _colTypes[3] == DbTypeIDs<V4>::ID() );
    assert( _colTypes[4] == DbTypeIDs<V5>::ID() );
    assert( _colTypes[5] == DbTypeIDs<V6>::ID() );
    assert( _colTypes[6] == DbTypeIDs<V7>::ID() );
    assert( _colTypes[7] == DbTypeIDs<V8>::ID() );
    assert( _colTypes[8] == DbTypeIDs<V9>::ID() );
    assert( _colTypes[9] == DbTypeIDs<V10>::ID() );
    assert( _colTypes[10] == DbTypeIDs<V11>::ID() );
    assert( _colTypes[11] == DbTypeIDs<V12>::ID() );
    assert( _colTypes[12] == DbTypeIDs<V13>::ID() );
    assert( _colTypes[13] == DbTypeIDs<V14>::ID() );
    assert( _colTypes[14] == DbTypeIDs<V15>::ID() );
    assert( _colTypes[15] == DbTypeIDs<V16>::ID() );
    assert( _colTypes[16] == DbTypeIDs<V17>::ID() );
    assert( _colTypes[17] == DbTypeIDs<V18>::ID() );
    assert( _colTypes[18] == DbTypeIDs<V19>::ID() );
    assert( _colTypes[19] == DbTypeIDs<V20>::ID() );
    assert( _colTypes[20] == DbTypeIDs<V21>::ID() );
    assert( _colTypes[21] == DbTypeIDs<V22>::ID() );
    assert( _colTypes[22] == DbTypeIDs<V23>::ID() );
    assert( _colTypes[23] == DbTypeIDs<V24>::ID() );
    assert( _colTypes[24] == DbTypeIDs<V25>::ID() );
    assert( _colTypes[25] == DbTypeIDs<V26>::ID() );
    assert( _colTypes[26] == DbTypeIDs<V27>::ID() );
    assert( _colTypes[27] == DbTypeIDs<V28>::ID() );
    assert( _colTypes[28] == DbTypeIDs<V29>::ID() );
    assert( _colTypes[29] == DbTypeIDs<V30>::ID() );
    assert( _colTypes[30] == DbTypeIDs<V31>::ID() );
    assert( _colTypes[31] == DbTypeIDs<V32>::ID() );
    assert( _colTypes[32] == DbTypeIDs<V33>::ID() );
    assert( _colTypes[33] == DbTypeIDs<V34>::ID() );
    assert( _colTypes[34] == DbTypeIDs<V35>::ID() );
    assert( _colTypes[35] == DbTypeIDs<V36>::ID() );
    assert( _colTypes[36] == DbTypeIDs<V37>::ID() );
    assert( _colTypes[37] == DbTypeIDs<V38>::ID() );
    assert( _colTypes[38] == DbTypeIDs<V39>::ID() );
    assert( _colTypes[39] == DbTypeIDs<V40>::ID() );
    assert( _colTypes[40] == DbTypeIDs<V41>::ID() );
    assert( _colTypes[41] == DbTypeIDs<V42>::ID() );
    assert( _colTypes[42] == DbTypeIDs<V43>::ID() );
    assert( _colTypes[43] == DbTypeIDs<V44>::ID() );
    assert( _colTypes[44] == DbTypeIDs<V45>::ID() );
    assert( _colTypes[45] == DbTypeIDs<V46>::ID() );
    assert( _colTypes[46] == DbTypeIDs<V47>::ID() );
    assert( _colTypes[47] == DbTypeIDs<V48>::ID() );
    assert( _colTypes[48] == DbTypeIDs<V49>::ID() );
    assert( _colTypes[49] == DbTypeIDs<V50>::ID() );
    assert( _colTypes[50] == DbTypeIDs<V51>::ID() );
    assert( _colTypes[51] == DbTypeIDs<V52>::ID() );
    assert( _colTypes[52] == DbTypeIDs<V53>::ID() );
    assert( _colTypes[53] == DbTypeIDs<V54>::ID() );
    assert( _colTypes[54] == DbTypeIDs<V55>::ID() );
    assert( _colTypes[55] == DbTypeIDs<V56>::ID() );
    assert( _colTypes[56] == DbTypeIDs<V57>::ID() );
    assert( _colTypes[57] == DbTypeIDs<V58>::ID() );
    assert( _colTypes[58] == DbTypeIDs<V59>::ID() );
    assert( _colTypes[59] == DbTypeIDs<V60>::ID() );
    ((List<V1>*)_colDatas[0])->Add(v1);
    ((List<V2>*)_colDatas[1])->Add(v2);
    ((List<V3>*)_colDatas[2])->Add(v3);
    ((List<V4>*)_colDatas[3])->Add(v4);
    ((List<V5>*)_colDatas[4])->Add(v5);
    ((List<V6>*)_colDatas[5])->Add(v6);
    ((List<V7>*)_colDatas[6])->Add(v7);
    ((List<V8>*)_colDatas[7])->Add(v8);
    ((List<V9>*)_colDatas[8])->Add(v9);
    ((List<V10>*)_colDatas[9])->Add(v10);
    ((List<V11>*)_colDatas[10])->Add(v11);
    ((List<V12>*)_colDatas[11])->Add(v12);
    ((List<V13>*)_colDatas[12])->Add(v13);
    ((List<V14>*)_colDatas[13])->Add(v14);
    ((List<V15>*)_colDatas[14])->Add(v15);
    ((List<V16>*)_colDatas[15])->Add(v16);
    ((List<V17>*)_colDatas[16])->Add(v17);
    ((List<V18>*)_colDatas[17])->Add(v18);
    ((List<V19>*)_colDatas[18])->Add(v19);
    ((List<V20>*)_colDatas[19])->Add(v20);
    ((List<V21>*)_colDatas[20])->Add(v21);
    ((List<V22>*)_colDatas[21])->Add(v22);
    ((List<V23>*)_colDatas[22])->Add(v23);
    ((List<V24>*)_colDatas[23])->Add(v24);
    ((List<V25>*)_colDatas[24])->Add(v25);
    ((List<V26>*)_colDatas[25])->Add(v26);
    ((List<V27>*)_colDatas[26])->Add(v27);
    ((List<V28>*)_colDatas[27])->Add(v28);
    ((List<V29>*)_colDatas[28])->Add(v29);
    ((List<V30>*)_colDatas[29])->Add(v30);
    ((List<V31>*)_colDatas[30])->Add(v31);
    ((List<V32>*)_colDatas[31])->Add(v32);
    ((List<V33>*)_colDatas[32])->Add(v33);
    ((List<V34>*)_colDatas[33])->Add(v34);
    ((List<V35>*)_colDatas[34])->Add(v35);
    ((List<V36>*)_colDatas[35])->Add(v36);
    ((List<V37>*)_colDatas[36])->Add(v37);
    ((List<V38>*)_colDatas[37])->Add(v38);
    ((List<V39>*)_colDatas[38])->Add(v39);
    ((List<V40>*)_colDatas[39])->Add(v40);
    ((List<V41>*)_colDatas[40])->Add(v41);
    ((List<V42>*)_colDatas[41])->Add(v42);
    ((List<V43>*)_colDatas[42])->Add(v43);
    ((List<V44>*)_colDatas[43])->Add(v44);
    ((List<V45>*)_colDatas[44])->Add(v45);
    ((List<V46>*)_colDatas[45])->Add(v46);
    ((List<V47>*)_colDatas[46])->Add(v47);
    ((List<V48>*)_colDatas[47])->Add(v48);
    ((List<V49>*)_colDatas[48])->Add(v49);
    ((List<V50>*)_colDatas[49])->Add(v50);
    ((List<V51>*)_colDatas[50])->Add(v51);
    ((List<V52>*)_colDatas[51])->Add(v52);
    ((List<V53>*)_colDatas[52])->Add(v53);
    ((List<V54>*)_colDatas[53])->Add(v54);
    ((List<V55>*)_colDatas[54])->Add(v55);
    ((List<V56>*)_colDatas[55])->Add(v56);
    ((List<V57>*)_colDatas[56])->Add(v57);
    ((List<V58>*)_colDatas[57])->Add(v58);
    ((List<V59>*)_colDatas[58])->Add(v59);
    ((List<V60>*)_colDatas[59])->Add(v60);
    ++_rowCount;
    return *this;
}
template<typename V1, typename V2, typename V3, typename V4, typename V5, typename V6, typename V7, typename V8, typename V9, typename V10, typename V11, typename V12, typename V13, typename V14, typename V15, typename V16, typename V17, typename V18, typename V19, typename V20, typename V21, typename V22, typename V23, typename V24, typename V25, typename V26, typename V27, typename V28, typename V29, typename V30, typename V31, typename V32, typename V33, typename V34, typename V35, typename V36, typename V37, typename V38, typename V39, typename V40, typename V41, typename V42, typename V43, typename V44, typename V45, typename V46, typename V47, typename V48, typename V49, typename V50, typename V51, typename V52, typename V53, typename V54, typename V55, typename V56, typename V57, typename V58, typename V59, typename V60, typename V61>
DbTable & DbTable::AddRow(V1 const &v1, V2 const &v2, V3 const &v3, V4 const &v4, V5 const &v5, V6 const &v6, V7 const &v7, V8 const &v8, V9 const &v9, V10 const &v10, V11 const &v11, V12 const &v12, V13 const &v13, V14 const &v14, V15 const &v15, V16 const &v16, V17 const &v17, V18 const &v18, V19 const &v19, V20 const &v20, V21 const &v21, V22 const &v22, V23 const &v23, V24 const &v24, V25 const &v25, V26 const &v26, V27 const &v27, V28 const &v28, V29 const &v29, V30 const &v30, V31 const &v31, V32 const &v32, V33 const &v33, V34 const &v34, V35 const &v35, V36 const &v36, V37 const &v37, V38 const &v38, V39 const &v39, V40 const &v40, V41 const &v41, V42 const &v42, V43 const &v43, V44 const &v44, V45 const &v45, V46 const &v46, V47 const &v47, V48 const &v48, V49 const &v49, V50 const &v50, V51 const &v51, V52 const &v52, V53 const &v53, V54 const &v54, V55 const &v55, V56 const &v56, V57 const &v57, V58 const &v58, V59 const &v59, V60 const &v60, V61 const &v61) {
    assert( _colNames.Length() == 61 );
    assert( _colTypes[0] == DbTypeIDs<V1>::ID() );
    assert( _colTypes[1] == DbTypeIDs<V2>::ID() );
    assert( _colTypes[2] == DbTypeIDs<V3>::ID() );
    assert( _colTypes[3] == DbTypeIDs<V4>::ID() );
    assert( _colTypes[4] == DbTypeIDs<V5>::ID() );
    assert( _colTypes[5] == DbTypeIDs<V6>::ID() );
    assert( _colTypes[6] == DbTypeIDs<V7>::ID() );
    assert( _colTypes[7] == DbTypeIDs<V8>::ID() );
    assert( _colTypes[8] == DbTypeIDs<V9>::ID() );
    assert( _colTypes[9] == DbTypeIDs<V10>::ID() );
    assert( _colTypes[10] == DbTypeIDs<V11>::ID() );
    assert( _colTypes[11] == DbTypeIDs<V12>::ID() );
    assert( _colTypes[12] == DbTypeIDs<V13>::ID() );
    assert( _colTypes[13] == DbTypeIDs<V14>::ID() );
    assert( _colTypes[14] == DbTypeIDs<V15>::ID() );
    assert( _colTypes[15] == DbTypeIDs<V16>::ID() );
    assert( _colTypes[16] == DbTypeIDs<V17>::ID() );
    assert( _colTypes[17] == DbTypeIDs<V18>::ID() );
    assert( _colTypes[18] == DbTypeIDs<V19>::ID() );
    assert( _colTypes[19] == DbTypeIDs<V20>::ID() );
    assert( _colTypes[20] == DbTypeIDs<V21>::ID() );
    assert( _colTypes[21] == DbTypeIDs<V22>::ID() );
    assert( _colTypes[22] == DbTypeIDs<V23>::ID() );
    assert( _colTypes[23] == DbTypeIDs<V24>::ID() );
    assert( _colTypes[24] == DbTypeIDs<V25>::ID() );
    assert( _colTypes[25] == DbTypeIDs<V26>::ID() );
    assert( _colTypes[26] == DbTypeIDs<V27>::ID() );
    assert( _colTypes[27] == DbTypeIDs<V28>::ID() );
    assert( _colTypes[28] == DbTypeIDs<V29>::ID() );
    assert( _colTypes[29] == DbTypeIDs<V30>::ID() );
    assert( _colTypes[30] == DbTypeIDs<V31>::ID() );
    assert( _colTypes[31] == DbTypeIDs<V32>::ID() );
    assert( _colTypes[32] == DbTypeIDs<V33>::ID() );
    assert( _colTypes[33] == DbTypeIDs<V34>::ID() );
    assert( _colTypes[34] == DbTypeIDs<V35>::ID() );
    assert( _colTypes[35] == DbTypeIDs<V36>::ID() );
    assert( _colTypes[36] == DbTypeIDs<V37>::ID() );
    assert( _colTypes[37] == DbTypeIDs<V38>::ID() );
    assert( _colTypes[38] == DbTypeIDs<V39>::ID() );
    assert( _colTypes[39] == DbTypeIDs<V40>::ID() );
    assert( _colTypes[40] == DbTypeIDs<V41>::ID() );
    assert( _colTypes[41] == DbTypeIDs<V42>::ID() );
    assert( _colTypes[42] == DbTypeIDs<V43>::ID() );
    assert( _colTypes[43] == DbTypeIDs<V44>::ID() );
    assert( _colTypes[44] == DbTypeIDs<V45>::ID() );
    assert( _colTypes[45] == DbTypeIDs<V46>::ID() );
    assert( _colTypes[46] == DbTypeIDs<V47>::ID() );
    assert( _colTypes[47] == DbTypeIDs<V48>::ID() );
    assert( _colTypes[48] == DbTypeIDs<V49>::ID() );
    assert( _colTypes[49] == DbTypeIDs<V50>::ID() );
    assert( _colTypes[50] == DbTypeIDs<V51>::ID() );
    assert( _colTypes[51] == DbTypeIDs<V52>::ID() );
    assert( _colTypes[52] == DbTypeIDs<V53>::ID() );
    assert( _colTypes[53] == DbTypeIDs<V54>::ID() );
    assert( _colTypes[54] == DbTypeIDs<V55>::ID() );
    assert( _colTypes[55] == DbTypeIDs<V56>::ID() );
    assert( _colTypes[56] == DbTypeIDs<V57>::ID() );
    assert( _colTypes[57] == DbTypeIDs<V58>::ID() );
    assert( _colTypes[58] == DbTypeIDs<V59>::ID() );
    assert( _colTypes[59] == DbTypeIDs<V60>::ID() );
    assert( _colTypes[60] == DbTypeIDs<V61>::ID() );
    ((List<V1>*)_colDatas[0])->Add(v1);
    ((List<V2>*)_colDatas[1])->Add(v2);
    ((List<V3>*)_colDatas[2])->Add(v3);
    ((List<V4>*)_colDatas[3])->Add(v4);
    ((List<V5>*)_colDatas[4])->Add(v5);
    ((List<V6>*)_colDatas[5])->Add(v6);
    ((List<V7>*)_colDatas[6])->Add(v7);
    ((List<V8>*)_colDatas[7])->Add(v8);
    ((List<V9>*)_colDatas[8])->Add(v9);
    ((List<V10>*)_colDatas[9])->Add(v10);
    ((List<V11>*)_colDatas[10])->Add(v11);
    ((List<V12>*)_colDatas[11])->Add(v12);
    ((List<V13>*)_colDatas[12])->Add(v13);
    ((List<V14>*)_colDatas[13])->Add(v14);
    ((List<V15>*)_colDatas[14])->Add(v15);
    ((List<V16>*)_colDatas[15])->Add(v16);
    ((List<V17>*)_colDatas[16])->Add(v17);
    ((List<V18>*)_colDatas[17])->Add(v18);
    ((List<V19>*)_colDatas[18])->Add(v19);
    ((List<V20>*)_colDatas[19])->Add(v20);
    ((List<V21>*)_colDatas[20])->Add(v21);
    ((List<V22>*)_colDatas[21])->Add(v22);
    ((List<V23>*)_colDatas[22])->Add(v23);
    ((List<V24>*)_colDatas[23])->Add(v24);
    ((List<V25>*)_colDatas[24])->Add(v25);
    ((List<V26>*)_colDatas[25])->Add(v26);
    ((List<V27>*)_colDatas[26])->Add(v27);
    ((List<V28>*)_colDatas[27])->Add(v28);
    ((List<V29>*)_colDatas[28])->Add(v29);
    ((List<V30>*)_colDatas[29])->Add(v30);
    ((List<V31>*)_colDatas[30])->Add(v31);
    ((List<V32>*)_colDatas[31])->Add(v32);
    ((List<V33>*)_colDatas[32])->Add(v33);
    ((List<V34>*)_colDatas[33])->Add(v34);
    ((List<V35>*)_colDatas[34])->Add(v35);
    ((List<V36>*)_colDatas[35])->Add(v36);
    ((List<V37>*)_colDatas[36])->Add(v37);
    ((List<V38>*)_colDatas[37])->Add(v38);
    ((List<V39>*)_colDatas[38])->Add(v39);
    ((List<V40>*)_colDatas[39])->Add(v40);
    ((List<V41>*)_colDatas[40])->Add(v41);
    ((List<V42>*)_colDatas[41])->Add(v42);
    ((List<V43>*)_colDatas[42])->Add(v43);
    ((List<V44>*)_colDatas[43])->Add(v44);
    ((List<V45>*)_colDatas[44])->Add(v45);
    ((List<V46>*)_colDatas[45])->Add(v46);
    ((List<V47>*)_colDatas[46])->Add(v47);
    ((List<V48>*)_colDatas[47])->Add(v48);
    ((List<V49>*)_colDatas[48])->Add(v49);
    ((List<V50>*)_colDatas[49])->Add(v50);
    ((List<V51>*)_colDatas[50])->Add(v51);
    ((List<V52>*)_colDatas[51])->Add(v52);
    ((List<V53>*)_colDatas[52])->Add(v53);
    ((List<V54>*)_colDatas[53])->Add(v54);
    ((List<V55>*)_colDatas[54])->Add(v55);
    ((List<V56>*)_colDatas[55])->Add(v56);
    ((List<V57>*)_colDatas[56])->Add(v57);
    ((List<V58>*)_colDatas[57])->Add(v58);
    ((List<V59>*)_colDatas[58])->Add(v59);
    ((List<V60>*)_colDatas[59])->Add(v60);
    ((List<V61>*)_colDatas[60])->Add(v61);
    ++_rowCount;
    return *this;
}
template<typename V1, typename V2, typename V3, typename V4, typename V5, typename V6, typename V7, typename V8, typename V9, typename V10, typename V11, typename V12, typename V13, typename V14, typename V15, typename V16, typename V17, typename V18, typename V19, typename V20, typename V21, typename V22, typename V23, typename V24, typename V25, typename V26, typename V27, typename V28, typename V29, typename V30, typename V31, typename V32, typename V33, typename V34, typename V35, typename V36, typename V37, typename V38, typename V39, typename V40, typename V41, typename V42, typename V43, typename V44, typename V45, typename V46, typename V47, typename V48, typename V49, typename V50, typename V51, typename V52, typename V53, typename V54, typename V55, typename V56, typename V57, typename V58, typename V59, typename V60, typename V61, typename V62>
DbTable & DbTable::AddRow(V1 const &v1, V2 const &v2, V3 const &v3, V4 const &v4, V5 const &v5, V6 const &v6, V7 const &v7, V8 const &v8, V9 const &v9, V10 const &v10, V11 const &v11, V12 const &v12, V13 const &v13, V14 const &v14, V15 const &v15, V16 const &v16, V17 const &v17, V18 const &v18, V19 const &v19, V20 const &v20, V21 const &v21, V22 const &v22, V23 const &v23, V24 const &v24, V25 const &v25, V26 const &v26, V27 const &v27, V28 const &v28, V29 const &v29, V30 const &v30, V31 const &v31, V32 const &v32, V33 const &v33, V34 const &v34, V35 const &v35, V36 const &v36, V37 const &v37, V38 const &v38, V39 const &v39, V40 const &v40, V41 const &v41, V42 const &v42, V43 const &v43, V44 const &v44, V45 const &v45, V46 const &v46, V47 const &v47, V48 const &v48, V49 const &v49, V50 const &v50, V51 const &v51, V52 const &v52, V53 const &v53, V54 const &v54, V55 const &v55, V56 const &v56, V57 const &v57, V58 const &v58, V59 const &v59, V60 const &v60, V61 const &v61, V62 const &v62) {
    assert( _colNames.Length() == 62 );
    assert( _colTypes[0] == DbTypeIDs<V1>::ID() );
    assert( _colTypes[1] == DbTypeIDs<V2>::ID() );
    assert( _colTypes[2] == DbTypeIDs<V3>::ID() );
    assert( _colTypes[3] == DbTypeIDs<V4>::ID() );
    assert( _colTypes[4] == DbTypeIDs<V5>::ID() );
    assert( _colTypes[5] == DbTypeIDs<V6>::ID() );
    assert( _colTypes[6] == DbTypeIDs<V7>::ID() );
    assert( _colTypes[7] == DbTypeIDs<V8>::ID() );
    assert( _colTypes[8] == DbTypeIDs<V9>::ID() );
    assert( _colTypes[9] == DbTypeIDs<V10>::ID() );
    assert( _colTypes[10] == DbTypeIDs<V11>::ID() );
    assert( _colTypes[11] == DbTypeIDs<V12>::ID() );
    assert( _colTypes[12] == DbTypeIDs<V13>::ID() );
    assert( _colTypes[13] == DbTypeIDs<V14>::ID() );
    assert( _colTypes[14] == DbTypeIDs<V15>::ID() );
    assert( _colTypes[15] == DbTypeIDs<V16>::ID() );
    assert( _colTypes[16] == DbTypeIDs<V17>::ID() );
    assert( _colTypes[17] == DbTypeIDs<V18>::ID() );
    assert( _colTypes[18] == DbTypeIDs<V19>::ID() );
    assert( _colTypes[19] == DbTypeIDs<V20>::ID() );
    assert( _colTypes[20] == DbTypeIDs<V21>::ID() );
    assert( _colTypes[21] == DbTypeIDs<V22>::ID() );
    assert( _colTypes[22] == DbTypeIDs<V23>::ID() );
    assert( _colTypes[23] == DbTypeIDs<V24>::ID() );
    assert( _colTypes[24] == DbTypeIDs<V25>::ID() );
    assert( _colTypes[25] == DbTypeIDs<V26>::ID() );
    assert( _colTypes[26] == DbTypeIDs<V27>::ID() );
    assert( _colTypes[27] == DbTypeIDs<V28>::ID() );
    assert( _colTypes[28] == DbTypeIDs<V29>::ID() );
    assert( _colTypes[29] == DbTypeIDs<V30>::ID() );
    assert( _colTypes[30] == DbTypeIDs<V31>::ID() );
    assert( _colTypes[31] == DbTypeIDs<V32>::ID() );
    assert( _colTypes[32] == DbTypeIDs<V33>::ID() );
    assert( _colTypes[33] == DbTypeIDs<V34>::ID() );
    assert( _colTypes[34] == DbTypeIDs<V35>::ID() );
    assert( _colTypes[35] == DbTypeIDs<V36>::ID() );
    assert( _colTypes[36] == DbTypeIDs<V37>::ID() );
    assert( _colTypes[37] == DbTypeIDs<V38>::ID() );
    assert( _colTypes[38] == DbTypeIDs<V39>::ID() );
    assert( _colTypes[39] == DbTypeIDs<V40>::ID() );
    assert( _colTypes[40] == DbTypeIDs<V41>::ID() );
    assert( _colTypes[41] == DbTypeIDs<V42>::ID() );
    assert( _colTypes[42] == DbTypeIDs<V43>::ID() );
    assert( _colTypes[43] == DbTypeIDs<V44>::ID() );
    assert( _colTypes[44] == DbTypeIDs<V45>::ID() );
    assert( _colTypes[45] == DbTypeIDs<V46>::ID() );
    assert( _colTypes[46] == DbTypeIDs<V47>::ID() );
    assert( _colTypes[47] == DbTypeIDs<V48>::ID() );
    assert( _colTypes[48] == DbTypeIDs<V49>::ID() );
    assert( _colTypes[49] == DbTypeIDs<V50>::ID() );
    assert( _colTypes[50] == DbTypeIDs<V51>::ID() );
    assert( _colTypes[51] == DbTypeIDs<V52>::ID() );
    assert( _colTypes[52] == DbTypeIDs<V53>::ID() );
    assert( _colTypes[53] == DbTypeIDs<V54>::ID() );
    assert( _colTypes[54] == DbTypeIDs<V55>::ID() );
    assert( _colTypes[55] == DbTypeIDs<V56>::ID() );
    assert( _colTypes[56] == DbTypeIDs<V57>::ID() );
    assert( _colTypes[57] == DbTypeIDs<V58>::ID() );
    assert( _colTypes[58] == DbTypeIDs<V59>::ID() );
    assert( _colTypes[59] == DbTypeIDs<V60>::ID() );
    assert( _colTypes[60] == DbTypeIDs<V61>::ID() );
    assert( _colTypes[61] == DbTypeIDs<V62>::ID() );
    ((List<V1>*)_colDatas[0])->Add(v1);
    ((List<V2>*)_colDatas[1])->Add(v2);
    ((List<V3>*)_colDatas[2])->Add(v3);
    ((List<V4>*)_colDatas[3])->Add(v4);
    ((List<V5>*)_colDatas[4])->Add(v5);
    ((List<V6>*)_colDatas[5])->Add(v6);
    ((List<V7>*)_colDatas[6])->Add(v7);
    ((List<V8>*)_colDatas[7])->Add(v8);
    ((List<V9>*)_colDatas[8])->Add(v9);
    ((List<V10>*)_colDatas[9])->Add(v10);
    ((List<V11>*)_colDatas[10])->Add(v11);
    ((List<V12>*)_colDatas[11])->Add(v12);
    ((List<V13>*)_colDatas[12])->Add(v13);
    ((List<V14>*)_colDatas[13])->Add(v14);
    ((List<V15>*)_colDatas[14])->Add(v15);
    ((List<V16>*)_colDatas[15])->Add(v16);
    ((List<V17>*)_colDatas[16])->Add(v17);
    ((List<V18>*)_colDatas[17])->Add(v18);
    ((List<V19>*)_colDatas[18])->Add(v19);
    ((List<V20>*)_colDatas[19])->Add(v20);
    ((List<V21>*)_colDatas[20])->Add(v21);
    ((List<V22>*)_colDatas[21])->Add(v22);
    ((List<V23>*)_colDatas[22])->Add(v23);
    ((List<V24>*)_colDatas[23])->Add(v24);
    ((List<V25>*)_colDatas[24])->Add(v25);
    ((List<V26>*)_colDatas[25])->Add(v26);
    ((List<V27>*)_colDatas[26])->Add(v27);
    ((List<V28>*)_colDatas[27])->Add(v28);
    ((List<V29>*)_colDatas[28])->Add(v29);
    ((List<V30>*)_colDatas[29])->Add(v30);
    ((List<V31>*)_colDatas[30])->Add(v31);
    ((List<V32>*)_colDatas[31])->Add(v32);
    ((List<V33>*)_colDatas[32])->Add(v33);
    ((List<V34>*)_colDatas[33])->Add(v34);
    ((List<V35>*)_colDatas[34])->Add(v35);
    ((List<V36>*)_colDatas[35])->Add(v36);
    ((List<V37>*)_colDatas[36])->Add(v37);
    ((List<V38>*)_colDatas[37])->Add(v38);
    ((List<V39>*)_colDatas[38])->Add(v39);
    ((List<V40>*)_colDatas[39])->Add(v40);
    ((List<V41>*)_colDatas[40])->Add(v41);
    ((List<V42>*)_colDatas[41])->Add(v42);
    ((List<V43>*)_colDatas[42])->Add(v43);
    ((List<V44>*)_colDatas[43])->Add(v44);
    ((List<V45>*)_colDatas[44])->Add(v45);
    ((List<V46>*)_colDatas[45])->Add(v46);
    ((List<V47>*)_colDatas[46])->Add(v47);
    ((List<V48>*)_colDatas[47])->Add(v48);
    ((List<V49>*)_colDatas[48])->Add(v49);
    ((List<V50>*)_colDatas[49])->Add(v50);
    ((List<V51>*)_colDatas[50])->Add(v51);
    ((List<V52>*)_colDatas[51])->Add(v52);
    ((List<V53>*)_colDatas[52])->Add(v53);
    ((List<V54>*)_colDatas[53])->Add(v54);
    ((List<V55>*)_colDatas[54])->Add(v55);
    ((List<V56>*)_colDatas[55])->Add(v56);
    ((List<V57>*)_colDatas[56])->Add(v57);
    ((List<V58>*)_colDatas[57])->Add(v58);
    ((List<V59>*)_colDatas[58])->Add(v59);
    ((List<V60>*)_colDatas[59])->Add(v60);
    ((List<V61>*)_colDatas[60])->Add(v61);
    ((List<V62>*)_colDatas[61])->Add(v62);
    ++_rowCount;
    return *this;
}
template<typename V1, typename V2, typename V3, typename V4, typename V5, typename V6, typename V7, typename V8, typename V9, typename V10, typename V11, typename V12, typename V13, typename V14, typename V15, typename V16, typename V17, typename V18, typename V19, typename V20, typename V21, typename V22, typename V23, typename V24, typename V25, typename V26, typename V27, typename V28, typename V29, typename V30, typename V31, typename V32, typename V33, typename V34, typename V35, typename V36, typename V37, typename V38, typename V39, typename V40, typename V41, typename V42, typename V43, typename V44, typename V45, typename V46, typename V47, typename V48, typename V49, typename V50, typename V51, typename V52, typename V53, typename V54, typename V55, typename V56, typename V57, typename V58, typename V59, typename V60, typename V61, typename V62, typename V63>
DbTable & DbTable::AddRow(V1 const &v1, V2 const &v2, V3 const &v3, V4 const &v4, V5 const &v5, V6 const &v6, V7 const &v7, V8 const &v8, V9 const &v9, V10 const &v10, V11 const &v11, V12 const &v12, V13 const &v13, V14 const &v14, V15 const &v15, V16 const &v16, V17 const &v17, V18 const &v18, V19 const &v19, V20 const &v20, V21 const &v21, V22 const &v22, V23 const &v23, V24 const &v24, V25 const &v25, V26 const &v26, V27 const &v27, V28 const &v28, V29 const &v29, V30 const &v30, V31 const &v31, V32 const &v32, V33 const &v33, V34 const &v34, V35 const &v35, V36 const &v36, V37 const &v37, V38 const &v38, V39 const &v39, V40 const &v40, V41 const &v41, V42 const &v42, V43 const &v43, V44 const &v44, V45 const &v45, V46 const &v46, V47 const &v47, V48 const &v48, V49 const &v49, V50 const &v50, V51 const &v51, V52 const &v52, V53 const &v53, V54 const &v54, V55 const &v55, V56 const &v56, V57 const &v57, V58 const &v58, V59 const &v59, V60 const &v60, V61 const &v61, V62 const &v62, V63 const &v63) {
    assert( _colNames.Length() == 63 );
    assert( _colTypes[0] == DbTypeIDs<V1>::ID() );
    assert( _colTypes[1] == DbTypeIDs<V2>::ID() );
    assert( _colTypes[2] == DbTypeIDs<V3>::ID() );
    assert( _colTypes[3] == DbTypeIDs<V4>::ID() );
    assert( _colTypes[4] == DbTypeIDs<V5>::ID() );
    assert( _colTypes[5] == DbTypeIDs<V6>::ID() );
    assert( _colTypes[6] == DbTypeIDs<V7>::ID() );
    assert( _colTypes[7] == DbTypeIDs<V8>::ID() );
    assert( _colTypes[8] == DbTypeIDs<V9>::ID() );
    assert( _colTypes[9] == DbTypeIDs<V10>::ID() );
    assert( _colTypes[10] == DbTypeIDs<V11>::ID() );
    assert( _colTypes[11] == DbTypeIDs<V12>::ID() );
    assert( _colTypes[12] == DbTypeIDs<V13>::ID() );
    assert( _colTypes[13] == DbTypeIDs<V14>::ID() );
    assert( _colTypes[14] == DbTypeIDs<V15>::ID() );
    assert( _colTypes[15] == DbTypeIDs<V16>::ID() );
    assert( _colTypes[16] == DbTypeIDs<V17>::ID() );
    assert( _colTypes[17] == DbTypeIDs<V18>::ID() );
    assert( _colTypes[18] == DbTypeIDs<V19>::ID() );
    assert( _colTypes[19] == DbTypeIDs<V20>::ID() );
    assert( _colTypes[20] == DbTypeIDs<V21>::ID() );
    assert( _colTypes[21] == DbTypeIDs<V22>::ID() );
    assert( _colTypes[22] == DbTypeIDs<V23>::ID() );
    assert( _colTypes[23] == DbTypeIDs<V24>::ID() );
    assert( _colTypes[24] == DbTypeIDs<V25>::ID() );
    assert( _colTypes[25] == DbTypeIDs<V26>::ID() );
    assert( _colTypes[26] == DbTypeIDs<V27>::ID() );
    assert( _colTypes[27] == DbTypeIDs<V28>::ID() );
    assert( _colTypes[28] == DbTypeIDs<V29>::ID() );
    assert( _colTypes[29] == DbTypeIDs<V30>::ID() );
    assert( _colTypes[30] == DbTypeIDs<V31>::ID() );
    assert( _colTypes[31] == DbTypeIDs<V32>::ID() );
    assert( _colTypes[32] == DbTypeIDs<V33>::ID() );
    assert( _colTypes[33] == DbTypeIDs<V34>::ID() );
    assert( _colTypes[34] == DbTypeIDs<V35>::ID() );
    assert( _colTypes[35] == DbTypeIDs<V36>::ID() );
    assert( _colTypes[36] == DbTypeIDs<V37>::ID() );
    assert( _colTypes[37] == DbTypeIDs<V38>::ID() );
    assert( _colTypes[38] == DbTypeIDs<V39>::ID() );
    assert( _colTypes[39] == DbTypeIDs<V40>::ID() );
    assert( _colTypes[40] == DbTypeIDs<V41>::ID() );
    assert( _colTypes[41] == DbTypeIDs<V42>::ID() );
    assert( _colTypes[42] == DbTypeIDs<V43>::ID() );
    assert( _colTypes[43] == DbTypeIDs<V44>::ID() );
    assert( _colTypes[44] == DbTypeIDs<V45>::ID() );
    assert( _colTypes[45] == DbTypeIDs<V46>::ID() );
    assert( _colTypes[46] == DbTypeIDs<V47>::ID() );
    assert( _colTypes[47] == DbTypeIDs<V48>::ID() );
    assert( _colTypes[48] == DbTypeIDs<V49>::ID() );
    assert( _colTypes[49] == DbTypeIDs<V50>::ID() );
    assert( _colTypes[50] == DbTypeIDs<V51>::ID() );
    assert( _colTypes[51] == DbTypeIDs<V52>::ID() );
    assert( _colTypes[52] == DbTypeIDs<V53>::ID() );
    assert( _colTypes[53] == DbTypeIDs<V54>::ID() );
    assert( _colTypes[54] == DbTypeIDs<V55>::ID() );
    assert( _colTypes[55] == DbTypeIDs<V56>::ID() );
    assert( _colTypes[56] == DbTypeIDs<V57>::ID() );
    assert( _colTypes[57] == DbTypeIDs<V58>::ID() );
    assert( _colTypes[58] == DbTypeIDs<V59>::ID() );
    assert( _colTypes[59] == DbTypeIDs<V60>::ID() );
    assert( _colTypes[60] == DbTypeIDs<V61>::ID() );
    assert( _colTypes[61] == DbTypeIDs<V62>::ID() );
    assert( _colTypes[62] == DbTypeIDs<V63>::ID() );
    ((List<V1>*)_colDatas[0])->Add(v1);
    ((List<V2>*)_colDatas[1])->Add(v2);
    ((List<V3>*)_colDatas[2])->Add(v3);
    ((List<V4>*)_colDatas[3])->Add(v4);
    ((List<V5>*)_colDatas[4])->Add(v5);
    ((List<V6>*)_colDatas[5])->Add(v6);
    ((List<V7>*)_colDatas[6])->Add(v7);
    ((List<V8>*)_colDatas[7])->Add(v8);
    ((List<V9>*)_colDatas[8])->Add(v9);
    ((List<V10>*)_colDatas[9])->Add(v10);
    ((List<V11>*)_colDatas[10])->Add(v11);
    ((List<V12>*)_colDatas[11])->Add(v12);
    ((List<V13>*)_colDatas[12])->Add(v13);
    ((List<V14>*)_colDatas[13])->Add(v14);
    ((List<V15>*)_colDatas[14])->Add(v15);
    ((List<V16>*)_colDatas[15])->Add(v16);
    ((List<V17>*)_colDatas[16])->Add(v17);
    ((List<V18>*)_colDatas[17])->Add(v18);
    ((List<V19>*)_colDatas[18])->Add(v19);
    ((List<V20>*)_colDatas[19])->Add(v20);
    ((List<V21>*)_colDatas[20])->Add(v21);
    ((List<V22>*)_colDatas[21])->Add(v22);
    ((List<V23>*)_colDatas[22])->Add(v23);
    ((List<V24>*)_colDatas[23])->Add(v24);
    ((List<V25>*)_colDatas[24])->Add(v25);
    ((List<V26>*)_colDatas[25])->Add(v26);
    ((List<V27>*)_colDatas[26])->Add(v27);
    ((List<V28>*)_colDatas[27])->Add(v28);
    ((List<V29>*)_colDatas[28])->Add(v29);
    ((List<V30>*)_colDatas[29])->Add(v30);
    ((List<V31>*)_colDatas[30])->Add(v31);
    ((List<V32>*)_colDatas[31])->Add(v32);
    ((List<V33>*)_colDatas[32])->Add(v33);
    ((List<V34>*)_colDatas[33])->Add(v34);
    ((List<V35>*)_colDatas[34])->Add(v35);
    ((List<V36>*)_colDatas[35])->Add(v36);
    ((List<V37>*)_colDatas[36])->Add(v37);
    ((List<V38>*)_colDatas[37])->Add(v38);
    ((List<V39>*)_colDatas[38])->Add(v39);
    ((List<V40>*)_colDatas[39])->Add(v40);
    ((List<V41>*)_colDatas[40])->Add(v41);
    ((List<V42>*)_colDatas[41])->Add(v42);
    ((List<V43>*)_colDatas[42])->Add(v43);
    ((List<V44>*)_colDatas[43])->Add(v44);
    ((List<V45>*)_colDatas[44])->Add(v45);
    ((List<V46>*)_colDatas[45])->Add(v46);
    ((List<V47>*)_colDatas[46])->Add(v47);
    ((List<V48>*)_colDatas[47])->Add(v48);
    ((List<V49>*)_colDatas[48])->Add(v49);
    ((List<V50>*)_colDatas[49])->Add(v50);
    ((List<V51>*)_colDatas[50])->Add(v51);
    ((List<V52>*)_colDatas[51])->Add(v52);
    ((List<V53>*)_colDatas[52])->Add(v53);
    ((List<V54>*)_colDatas[53])->Add(v54);
    ((List<V55>*)_colDatas[54])->Add(v55);
    ((List<V56>*)_colDatas[55])->Add(v56);
    ((List<V57>*)_colDatas[56])->Add(v57);
    ((List<V58>*)_colDatas[57])->Add(v58);
    ((List<V59>*)_colDatas[58])->Add(v59);
    ((List<V60>*)_colDatas[59])->Add(v60);
    ((List<V61>*)_colDatas[60])->Add(v61);
    ((List<V62>*)_colDatas[61])->Add(v62);
    ((List<V63>*)_colDatas[62])->Add(v63);
    ++_rowCount;
    return *this;
}
template<typename V1, typename V2, typename V3, typename V4, typename V5, typename V6, typename V7, typename V8, typename V9, typename V10, typename V11, typename V12, typename V13, typename V14, typename V15, typename V16, typename V17, typename V18, typename V19, typename V20, typename V21, typename V22, typename V23, typename V24, typename V25, typename V26, typename V27, typename V28, typename V29, typename V30, typename V31, typename V32, typename V33, typename V34, typename V35, typename V36, typename V37, typename V38, typename V39, typename V40, typename V41, typename V42, typename V43, typename V44, typename V45, typename V46, typename V47, typename V48, typename V49, typename V50, typename V51, typename V52, typename V53, typename V54, typename V55, typename V56, typename V57, typename V58, typename V59, typename V60, typename V61, typename V62, typename V63, typename V64>
DbTable & DbTable::AddRow(V1 const &v1, V2 const &v2, V3 const &v3, V4 const &v4, V5 const &v5, V6 const &v6, V7 const &v7, V8 const &v8, V9 const &v9, V10 const &v10, V11 const &v11, V12 const &v12, V13 const &v13, V14 const &v14, V15 const &v15, V16 const &v16, V17 const &v17, V18 const &v18, V19 const &v19, V20 const &v20, V21 const &v21, V22 const &v22, V23 const &v23, V24 const &v24, V25 const &v25, V26 const &v26, V27 const &v27, V28 const &v28, V29 const &v29, V30 const &v30, V31 const &v31, V32 const &v32, V33 const &v33, V34 const &v34, V35 const &v35, V36 const &v36, V37 const &v37, V38 const &v38, V39 const &v39, V40 const &v40, V41 const &v41, V42 const &v42, V43 const &v43, V44 const &v44, V45 const &v45, V46 const &v46, V47 const &v47, V48 const &v48, V49 const &v49, V50 const &v50, V51 const &v51, V52 const &v52, V53 const &v53, V54 const &v54, V55 const &v55, V56 const &v56, V57 const &v57, V58 const &v58, V59 const &v59, V60 const &v60, V61 const &v61, V62 const &v62, V63 const &v63, V64 const &v64) {
    assert( _colNames.Length() == 64 );
    assert( _colTypes[0] == DbTypeIDs<V1>::ID() );
    assert( _colTypes[1] == DbTypeIDs<V2>::ID() );
    assert( _colTypes[2] == DbTypeIDs<V3>::ID() );
    assert( _colTypes[3] == DbTypeIDs<V4>::ID() );
    assert( _colTypes[4] == DbTypeIDs<V5>::ID() );
    assert( _colTypes[5] == DbTypeIDs<V6>::ID() );
    assert( _colTypes[6] == DbTypeIDs<V7>::ID() );
    assert( _colTypes[7] == DbTypeIDs<V8>::ID() );
    assert( _colTypes[8] == DbTypeIDs<V9>::ID() );
    assert( _colTypes[9] == DbTypeIDs<V10>::ID() );
    assert( _colTypes[10] == DbTypeIDs<V11>::ID() );
    assert( _colTypes[11] == DbTypeIDs<V12>::ID() );
    assert( _colTypes[12] == DbTypeIDs<V13>::ID() );
    assert( _colTypes[13] == DbTypeIDs<V14>::ID() );
    assert( _colTypes[14] == DbTypeIDs<V15>::ID() );
    assert( _colTypes[15] == DbTypeIDs<V16>::ID() );
    assert( _colTypes[16] == DbTypeIDs<V17>::ID() );
    assert( _colTypes[17] == DbTypeIDs<V18>::ID() );
    assert( _colTypes[18] == DbTypeIDs<V19>::ID() );
    assert( _colTypes[19] == DbTypeIDs<V20>::ID() );
    assert( _colTypes[20] == DbTypeIDs<V21>::ID() );
    assert( _colTypes[21] == DbTypeIDs<V22>::ID() );
    assert( _colTypes[22] == DbTypeIDs<V23>::ID() );
    assert( _colTypes[23] == DbTypeIDs<V24>::ID() );
    assert( _colTypes[24] == DbTypeIDs<V25>::ID() );
    assert( _colTypes[25] == DbTypeIDs<V26>::ID() );
    assert( _colTypes[26] == DbTypeIDs<V27>::ID() );
    assert( _colTypes[27] == DbTypeIDs<V28>::ID() );
    assert( _colTypes[28] == DbTypeIDs<V29>::ID() );
    assert( _colTypes[29] == DbTypeIDs<V30>::ID() );
    assert( _colTypes[30] == DbTypeIDs<V31>::ID() );
    assert( _colTypes[31] == DbTypeIDs<V32>::ID() );
    assert( _colTypes[32] == DbTypeIDs<V33>::ID() );
    assert( _colTypes[33] == DbTypeIDs<V34>::ID() );
    assert( _colTypes[34] == DbTypeIDs<V35>::ID() );
    assert( _colTypes[35] == DbTypeIDs<V36>::ID() );
    assert( _colTypes[36] == DbTypeIDs<V37>::ID() );
    assert( _colTypes[37] == DbTypeIDs<V38>::ID() );
    assert( _colTypes[38] == DbTypeIDs<V39>::ID() );
    assert( _colTypes[39] == DbTypeIDs<V40>::ID() );
    assert( _colTypes[40] == DbTypeIDs<V41>::ID() );
    assert( _colTypes[41] == DbTypeIDs<V42>::ID() );
    assert( _colTypes[42] == DbTypeIDs<V43>::ID() );
    assert( _colTypes[43] == DbTypeIDs<V44>::ID() );
    assert( _colTypes[44] == DbTypeIDs<V45>::ID() );
    assert( _colTypes[45] == DbTypeIDs<V46>::ID() );
    assert( _colTypes[46] == DbTypeIDs<V47>::ID() );
    assert( _colTypes[47] == DbTypeIDs<V48>::ID() );
    assert( _colTypes[48] == DbTypeIDs<V49>::ID() );
    assert( _colTypes[49] == DbTypeIDs<V50>::ID() );
    assert( _colTypes[50] == DbTypeIDs<V51>::ID() );
    assert( _colTypes[51] == DbTypeIDs<V52>::ID() );
    assert( _colTypes[52] == DbTypeIDs<V53>::ID() );
    assert( _colTypes[53] == DbTypeIDs<V54>::ID() );
    assert( _colTypes[54] == DbTypeIDs<V55>::ID() );
    assert( _colTypes[55] == DbTypeIDs<V56>::ID() );
    assert( _colTypes[56] == DbTypeIDs<V57>::ID() );
    assert( _colTypes[57] == DbTypeIDs<V58>::ID() );
    assert( _colTypes[58] == DbTypeIDs<V59>::ID() );
    assert( _colTypes[59] == DbTypeIDs<V60>::ID() );
    assert( _colTypes[60] == DbTypeIDs<V61>::ID() );
    assert( _colTypes[61] == DbTypeIDs<V62>::ID() );
    assert( _colTypes[62] == DbTypeIDs<V63>::ID() );
    assert( _colTypes[63] == DbTypeIDs<V64>::ID() );
    ((List<V1>*)_colDatas[0])->Add(v1);
    ((List<V2>*)_colDatas[1])->Add(v2);
    ((List<V3>*)_colDatas[2])->Add(v3);
    ((List<V4>*)_colDatas[3])->Add(v4);
    ((List<V5>*)_colDatas[4])->Add(v5);
    ((List<V6>*)_colDatas[5])->Add(v6);
    ((List<V7>*)_colDatas[6])->Add(v7);
    ((List<V8>*)_colDatas[7])->Add(v8);
    ((List<V9>*)_colDatas[8])->Add(v9);
    ((List<V10>*)_colDatas[9])->Add(v10);
    ((List<V11>*)_colDatas[10])->Add(v11);
    ((List<V12>*)_colDatas[11])->Add(v12);
    ((List<V13>*)_colDatas[12])->Add(v13);
    ((List<V14>*)_colDatas[13])->Add(v14);
    ((List<V15>*)_colDatas[14])->Add(v15);
    ((List<V16>*)_colDatas[15])->Add(v16);
    ((List<V17>*)_colDatas[16])->Add(v17);
    ((List<V18>*)_colDatas[17])->Add(v18);
    ((List<V19>*)_colDatas[18])->Add(v19);
    ((List<V20>*)_colDatas[19])->Add(v20);
    ((List<V21>*)_colDatas[20])->Add(v21);
    ((List<V22>*)_colDatas[21])->Add(v22);
    ((List<V23>*)_colDatas[22])->Add(v23);
    ((List<V24>*)_colDatas[23])->Add(v24);
    ((List<V25>*)_colDatas[24])->Add(v25);
    ((List<V26>*)_colDatas[25])->Add(v26);
    ((List<V27>*)_colDatas[26])->Add(v27);
    ((List<V28>*)_colDatas[27])->Add(v28);
    ((List<V29>*)_colDatas[28])->Add(v29);
    ((List<V30>*)_colDatas[29])->Add(v30);
    ((List<V31>*)_colDatas[30])->Add(v31);
    ((List<V32>*)_colDatas[31])->Add(v32);
    ((List<V33>*)_colDatas[32])->Add(v33);
    ((List<V34>*)_colDatas[33])->Add(v34);
    ((List<V35>*)_colDatas[34])->Add(v35);
    ((List<V36>*)_colDatas[35])->Add(v36);
    ((List<V37>*)_colDatas[36])->Add(v37);
    ((List<V38>*)_colDatas[37])->Add(v38);
    ((List<V39>*)_colDatas[38])->Add(v39);
    ((List<V40>*)_colDatas[39])->Add(v40);
    ((List<V41>*)_colDatas[40])->Add(v41);
    ((List<V42>*)_colDatas[41])->Add(v42);
    ((List<V43>*)_colDatas[42])->Add(v43);
    ((List<V44>*)_colDatas[43])->Add(v44);
    ((List<V45>*)_colDatas[44])->Add(v45);
    ((List<V46>*)_colDatas[45])->Add(v46);
    ((List<V47>*)_colDatas[46])->Add(v47);
    ((List<V48>*)_colDatas[47])->Add(v48);
    ((List<V49>*)_colDatas[48])->Add(v49);
    ((List<V50>*)_colDatas[49])->Add(v50);
    ((List<V51>*)_colDatas[50])->Add(v51);
    ((List<V52>*)_colDatas[51])->Add(v52);
    ((List<V53>*)_colDatas[52])->Add(v53);
    ((List<V54>*)_colDatas[53])->Add(v54);
    ((List<V55>*)_colDatas[54])->Add(v55);
    ((List<V56>*)_colDatas[55])->Add(v56);
    ((List<V57>*)_colDatas[56])->Add(v57);
    ((List<V58>*)_colDatas[57])->Add(v58);
    ((List<V59>*)_colDatas[58])->Add(v59);
    ((List<V60>*)_colDatas[59])->Add(v60);
    ((List<V61>*)_colDatas[60])->Add(v61);
    ((List<V62>*)_colDatas[61])->Add(v62);
    ((List<V63>*)_colDatas[62])->Add(v63);
    ((List<V64>*)_colDatas[63])->Add(v64);
    ++_rowCount;
    return *this;
}
template<typename V1, typename V2, typename V3, typename V4, typename V5, typename V6, typename V7, typename V8, typename V9, typename V10, typename V11, typename V12, typename V13, typename V14, typename V15, typename V16, typename V17, typename V18, typename V19, typename V20, typename V21, typename V22, typename V23, typename V24, typename V25, typename V26, typename V27, typename V28, typename V29, typename V30, typename V31, typename V32, typename V33, typename V34, typename V35, typename V36, typename V37, typename V38, typename V39, typename V40, typename V41, typename V42, typename V43, typename V44, typename V45, typename V46, typename V47, typename V48, typename V49, typename V50, typename V51, typename V52, typename V53, typename V54, typename V55, typename V56, typename V57, typename V58, typename V59, typename V60, typename V61, typename V62, typename V63, typename V64, typename V65>
DbTable & DbTable::AddRow(V1 const &v1, V2 const &v2, V3 const &v3, V4 const &v4, V5 const &v5, V6 const &v6, V7 const &v7, V8 const &v8, V9 const &v9, V10 const &v10, V11 const &v11, V12 const &v12, V13 const &v13, V14 const &v14, V15 const &v15, V16 const &v16, V17 const &v17, V18 const &v18, V19 const &v19, V20 const &v20, V21 const &v21, V22 const &v22, V23 const &v23, V24 const &v24, V25 const &v25, V26 const &v26, V27 const &v27, V28 const &v28, V29 const &v29, V30 const &v30, V31 const &v31, V32 const &v32, V33 const &v33, V34 const &v34, V35 const &v35, V36 const &v36, V37 const &v37, V38 const &v38, V39 const &v39, V40 const &v40, V41 const &v41, V42 const &v42, V43 const &v43, V44 const &v44, V45 const &v45, V46 const &v46, V47 const &v47, V48 const &v48, V49 const &v49, V50 const &v50, V51 const &v51, V52 const &v52, V53 const &v53, V54 const &v54, V55 const &v55, V56 const &v56, V57 const &v57, V58 const &v58, V59 const &v59, V60 const &v60, V61 const &v61, V62 const &v62, V63 const &v63, V64 const &v64, V65 const &v65) {
    assert( _colNames.Length() == 65 );
    assert( _colTypes[0] == DbTypeIDs<V1>::ID() );
    assert( _colTypes[1] == DbTypeIDs<V2>::ID() );
    assert( _colTypes[2] == DbTypeIDs<V3>::ID() );
    assert( _colTypes[3] == DbTypeIDs<V4>::ID() );
    assert( _colTypes[4] == DbTypeIDs<V5>::ID() );
    assert( _colTypes[5] == DbTypeIDs<V6>::ID() );
    assert( _colTypes[6] == DbTypeIDs<V7>::ID() );
    assert( _colTypes[7] == DbTypeIDs<V8>::ID() );
    assert( _colTypes[8] == DbTypeIDs<V9>::ID() );
    assert( _colTypes[9] == DbTypeIDs<V10>::ID() );
    assert( _colTypes[10] == DbTypeIDs<V11>::ID() );
    assert( _colTypes[11] == DbTypeIDs<V12>::ID() );
    assert( _colTypes[12] == DbTypeIDs<V13>::ID() );
    assert( _colTypes[13] == DbTypeIDs<V14>::ID() );
    assert( _colTypes[14] == DbTypeIDs<V15>::ID() );
    assert( _colTypes[15] == DbTypeIDs<V16>::ID() );
    assert( _colTypes[16] == DbTypeIDs<V17>::ID() );
    assert( _colTypes[17] == DbTypeIDs<V18>::ID() );
    assert( _colTypes[18] == DbTypeIDs<V19>::ID() );
    assert( _colTypes[19] == DbTypeIDs<V20>::ID() );
    assert( _colTypes[20] == DbTypeIDs<V21>::ID() );
    assert( _colTypes[21] == DbTypeIDs<V22>::ID() );
    assert( _colTypes[22] == DbTypeIDs<V23>::ID() );
    assert( _colTypes[23] == DbTypeIDs<V24>::ID() );
    assert( _colTypes[24] == DbTypeIDs<V25>::ID() );
    assert( _colTypes[25] == DbTypeIDs<V26>::ID() );
    assert( _colTypes[26] == DbTypeIDs<V27>::ID() );
    assert( _colTypes[27] == DbTypeIDs<V28>::ID() );
    assert( _colTypes[28] == DbTypeIDs<V29>::ID() );
    assert( _colTypes[29] == DbTypeIDs<V30>::ID() );
    assert( _colTypes[30] == DbTypeIDs<V31>::ID() );
    assert( _colTypes[31] == DbTypeIDs<V32>::ID() );
    assert( _colTypes[32] == DbTypeIDs<V33>::ID() );
    assert( _colTypes[33] == DbTypeIDs<V34>::ID() );
    assert( _colTypes[34] == DbTypeIDs<V35>::ID() );
    assert( _colTypes[35] == DbTypeIDs<V36>::ID() );
    assert( _colTypes[36] == DbTypeIDs<V37>::ID() );
    assert( _colTypes[37] == DbTypeIDs<V38>::ID() );
    assert( _colTypes[38] == DbTypeIDs<V39>::ID() );
    assert( _colTypes[39] == DbTypeIDs<V40>::ID() );
    assert( _colTypes[40] == DbTypeIDs<V41>::ID() );
    assert( _colTypes[41] == DbTypeIDs<V42>::ID() );
    assert( _colTypes[42] == DbTypeIDs<V43>::ID() );
    assert( _colTypes[43] == DbTypeIDs<V44>::ID() );
    assert( _colTypes[44] == DbTypeIDs<V45>::ID() );
    assert( _colTypes[45] == DbTypeIDs<V46>::ID() );
    assert( _colTypes[46] == DbTypeIDs<V47>::ID() );
    assert( _colTypes[47] == DbTypeIDs<V48>::ID() );
    assert( _colTypes[48] == DbTypeIDs<V49>::ID() );
    assert( _colTypes[49] == DbTypeIDs<V50>::ID() );
    assert( _colTypes[50] == DbTypeIDs<V51>::ID() );
    assert( _colTypes[51] == DbTypeIDs<V52>::ID() );
    assert( _colTypes[52] == DbTypeIDs<V53>::ID() );
    assert( _colTypes[53] == DbTypeIDs<V54>::ID() );
    assert( _colTypes[54] == DbTypeIDs<V55>::ID() );
    assert( _colTypes[55] == DbTypeIDs<V56>::ID() );
    assert( _colTypes[56] == DbTypeIDs<V57>::ID() );
    assert( _colTypes[57] == DbTypeIDs<V58>::ID() );
    assert( _colTypes[58] == DbTypeIDs<V59>::ID() );
    assert( _colTypes[59] == DbTypeIDs<V60>::ID() );
    assert( _colTypes[60] == DbTypeIDs<V61>::ID() );
    assert( _colTypes[61] == DbTypeIDs<V62>::ID() );
    assert( _colTypes[62] == DbTypeIDs<V63>::ID() );
    assert( _colTypes[63] == DbTypeIDs<V64>::ID() );
    assert( _colTypes[64] == DbTypeIDs<V65>::ID() );
    ((List<V1>*)_colDatas[0])->Add(v1);
    ((List<V2>*)_colDatas[1])->Add(v2);
    ((List<V3>*)_colDatas[2])->Add(v3);
    ((List<V4>*)_colDatas[3])->Add(v4);
    ((List<V5>*)_colDatas[4])->Add(v5);
    ((List<V6>*)_colDatas[5])->Add(v6);
    ((List<V7>*)_colDatas[6])->Add(v7);
    ((List<V8>*)_colDatas[7])->Add(v8);
    ((List<V9>*)_colDatas[8])->Add(v9);
    ((List<V10>*)_colDatas[9])->Add(v10);
    ((List<V11>*)_colDatas[10])->Add(v11);
    ((List<V12>*)_colDatas[11])->Add(v12);
    ((List<V13>*)_colDatas[12])->Add(v13);
    ((List<V14>*)_colDatas[13])->Add(v14);
    ((List<V15>*)_colDatas[14])->Add(v15);
    ((List<V16>*)_colDatas[15])->Add(v16);
    ((List<V17>*)_colDatas[16])->Add(v17);
    ((List<V18>*)_colDatas[17])->Add(v18);
    ((List<V19>*)_colDatas[18])->Add(v19);
    ((List<V20>*)_colDatas[19])->Add(v20);
    ((List<V21>*)_colDatas[20])->Add(v21);
    ((List<V22>*)_colDatas[21])->Add(v22);
    ((List<V23>*)_colDatas[22])->Add(v23);
    ((List<V24>*)_colDatas[23])->Add(v24);
    ((List<V25>*)_colDatas[24])->Add(v25);
    ((List<V26>*)_colDatas[25])->Add(v26);
    ((List<V27>*)_colDatas[26])->Add(v27);
    ((List<V28>*)_colDatas[27])->Add(v28);
    ((List<V29>*)_colDatas[28])->Add(v29);
    ((List<V30>*)_colDatas[29])->Add(v30);
    ((List<V31>*)_colDatas[30])->Add(v31);
    ((List<V32>*)_colDatas[31])->Add(v32);
    ((List<V33>*)_colDatas[32])->Add(v33);
    ((List<V34>*)_colDatas[33])->Add(v34);
    ((List<V35>*)_colDatas[34])->Add(v35);
    ((List<V36>*)_colDatas[35])->Add(v36);
    ((List<V37>*)_colDatas[36])->Add(v37);
    ((List<V38>*)_colDatas[37])->Add(v38);
    ((List<V39>*)_colDatas[38])->Add(v39);
    ((List<V40>*)_colDatas[39])->Add(v40);
    ((List<V41>*)_colDatas[40])->Add(v41);
    ((List<V42>*)_colDatas[41])->Add(v42);
    ((List<V43>*)_colDatas[42])->Add(v43);
    ((List<V44>*)_colDatas[43])->Add(v44);
    ((List<V45>*)_colDatas[44])->Add(v45);
    ((List<V46>*)_colDatas[45])->Add(v46);
    ((List<V47>*)_colDatas[46])->Add(v47);
    ((List<V48>*)_colDatas[47])->Add(v48);
    ((List<V49>*)_colDatas[48])->Add(v49);
    ((List<V50>*)_colDatas[49])->Add(v50);
    ((List<V51>*)_colDatas[50])->Add(v51);
    ((List<V52>*)_colDatas[51])->Add(v52);
    ((List<V53>*)_colDatas[52])->Add(v53);
    ((List<V54>*)_colDatas[53])->Add(v54);
    ((List<V55>*)_colDatas[54])->Add(v55);
    ((List<V56>*)_colDatas[55])->Add(v56);
    ((List<V57>*)_colDatas[56])->Add(v57);
    ((List<V58>*)_colDatas[57])->Add(v58);
    ((List<V59>*)_colDatas[58])->Add(v59);
    ((List<V60>*)_colDatas[59])->Add(v60);
    ((List<V61>*)_colDatas[60])->Add(v61);
    ((List<V62>*)_colDatas[61])->Add(v62);
    ((List<V63>*)_colDatas[62])->Add(v63);
    ((List<V64>*)_colDatas[63])->Add(v64);
    ((List<V65>*)_colDatas[64])->Add(v65);
    ++_rowCount;
    return *this;
}
template<typename V1, typename V2, typename V3, typename V4, typename V5, typename V6, typename V7, typename V8, typename V9, typename V10, typename V11, typename V12, typename V13, typename V14, typename V15, typename V16, typename V17, typename V18, typename V19, typename V20, typename V21, typename V22, typename V23, typename V24, typename V25, typename V26, typename V27, typename V28, typename V29, typename V30, typename V31, typename V32, typename V33, typename V34, typename V35, typename V36, typename V37, typename V38, typename V39, typename V40, typename V41, typename V42, typename V43, typename V44, typename V45, typename V46, typename V47, typename V48, typename V49, typename V50, typename V51, typename V52, typename V53, typename V54, typename V55, typename V56, typename V57, typename V58, typename V59, typename V60, typename V61, typename V62, typename V63, typename V64, typename V65, typename V66>
DbTable & DbTable::AddRow(V1 const &v1, V2 const &v2, V3 const &v3, V4 const &v4, V5 const &v5, V6 const &v6, V7 const &v7, V8 const &v8, V9 const &v9, V10 const &v10, V11 const &v11, V12 const &v12, V13 const &v13, V14 const &v14, V15 const &v15, V16 const &v16, V17 const &v17, V18 const &v18, V19 const &v19, V20 const &v20, V21 const &v21, V22 const &v22, V23 const &v23, V24 const &v24, V25 const &v25, V26 const &v26, V27 const &v27, V28 const &v28, V29 const &v29, V30 const &v30, V31 const &v31, V32 const &v32, V33 const &v33, V34 const &v34, V35 const &v35, V36 const &v36, V37 const &v37, V38 const &v38, V39 const &v39, V40 const &v40, V41 const &v41, V42 const &v42, V43 const &v43, V44 const &v44, V45 const &v45, V46 const &v46, V47 const &v47, V48 const &v48, V49 const &v49, V50 const &v50, V51 const &v51, V52 const &v52, V53 const &v53, V54 const &v54, V55 const &v55, V56 const &v56, V57 const &v57, V58 const &v58, V59 const &v59, V60 const &v60, V61 const &v61, V62 const &v62, V63 const &v63, V64 const &v64, V65 const &v65, V66 const &v66) {
    assert( _colNames.Length() == 66 );
    assert( _colTypes[0] == DbTypeIDs<V1>::ID() );
    assert( _colTypes[1] == DbTypeIDs<V2>::ID() );
    assert( _colTypes[2] == DbTypeIDs<V3>::ID() );
    assert( _colTypes[3] == DbTypeIDs<V4>::ID() );
    assert( _colTypes[4] == DbTypeIDs<V5>::ID() );
    assert( _colTypes[5] == DbTypeIDs<V6>::ID() );
    assert( _colTypes[6] == DbTypeIDs<V7>::ID() );
    assert( _colTypes[7] == DbTypeIDs<V8>::ID() );
    assert( _colTypes[8] == DbTypeIDs<V9>::ID() );
    assert( _colTypes[9] == DbTypeIDs<V10>::ID() );
    assert( _colTypes[10] == DbTypeIDs<V11>::ID() );
    assert( _colTypes[11] == DbTypeIDs<V12>::ID() );
    assert( _colTypes[12] == DbTypeIDs<V13>::ID() );
    assert( _colTypes[13] == DbTypeIDs<V14>::ID() );
    assert( _colTypes[14] == DbTypeIDs<V15>::ID() );
    assert( _colTypes[15] == DbTypeIDs<V16>::ID() );
    assert( _colTypes[16] == DbTypeIDs<V17>::ID() );
    assert( _colTypes[17] == DbTypeIDs<V18>::ID() );
    assert( _colTypes[18] == DbTypeIDs<V19>::ID() );
    assert( _colTypes[19] == DbTypeIDs<V20>::ID() );
    assert( _colTypes[20] == DbTypeIDs<V21>::ID() );
    assert( _colTypes[21] == DbTypeIDs<V22>::ID() );
    assert( _colTypes[22] == DbTypeIDs<V23>::ID() );
    assert( _colTypes[23] == DbTypeIDs<V24>::ID() );
    assert( _colTypes[24] == DbTypeIDs<V25>::ID() );
    assert( _colTypes[25] == DbTypeIDs<V26>::ID() );
    assert( _colTypes[26] == DbTypeIDs<V27>::ID() );
    assert( _colTypes[27] == DbTypeIDs<V28>::ID() );
    assert( _colTypes[28] == DbTypeIDs<V29>::ID() );
    assert( _colTypes[29] == DbTypeIDs<V30>::ID() );
    assert( _colTypes[30] == DbTypeIDs<V31>::ID() );
    assert( _colTypes[31] == DbTypeIDs<V32>::ID() );
    assert( _colTypes[32] == DbTypeIDs<V33>::ID() );
    assert( _colTypes[33] == DbTypeIDs<V34>::ID() );
    assert( _colTypes[34] == DbTypeIDs<V35>::ID() );
    assert( _colTypes[35] == DbTypeIDs<V36>::ID() );
    assert( _colTypes[36] == DbTypeIDs<V37>::ID() );
    assert( _colTypes[37] == DbTypeIDs<V38>::ID() );
    assert( _colTypes[38] == DbTypeIDs<V39>::ID() );
    assert( _colTypes[39] == DbTypeIDs<V40>::ID() );
    assert( _colTypes[40] == DbTypeIDs<V41>::ID() );
    assert( _colTypes[41] == DbTypeIDs<V42>::ID() );
    assert( _colTypes[42] == DbTypeIDs<V43>::ID() );
    assert( _colTypes[43] == DbTypeIDs<V44>::ID() );
    assert( _colTypes[44] == DbTypeIDs<V45>::ID() );
    assert( _colTypes[45] == DbTypeIDs<V46>::ID() );
    assert( _colTypes[46] == DbTypeIDs<V47>::ID() );
    assert( _colTypes[47] == DbTypeIDs<V48>::ID() );
    assert( _colTypes[48] == DbTypeIDs<V49>::ID() );
    assert( _colTypes[49] == DbTypeIDs<V50>::ID() );
    assert( _colTypes[50] == DbTypeIDs<V51>::ID() );
    assert( _colTypes[51] == DbTypeIDs<V52>::ID() );
    assert( _colTypes[52] == DbTypeIDs<V53>::ID() );
    assert( _colTypes[53] == DbTypeIDs<V54>::ID() );
    assert( _colTypes[54] == DbTypeIDs<V55>::ID() );
    assert( _colTypes[55] == DbTypeIDs<V56>::ID() );
    assert( _colTypes[56] == DbTypeIDs<V57>::ID() );
    assert( _colTypes[57] == DbTypeIDs<V58>::ID() );
    assert( _colTypes[58] == DbTypeIDs<V59>::ID() );
    assert( _colTypes[59] == DbTypeIDs<V60>::ID() );
    assert( _colTypes[60] == DbTypeIDs<V61>::ID() );
    assert( _colTypes[61] == DbTypeIDs<V62>::ID() );
    assert( _colTypes[62] == DbTypeIDs<V63>::ID() );
    assert( _colTypes[63] == DbTypeIDs<V64>::ID() );
    assert( _colTypes[64] == DbTypeIDs<V65>::ID() );
    assert( _colTypes[65] == DbTypeIDs<V66>::ID() );
    ((List<V1>*)_colDatas[0])->Add(v1);
    ((List<V2>*)_colDatas[1])->Add(v2);
    ((List<V3>*)_colDatas[2])->Add(v3);
    ((List<V4>*)_colDatas[3])->Add(v4);
    ((List<V5>*)_colDatas[4])->Add(v5);
    ((List<V6>*)_colDatas[5])->Add(v6);
    ((List<V7>*)_colDatas[6])->Add(v7);
    ((List<V8>*)_colDatas[7])->Add(v8);
    ((List<V9>*)_colDatas[8])->Add(v9);
    ((List<V10>*)_colDatas[9])->Add(v10);
    ((List<V11>*)_colDatas[10])->Add(v11);
    ((List<V12>*)_colDatas[11])->Add(v12);
    ((List<V13>*)_colDatas[12])->Add(v13);
    ((List<V14>*)_colDatas[13])->Add(v14);
    ((List<V15>*)_colDatas[14])->Add(v15);
    ((List<V16>*)_colDatas[15])->Add(v16);
    ((List<V17>*)_colDatas[16])->Add(v17);
    ((List<V18>*)_colDatas[17])->Add(v18);
    ((List<V19>*)_colDatas[18])->Add(v19);
    ((List<V20>*)_colDatas[19])->Add(v20);
    ((List<V21>*)_colDatas[20])->Add(v21);
    ((List<V22>*)_colDatas[21])->Add(v22);
    ((List<V23>*)_colDatas[22])->Add(v23);
    ((List<V24>*)_colDatas[23])->Add(v24);
    ((List<V25>*)_colDatas[24])->Add(v25);
    ((List<V26>*)_colDatas[25])->Add(v26);
    ((List<V27>*)_colDatas[26])->Add(v27);
    ((List<V28>*)_colDatas[27])->Add(v28);
    ((List<V29>*)_colDatas[28])->Add(v29);
    ((List<V30>*)_colDatas[29])->Add(v30);
    ((List<V31>*)_colDatas[30])->Add(v31);
    ((List<V32>*)_colDatas[31])->Add(v32);
    ((List<V33>*)_colDatas[32])->Add(v33);
    ((List<V34>*)_colDatas[33])->Add(v34);
    ((List<V35>*)_colDatas[34])->Add(v35);
    ((List<V36>*)_colDatas[35])->Add(v36);
    ((List<V37>*)_colDatas[36])->Add(v37);
    ((List<V38>*)_colDatas[37])->Add(v38);
    ((List<V39>*)_colDatas[38])->Add(v39);
    ((List<V40>*)_colDatas[39])->Add(v40);
    ((List<V41>*)_colDatas[40])->Add(v41);
    ((List<V42>*)_colDatas[41])->Add(v42);
    ((List<V43>*)_colDatas[42])->Add(v43);
    ((List<V44>*)_colDatas[43])->Add(v44);
    ((List<V45>*)_colDatas[44])->Add(v45);
    ((List<V46>*)_colDatas[45])->Add(v46);
    ((List<V47>*)_colDatas[46])->Add(v47);
    ((List<V48>*)_colDatas[47])->Add(v48);
    ((List<V49>*)_colDatas[48])->Add(v49);
    ((List<V50>*)_colDatas[49])->Add(v50);
    ((List<V51>*)_colDatas[50])->Add(v51);
    ((List<V52>*)_colDatas[51])->Add(v52);
    ((List<V53>*)_colDatas[52])->Add(v53);
    ((List<V54>*)_colDatas[53])->Add(v54);
    ((List<V55>*)_colDatas[54])->Add(v55);
    ((List<V56>*)_colDatas[55])->Add(v56);
    ((List<V57>*)_colDatas[56])->Add(v57);
    ((List<V58>*)_colDatas[57])->Add(v58);
    ((List<V59>*)_colDatas[58])->Add(v59);
    ((List<V60>*)_colDatas[59])->Add(v60);
    ((List<V61>*)_colDatas[60])->Add(v61);
    ((List<V62>*)_colDatas[61])->Add(v62);
    ((List<V63>*)_colDatas[62])->Add(v63);
    ((List<V64>*)_colDatas[63])->Add(v64);
    ((List<V65>*)_colDatas[64])->Add(v65);
    ((List<V66>*)_colDatas[65])->Add(v66);
    ++_rowCount;
    return *this;
}
template<typename V1, typename V2, typename V3, typename V4, typename V5, typename V6, typename V7, typename V8, typename V9, typename V10, typename V11, typename V12, typename V13, typename V14, typename V15, typename V16, typename V17, typename V18, typename V19, typename V20, typename V21, typename V22, typename V23, typename V24, typename V25, typename V26, typename V27, typename V28, typename V29, typename V30, typename V31, typename V32, typename V33, typename V34, typename V35, typename V36, typename V37, typename V38, typename V39, typename V40, typename V41, typename V42, typename V43, typename V44, typename V45, typename V46, typename V47, typename V48, typename V49, typename V50, typename V51, typename V52, typename V53, typename V54, typename V55, typename V56, typename V57, typename V58, typename V59, typename V60, typename V61, typename V62, typename V63, typename V64, typename V65, typename V66, typename V67>
DbTable & DbTable::AddRow(V1 const &v1, V2 const &v2, V3 const &v3, V4 const &v4, V5 const &v5, V6 const &v6, V7 const &v7, V8 const &v8, V9 const &v9, V10 const &v10, V11 const &v11, V12 const &v12, V13 const &v13, V14 const &v14, V15 const &v15, V16 const &v16, V17 const &v17, V18 const &v18, V19 const &v19, V20 const &v20, V21 const &v21, V22 const &v22, V23 const &v23, V24 const &v24, V25 const &v25, V26 const &v26, V27 const &v27, V28 const &v28, V29 const &v29, V30 const &v30, V31 const &v31, V32 const &v32, V33 const &v33, V34 const &v34, V35 const &v35, V36 const &v36, V37 const &v37, V38 const &v38, V39 const &v39, V40 const &v40, V41 const &v41, V42 const &v42, V43 const &v43, V44 const &v44, V45 const &v45, V46 const &v46, V47 const &v47, V48 const &v48, V49 const &v49, V50 const &v50, V51 const &v51, V52 const &v52, V53 const &v53, V54 const &v54, V55 const &v55, V56 const &v56, V57 const &v57, V58 const &v58, V59 const &v59, V60 const &v60, V61 const &v61, V62 const &v62, V63 const &v63, V64 const &v64, V65 const &v65, V66 const &v66, V67 const &v67) {
    assert( _colNames.Length() == 67 );
    assert( _colTypes[0] == DbTypeIDs<V1>::ID() );
    assert( _colTypes[1] == DbTypeIDs<V2>::ID() );
    assert( _colTypes[2] == DbTypeIDs<V3>::ID() );
    assert( _colTypes[3] == DbTypeIDs<V4>::ID() );
    assert( _colTypes[4] == DbTypeIDs<V5>::ID() );
    assert( _colTypes[5] == DbTypeIDs<V6>::ID() );
    assert( _colTypes[6] == DbTypeIDs<V7>::ID() );
    assert( _colTypes[7] == DbTypeIDs<V8>::ID() );
    assert( _colTypes[8] == DbTypeIDs<V9>::ID() );
    assert( _colTypes[9] == DbTypeIDs<V10>::ID() );
    assert( _colTypes[10] == DbTypeIDs<V11>::ID() );
    assert( _colTypes[11] == DbTypeIDs<V12>::ID() );
    assert( _colTypes[12] == DbTypeIDs<V13>::ID() );
    assert( _colTypes[13] == DbTypeIDs<V14>::ID() );
    assert( _colTypes[14] == DbTypeIDs<V15>::ID() );
    assert( _colTypes[15] == DbTypeIDs<V16>::ID() );
    assert( _colTypes[16] == DbTypeIDs<V17>::ID() );
    assert( _colTypes[17] == DbTypeIDs<V18>::ID() );
    assert( _colTypes[18] == DbTypeIDs<V19>::ID() );
    assert( _colTypes[19] == DbTypeIDs<V20>::ID() );
    assert( _colTypes[20] == DbTypeIDs<V21>::ID() );
    assert( _colTypes[21] == DbTypeIDs<V22>::ID() );
    assert( _colTypes[22] == DbTypeIDs<V23>::ID() );
    assert( _colTypes[23] == DbTypeIDs<V24>::ID() );
    assert( _colTypes[24] == DbTypeIDs<V25>::ID() );
    assert( _colTypes[25] == DbTypeIDs<V26>::ID() );
    assert( _colTypes[26] == DbTypeIDs<V27>::ID() );
    assert( _colTypes[27] == DbTypeIDs<V28>::ID() );
    assert( _colTypes[28] == DbTypeIDs<V29>::ID() );
    assert( _colTypes[29] == DbTypeIDs<V30>::ID() );
    assert( _colTypes[30] == DbTypeIDs<V31>::ID() );
    assert( _colTypes[31] == DbTypeIDs<V32>::ID() );
    assert( _colTypes[32] == DbTypeIDs<V33>::ID() );
    assert( _colTypes[33] == DbTypeIDs<V34>::ID() );
    assert( _colTypes[34] == DbTypeIDs<V35>::ID() );
    assert( _colTypes[35] == DbTypeIDs<V36>::ID() );
    assert( _colTypes[36] == DbTypeIDs<V37>::ID() );
    assert( _colTypes[37] == DbTypeIDs<V38>::ID() );
    assert( _colTypes[38] == DbTypeIDs<V39>::ID() );
    assert( _colTypes[39] == DbTypeIDs<V40>::ID() );
    assert( _colTypes[40] == DbTypeIDs<V41>::ID() );
    assert( _colTypes[41] == DbTypeIDs<V42>::ID() );
    assert( _colTypes[42] == DbTypeIDs<V43>::ID() );
    assert( _colTypes[43] == DbTypeIDs<V44>::ID() );
    assert( _colTypes[44] == DbTypeIDs<V45>::ID() );
    assert( _colTypes[45] == DbTypeIDs<V46>::ID() );
    assert( _colTypes[46] == DbTypeIDs<V47>::ID() );
    assert( _colTypes[47] == DbTypeIDs<V48>::ID() );
    assert( _colTypes[48] == DbTypeIDs<V49>::ID() );
    assert( _colTypes[49] == DbTypeIDs<V50>::ID() );
    assert( _colTypes[50] == DbTypeIDs<V51>::ID() );
    assert( _colTypes[51] == DbTypeIDs<V52>::ID() );
    assert( _colTypes[52] == DbTypeIDs<V53>::ID() );
    assert( _colTypes[53] == DbTypeIDs<V54>::ID() );
    assert( _colTypes[54] == DbTypeIDs<V55>::ID() );
    assert( _colTypes[55] == DbTypeIDs<V56>::ID() );
    assert( _colTypes[56] == DbTypeIDs<V57>::ID() );
    assert( _colTypes[57] == DbTypeIDs<V58>::ID() );
    assert( _colTypes[58] == DbTypeIDs<V59>::ID() );
    assert( _colTypes[59] == DbTypeIDs<V60>::ID() );
    assert( _colTypes[60] == DbTypeIDs<V61>::ID() );
    assert( _colTypes[61] == DbTypeIDs<V62>::ID() );
    assert( _colTypes[62] == DbTypeIDs<V63>::ID() );
    assert( _colTypes[63] == DbTypeIDs<V64>::ID() );
    assert( _colTypes[64] == DbTypeIDs<V65>::ID() );
    assert( _colTypes[65] == DbTypeIDs<V66>::ID() );
    assert( _colTypes[66] == DbTypeIDs<V67>::ID() );
    ((List<V1>*)_colDatas[0])->Add(v1);
    ((List<V2>*)_colDatas[1])->Add(v2);
    ((List<V3>*)_colDatas[2])->Add(v3);
    ((List<V4>*)_colDatas[3])->Add(v4);
    ((List<V5>*)_colDatas[4])->Add(v5);
    ((List<V6>*)_colDatas[5])->Add(v6);
    ((List<V7>*)_colDatas[6])->Add(v7);
    ((List<V8>*)_colDatas[7])->Add(v8);
    ((List<V9>*)_colDatas[8])->Add(v9);
    ((List<V10>*)_colDatas[9])->Add(v10);
    ((List<V11>*)_colDatas[10])->Add(v11);
    ((List<V12>*)_colDatas[11])->Add(v12);
    ((List<V13>*)_colDatas[12])->Add(v13);
    ((List<V14>*)_colDatas[13])->Add(v14);
    ((List<V15>*)_colDatas[14])->Add(v15);
    ((List<V16>*)_colDatas[15])->Add(v16);
    ((List<V17>*)_colDatas[16])->Add(v17);
    ((List<V18>*)_colDatas[17])->Add(v18);
    ((List<V19>*)_colDatas[18])->Add(v19);
    ((List<V20>*)_colDatas[19])->Add(v20);
    ((List<V21>*)_colDatas[20])->Add(v21);
    ((List<V22>*)_colDatas[21])->Add(v22);
    ((List<V23>*)_colDatas[22])->Add(v23);
    ((List<V24>*)_colDatas[23])->Add(v24);
    ((List<V25>*)_colDatas[24])->Add(v25);
    ((List<V26>*)_colDatas[25])->Add(v26);
    ((List<V27>*)_colDatas[26])->Add(v27);
    ((List<V28>*)_colDatas[27])->Add(v28);
    ((List<V29>*)_colDatas[28])->Add(v29);
    ((List<V30>*)_colDatas[29])->Add(v30);
    ((List<V31>*)_colDatas[30])->Add(v31);
    ((List<V32>*)_colDatas[31])->Add(v32);
    ((List<V33>*)_colDatas[32])->Add(v33);
    ((List<V34>*)_colDatas[33])->Add(v34);
    ((List<V35>*)_colDatas[34])->Add(v35);
    ((List<V36>*)_colDatas[35])->Add(v36);
    ((List<V37>*)_colDatas[36])->Add(v37);
    ((List<V38>*)_colDatas[37])->Add(v38);
    ((List<V39>*)_colDatas[38])->Add(v39);
    ((List<V40>*)_colDatas[39])->Add(v40);
    ((List<V41>*)_colDatas[40])->Add(v41);
    ((List<V42>*)_colDatas[41])->Add(v42);
    ((List<V43>*)_colDatas[42])->Add(v43);
    ((List<V44>*)_colDatas[43])->Add(v44);
    ((List<V45>*)_colDatas[44])->Add(v45);
    ((List<V46>*)_colDatas[45])->Add(v46);
    ((List<V47>*)_colDatas[46])->Add(v47);
    ((List<V48>*)_colDatas[47])->Add(v48);
    ((List<V49>*)_colDatas[48])->Add(v49);
    ((List<V50>*)_colDatas[49])->Add(v50);
    ((List<V51>*)_colDatas[50])->Add(v51);
    ((List<V52>*)_colDatas[51])->Add(v52);
    ((List<V53>*)_colDatas[52])->Add(v53);
    ((List<V54>*)_colDatas[53])->Add(v54);
    ((List<V55>*)_colDatas[54])->Add(v55);
    ((List<V56>*)_colDatas[55])->Add(v56);
    ((List<V57>*)_colDatas[56])->Add(v57);
    ((List<V58>*)_colDatas[57])->Add(v58);
    ((List<V59>*)_colDatas[58])->Add(v59);
    ((List<V60>*)_colDatas[59])->Add(v60);
    ((List<V61>*)_colDatas[60])->Add(v61);
    ((List<V62>*)_colDatas[61])->Add(v62);
    ((List<V63>*)_colDatas[62])->Add(v63);
    ((List<V64>*)_colDatas[63])->Add(v64);
    ((List<V65>*)_colDatas[64])->Add(v65);
    ((List<V66>*)_colDatas[65])->Add(v66);
    ((List<V67>*)_colDatas[66])->Add(v67);
    ++_rowCount;
    return *this;
}
template<typename V1, typename V2, typename V3, typename V4, typename V5, typename V6, typename V7, typename V8, typename V9, typename V10, typename V11, typename V12, typename V13, typename V14, typename V15, typename V16, typename V17, typename V18, typename V19, typename V20, typename V21, typename V22, typename V23, typename V24, typename V25, typename V26, typename V27, typename V28, typename V29, typename V30, typename V31, typename V32, typename V33, typename V34, typename V35, typename V36, typename V37, typename V38, typename V39, typename V40, typename V41, typename V42, typename V43, typename V44, typename V45, typename V46, typename V47, typename V48, typename V49, typename V50, typename V51, typename V52, typename V53, typename V54, typename V55, typename V56, typename V57, typename V58, typename V59, typename V60, typename V61, typename V62, typename V63, typename V64, typename V65, typename V66, typename V67, typename V68>
DbTable & DbTable::AddRow(V1 const &v1, V2 const &v2, V3 const &v3, V4 const &v4, V5 const &v5, V6 const &v6, V7 const &v7, V8 const &v8, V9 const &v9, V10 const &v10, V11 const &v11, V12 const &v12, V13 const &v13, V14 const &v14, V15 const &v15, V16 const &v16, V17 const &v17, V18 const &v18, V19 const &v19, V20 const &v20, V21 const &v21, V22 const &v22, V23 const &v23, V24 const &v24, V25 const &v25, V26 const &v26, V27 const &v27, V28 const &v28, V29 const &v29, V30 const &v30, V31 const &v31, V32 const &v32, V33 const &v33, V34 const &v34, V35 const &v35, V36 const &v36, V37 const &v37, V38 const &v38, V39 const &v39, V40 const &v40, V41 const &v41, V42 const &v42, V43 const &v43, V44 const &v44, V45 const &v45, V46 const &v46, V47 const &v47, V48 const &v48, V49 const &v49, V50 const &v50, V51 const &v51, V52 const &v52, V53 const &v53, V54 const &v54, V55 const &v55, V56 const &v56, V57 const &v57, V58 const &v58, V59 const &v59, V60 const &v60, V61 const &v61, V62 const &v62, V63 const &v63, V64 const &v64, V65 const &v65, V66 const &v66, V67 const &v67, V68 const &v68) {
    assert( _colNames.Length() == 68 );
    assert( _colTypes[0] == DbTypeIDs<V1>::ID() );
    assert( _colTypes[1] == DbTypeIDs<V2>::ID() );
    assert( _colTypes[2] == DbTypeIDs<V3>::ID() );
    assert( _colTypes[3] == DbTypeIDs<V4>::ID() );
    assert( _colTypes[4] == DbTypeIDs<V5>::ID() );
    assert( _colTypes[5] == DbTypeIDs<V6>::ID() );
    assert( _colTypes[6] == DbTypeIDs<V7>::ID() );
    assert( _colTypes[7] == DbTypeIDs<V8>::ID() );
    assert( _colTypes[8] == DbTypeIDs<V9>::ID() );
    assert( _colTypes[9] == DbTypeIDs<V10>::ID() );
    assert( _colTypes[10] == DbTypeIDs<V11>::ID() );
    assert( _colTypes[11] == DbTypeIDs<V12>::ID() );
    assert( _colTypes[12] == DbTypeIDs<V13>::ID() );
    assert( _colTypes[13] == DbTypeIDs<V14>::ID() );
    assert( _colTypes[14] == DbTypeIDs<V15>::ID() );
    assert( _colTypes[15] == DbTypeIDs<V16>::ID() );
    assert( _colTypes[16] == DbTypeIDs<V17>::ID() );
    assert( _colTypes[17] == DbTypeIDs<V18>::ID() );
    assert( _colTypes[18] == DbTypeIDs<V19>::ID() );
    assert( _colTypes[19] == DbTypeIDs<V20>::ID() );
    assert( _colTypes[20] == DbTypeIDs<V21>::ID() );
    assert( _colTypes[21] == DbTypeIDs<V22>::ID() );
    assert( _colTypes[22] == DbTypeIDs<V23>::ID() );
    assert( _colTypes[23] == DbTypeIDs<V24>::ID() );
    assert( _colTypes[24] == DbTypeIDs<V25>::ID() );
    assert( _colTypes[25] == DbTypeIDs<V26>::ID() );
    assert( _colTypes[26] == DbTypeIDs<V27>::ID() );
    assert( _colTypes[27] == DbTypeIDs<V28>::ID() );
    assert( _colTypes[28] == DbTypeIDs<V29>::ID() );
    assert( _colTypes[29] == DbTypeIDs<V30>::ID() );
    assert( _colTypes[30] == DbTypeIDs<V31>::ID() );
    assert( _colTypes[31] == DbTypeIDs<V32>::ID() );
    assert( _colTypes[32] == DbTypeIDs<V33>::ID() );
    assert( _colTypes[33] == DbTypeIDs<V34>::ID() );
    assert( _colTypes[34] == DbTypeIDs<V35>::ID() );
    assert( _colTypes[35] == DbTypeIDs<V36>::ID() );
    assert( _colTypes[36] == DbTypeIDs<V37>::ID() );
    assert( _colTypes[37] == DbTypeIDs<V38>::ID() );
    assert( _colTypes[38] == DbTypeIDs<V39>::ID() );
    assert( _colTypes[39] == DbTypeIDs<V40>::ID() );
    assert( _colTypes[40] == DbTypeIDs<V41>::ID() );
    assert( _colTypes[41] == DbTypeIDs<V42>::ID() );
    assert( _colTypes[42] == DbTypeIDs<V43>::ID() );
    assert( _colTypes[43] == DbTypeIDs<V44>::ID() );
    assert( _colTypes[44] == DbTypeIDs<V45>::ID() );
    assert( _colTypes[45] == DbTypeIDs<V46>::ID() );
    assert( _colTypes[46] == DbTypeIDs<V47>::ID() );
    assert( _colTypes[47] == DbTypeIDs<V48>::ID() );
    assert( _colTypes[48] == DbTypeIDs<V49>::ID() );
    assert( _colTypes[49] == DbTypeIDs<V50>::ID() );
    assert( _colTypes[50] == DbTypeIDs<V51>::ID() );
    assert( _colTypes[51] == DbTypeIDs<V52>::ID() );
    assert( _colTypes[52] == DbTypeIDs<V53>::ID() );
    assert( _colTypes[53] == DbTypeIDs<V54>::ID() );
    assert( _colTypes[54] == DbTypeIDs<V55>::ID() );
    assert( _colTypes[55] == DbTypeIDs<V56>::ID() );
    assert( _colTypes[56] == DbTypeIDs<V57>::ID() );
    assert( _colTypes[57] == DbTypeIDs<V58>::ID() );
    assert( _colTypes[58] == DbTypeIDs<V59>::ID() );
    assert( _colTypes[59] == DbTypeIDs<V60>::ID() );
    assert( _colTypes[60] == DbTypeIDs<V61>::ID() );
    assert( _colTypes[61] == DbTypeIDs<V62>::ID() );
    assert( _colTypes[62] == DbTypeIDs<V63>::ID() );
    assert( _colTypes[63] == DbTypeIDs<V64>::ID() );
    assert( _colTypes[64] == DbTypeIDs<V65>::ID() );
    assert( _colTypes[65] == DbTypeIDs<V66>::ID() );
    assert( _colTypes[66] == DbTypeIDs<V67>::ID() );
    assert( _colTypes[67] == DbTypeIDs<V68>::ID() );
    ((List<V1>*)_colDatas[0])->Add(v1);
    ((List<V2>*)_colDatas[1])->Add(v2);
    ((List<V3>*)_colDatas[2])->Add(v3);
    ((List<V4>*)_colDatas[3])->Add(v4);
    ((List<V5>*)_colDatas[4])->Add(v5);
    ((List<V6>*)_colDatas[5])->Add(v6);
    ((List<V7>*)_colDatas[6])->Add(v7);
    ((List<V8>*)_colDatas[7])->Add(v8);
    ((List<V9>*)_colDatas[8])->Add(v9);
    ((List<V10>*)_colDatas[9])->Add(v10);
    ((List<V11>*)_colDatas[10])->Add(v11);
    ((List<V12>*)_colDatas[11])->Add(v12);
    ((List<V13>*)_colDatas[12])->Add(v13);
    ((List<V14>*)_colDatas[13])->Add(v14);
    ((List<V15>*)_colDatas[14])->Add(v15);
    ((List<V16>*)_colDatas[15])->Add(v16);
    ((List<V17>*)_colDatas[16])->Add(v17);
    ((List<V18>*)_colDatas[17])->Add(v18);
    ((List<V19>*)_colDatas[18])->Add(v19);
    ((List<V20>*)_colDatas[19])->Add(v20);
    ((List<V21>*)_colDatas[20])->Add(v21);
    ((List<V22>*)_colDatas[21])->Add(v22);
    ((List<V23>*)_colDatas[22])->Add(v23);
    ((List<V24>*)_colDatas[23])->Add(v24);
    ((List<V25>*)_colDatas[24])->Add(v25);
    ((List<V26>*)_colDatas[25])->Add(v26);
    ((List<V27>*)_colDatas[26])->Add(v27);
    ((List<V28>*)_colDatas[27])->Add(v28);
    ((List<V29>*)_colDatas[28])->Add(v29);
    ((List<V30>*)_colDatas[29])->Add(v30);
    ((List<V31>*)_colDatas[30])->Add(v31);
    ((List<V32>*)_colDatas[31])->Add(v32);
    ((List<V33>*)_colDatas[32])->Add(v33);
    ((List<V34>*)_colDatas[33])->Add(v34);
    ((List<V35>*)_colDatas[34])->Add(v35);
    ((List<V36>*)_colDatas[35])->Add(v36);
    ((List<V37>*)_colDatas[36])->Add(v37);
    ((List<V38>*)_colDatas[37])->Add(v38);
    ((List<V39>*)_colDatas[38])->Add(v39);
    ((List<V40>*)_colDatas[39])->Add(v40);
    ((List<V41>*)_colDatas[40])->Add(v41);
    ((List<V42>*)_colDatas[41])->Add(v42);
    ((List<V43>*)_colDatas[42])->Add(v43);
    ((List<V44>*)_colDatas[43])->Add(v44);
    ((List<V45>*)_colDatas[44])->Add(v45);
    ((List<V46>*)_colDatas[45])->Add(v46);
    ((List<V47>*)_colDatas[46])->Add(v47);
    ((List<V48>*)_colDatas[47])->Add(v48);
    ((List<V49>*)_colDatas[48])->Add(v49);
    ((List<V50>*)_colDatas[49])->Add(v50);
    ((List<V51>*)_colDatas[50])->Add(v51);
    ((List<V52>*)_colDatas[51])->Add(v52);
    ((List<V53>*)_colDatas[52])->Add(v53);
    ((List<V54>*)_colDatas[53])->Add(v54);
    ((List<V55>*)_colDatas[54])->Add(v55);
    ((List<V56>*)_colDatas[55])->Add(v56);
    ((List<V57>*)_colDatas[56])->Add(v57);
    ((List<V58>*)_colDatas[57])->Add(v58);
    ((List<V59>*)_colDatas[58])->Add(v59);
    ((List<V60>*)_colDatas[59])->Add(v60);
    ((List<V61>*)_colDatas[60])->Add(v61);
    ((List<V62>*)_colDatas[61])->Add(v62);
    ((List<V63>*)_colDatas[62])->Add(v63);
    ((List<V64>*)_colDatas[63])->Add(v64);
    ((List<V65>*)_colDatas[64])->Add(v65);
    ((List<V66>*)_colDatas[65])->Add(v66);
    ((List<V67>*)_colDatas[66])->Add(v67);
    ((List<V68>*)_colDatas[67])->Add(v68);
    ++_rowCount;
    return *this;
}
template<typename V1, typename V2, typename V3, typename V4, typename V5, typename V6, typename V7, typename V8, typename V9, typename V10, typename V11, typename V12, typename V13, typename V14, typename V15, typename V16, typename V17, typename V18, typename V19, typename V20, typename V21, typename V22, typename V23, typename V24, typename V25, typename V26, typename V27, typename V28, typename V29, typename V30, typename V31, typename V32, typename V33, typename V34, typename V35, typename V36, typename V37, typename V38, typename V39, typename V40, typename V41, typename V42, typename V43, typename V44, typename V45, typename V46, typename V47, typename V48, typename V49, typename V50, typename V51, typename V52, typename V53, typename V54, typename V55, typename V56, typename V57, typename V58, typename V59, typename V60, typename V61, typename V62, typename V63, typename V64, typename V65, typename V66, typename V67, typename V68, typename V69>
DbTable & DbTable::AddRow(V1 const &v1, V2 const &v2, V3 const &v3, V4 const &v4, V5 const &v5, V6 const &v6, V7 const &v7, V8 const &v8, V9 const &v9, V10 const &v10, V11 const &v11, V12 const &v12, V13 const &v13, V14 const &v14, V15 const &v15, V16 const &v16, V17 const &v17, V18 const &v18, V19 const &v19, V20 const &v20, V21 const &v21, V22 const &v22, V23 const &v23, V24 const &v24, V25 const &v25, V26 const &v26, V27 const &v27, V28 const &v28, V29 const &v29, V30 const &v30, V31 const &v31, V32 const &v32, V33 const &v33, V34 const &v34, V35 const &v35, V36 const &v36, V37 const &v37, V38 const &v38, V39 const &v39, V40 const &v40, V41 const &v41, V42 const &v42, V43 const &v43, V44 const &v44, V45 const &v45, V46 const &v46, V47 const &v47, V48 const &v48, V49 const &v49, V50 const &v50, V51 const &v51, V52 const &v52, V53 const &v53, V54 const &v54, V55 const &v55, V56 const &v56, V57 const &v57, V58 const &v58, V59 const &v59, V60 const &v60, V61 const &v61, V62 const &v62, V63 const &v63, V64 const &v64, V65 const &v65, V66 const &v66, V67 const &v67, V68 const &v68, V69 const &v69) {
    assert( _colNames.Length() == 69 );
    assert( _colTypes[0] == DbTypeIDs<V1>::ID() );
    assert( _colTypes[1] == DbTypeIDs<V2>::ID() );
    assert( _colTypes[2] == DbTypeIDs<V3>::ID() );
    assert( _colTypes[3] == DbTypeIDs<V4>::ID() );
    assert( _colTypes[4] == DbTypeIDs<V5>::ID() );
    assert( _colTypes[5] == DbTypeIDs<V6>::ID() );
    assert( _colTypes[6] == DbTypeIDs<V7>::ID() );
    assert( _colTypes[7] == DbTypeIDs<V8>::ID() );
    assert( _colTypes[8] == DbTypeIDs<V9>::ID() );
    assert( _colTypes[9] == DbTypeIDs<V10>::ID() );
    assert( _colTypes[10] == DbTypeIDs<V11>::ID() );
    assert( _colTypes[11] == DbTypeIDs<V12>::ID() );
    assert( _colTypes[12] == DbTypeIDs<V13>::ID() );
    assert( _colTypes[13] == DbTypeIDs<V14>::ID() );
    assert( _colTypes[14] == DbTypeIDs<V15>::ID() );
    assert( _colTypes[15] == DbTypeIDs<V16>::ID() );
    assert( _colTypes[16] == DbTypeIDs<V17>::ID() );
    assert( _colTypes[17] == DbTypeIDs<V18>::ID() );
    assert( _colTypes[18] == DbTypeIDs<V19>::ID() );
    assert( _colTypes[19] == DbTypeIDs<V20>::ID() );
    assert( _colTypes[20] == DbTypeIDs<V21>::ID() );
    assert( _colTypes[21] == DbTypeIDs<V22>::ID() );
    assert( _colTypes[22] == DbTypeIDs<V23>::ID() );
    assert( _colTypes[23] == DbTypeIDs<V24>::ID() );
    assert( _colTypes[24] == DbTypeIDs<V25>::ID() );
    assert( _colTypes[25] == DbTypeIDs<V26>::ID() );
    assert( _colTypes[26] == DbTypeIDs<V27>::ID() );
    assert( _colTypes[27] == DbTypeIDs<V28>::ID() );
    assert( _colTypes[28] == DbTypeIDs<V29>::ID() );
    assert( _colTypes[29] == DbTypeIDs<V30>::ID() );
    assert( _colTypes[30] == DbTypeIDs<V31>::ID() );
    assert( _colTypes[31] == DbTypeIDs<V32>::ID() );
    assert( _colTypes[32] == DbTypeIDs<V33>::ID() );
    assert( _colTypes[33] == DbTypeIDs<V34>::ID() );
    assert( _colTypes[34] == DbTypeIDs<V35>::ID() );
    assert( _colTypes[35] == DbTypeIDs<V36>::ID() );
    assert( _colTypes[36] == DbTypeIDs<V37>::ID() );
    assert( _colTypes[37] == DbTypeIDs<V38>::ID() );
    assert( _colTypes[38] == DbTypeIDs<V39>::ID() );
    assert( _colTypes[39] == DbTypeIDs<V40>::ID() );
    assert( _colTypes[40] == DbTypeIDs<V41>::ID() );
    assert( _colTypes[41] == DbTypeIDs<V42>::ID() );
    assert( _colTypes[42] == DbTypeIDs<V43>::ID() );
    assert( _colTypes[43] == DbTypeIDs<V44>::ID() );
    assert( _colTypes[44] == DbTypeIDs<V45>::ID() );
    assert( _colTypes[45] == DbTypeIDs<V46>::ID() );
    assert( _colTypes[46] == DbTypeIDs<V47>::ID() );
    assert( _colTypes[47] == DbTypeIDs<V48>::ID() );
    assert( _colTypes[48] == DbTypeIDs<V49>::ID() );
    assert( _colTypes[49] == DbTypeIDs<V50>::ID() );
    assert( _colTypes[50] == DbTypeIDs<V51>::ID() );
    assert( _colTypes[51] == DbTypeIDs<V52>::ID() );
    assert( _colTypes[52] == DbTypeIDs<V53>::ID() );
    assert( _colTypes[53] == DbTypeIDs<V54>::ID() );
    assert( _colTypes[54] == DbTypeIDs<V55>::ID() );
    assert( _colTypes[55] == DbTypeIDs<V56>::ID() );
    assert( _colTypes[56] == DbTypeIDs<V57>::ID() );
    assert( _colTypes[57] == DbTypeIDs<V58>::ID() );
    assert( _colTypes[58] == DbTypeIDs<V59>::ID() );
    assert( _colTypes[59] == DbTypeIDs<V60>::ID() );
    assert( _colTypes[60] == DbTypeIDs<V61>::ID() );
    assert( _colTypes[61] == DbTypeIDs<V62>::ID() );
    assert( _colTypes[62] == DbTypeIDs<V63>::ID() );
    assert( _colTypes[63] == DbTypeIDs<V64>::ID() );
    assert( _colTypes[64] == DbTypeIDs<V65>::ID() );
    assert( _colTypes[65] == DbTypeIDs<V66>::ID() );
    assert( _colTypes[66] == DbTypeIDs<V67>::ID() );
    assert( _colTypes[67] == DbTypeIDs<V68>::ID() );
    assert( _colTypes[68] == DbTypeIDs<V69>::ID() );
    ((List<V1>*)_colDatas[0])->Add(v1);
    ((List<V2>*)_colDatas[1])->Add(v2);
    ((List<V3>*)_colDatas[2])->Add(v3);
    ((List<V4>*)_colDatas[3])->Add(v4);
    ((List<V5>*)_colDatas[4])->Add(v5);
    ((List<V6>*)_colDatas[5])->Add(v6);
    ((List<V7>*)_colDatas[6])->Add(v7);
    ((List<V8>*)_colDatas[7])->Add(v8);
    ((List<V9>*)_colDatas[8])->Add(v9);
    ((List<V10>*)_colDatas[9])->Add(v10);
    ((List<V11>*)_colDatas[10])->Add(v11);
    ((List<V12>*)_colDatas[11])->Add(v12);
    ((List<V13>*)_colDatas[12])->Add(v13);
    ((List<V14>*)_colDatas[13])->Add(v14);
    ((List<V15>*)_colDatas[14])->Add(v15);
    ((List<V16>*)_colDatas[15])->Add(v16);
    ((List<V17>*)_colDatas[16])->Add(v17);
    ((List<V18>*)_colDatas[17])->Add(v18);
    ((List<V19>*)_colDatas[18])->Add(v19);
    ((List<V20>*)_colDatas[19])->Add(v20);
    ((List<V21>*)_colDatas[20])->Add(v21);
    ((List<V22>*)_colDatas[21])->Add(v22);
    ((List<V23>*)_colDatas[22])->Add(v23);
    ((List<V24>*)_colDatas[23])->Add(v24);
    ((List<V25>*)_colDatas[24])->Add(v25);
    ((List<V26>*)_colDatas[25])->Add(v26);
    ((List<V27>*)_colDatas[26])->Add(v27);
    ((List<V28>*)_colDatas[27])->Add(v28);
    ((List<V29>*)_colDatas[28])->Add(v29);
    ((List<V30>*)_colDatas[29])->Add(v30);
    ((List<V31>*)_colDatas[30])->Add(v31);
    ((List<V32>*)_colDatas[31])->Add(v32);
    ((List<V33>*)_colDatas[32])->Add(v33);
    ((List<V34>*)_colDatas[33])->Add(v34);
    ((List<V35>*)_colDatas[34])->Add(v35);
    ((List<V36>*)_colDatas[35])->Add(v36);
    ((List<V37>*)_colDatas[36])->Add(v37);
    ((List<V38>*)_colDatas[37])->Add(v38);
    ((List<V39>*)_colDatas[38])->Add(v39);
    ((List<V40>*)_colDatas[39])->Add(v40);
    ((List<V41>*)_colDatas[40])->Add(v41);
    ((List<V42>*)_colDatas[41])->Add(v42);
    ((List<V43>*)_colDatas[42])->Add(v43);
    ((List<V44>*)_colDatas[43])->Add(v44);
    ((List<V45>*)_colDatas[44])->Add(v45);
    ((List<V46>*)_colDatas[45])->Add(v46);
    ((List<V47>*)_colDatas[46])->Add(v47);
    ((List<V48>*)_colDatas[47])->Add(v48);
    ((List<V49>*)_colDatas[48])->Add(v49);
    ((List<V50>*)_colDatas[49])->Add(v50);
    ((List<V51>*)_colDatas[50])->Add(v51);
    ((List<V52>*)_colDatas[51])->Add(v52);
    ((List<V53>*)_colDatas[52])->Add(v53);
    ((List<V54>*)_colDatas[53])->Add(v54);
    ((List<V55>*)_colDatas[54])->Add(v55);
    ((List<V56>*)_colDatas[55])->Add(v56);
    ((List<V57>*)_colDatas[56])->Add(v57);
    ((List<V58>*)_colDatas[57])->Add(v58);
    ((List<V59>*)_colDatas[58])->Add(v59);
    ((List<V60>*)_colDatas[59])->Add(v60);
    ((List<V61>*)_colDatas[60])->Add(v61);
    ((List<V62>*)_colDatas[61])->Add(v62);
    ((List<V63>*)_colDatas[62])->Add(v63);
    ((List<V64>*)_colDatas[63])->Add(v64);
    ((List<V65>*)_colDatas[64])->Add(v65);
    ((List<V66>*)_colDatas[65])->Add(v66);
    ((List<V67>*)_colDatas[66])->Add(v67);
    ((List<V68>*)_colDatas[67])->Add(v68);
    ((List<V69>*)_colDatas[68])->Add(v69);
    ++_rowCount;
    return *this;
}
template<typename V1, typename V2, typename V3, typename V4, typename V5, typename V6, typename V7, typename V8, typename V9, typename V10, typename V11, typename V12, typename V13, typename V14, typename V15, typename V16, typename V17, typename V18, typename V19, typename V20, typename V21, typename V22, typename V23, typename V24, typename V25, typename V26, typename V27, typename V28, typename V29, typename V30, typename V31, typename V32, typename V33, typename V34, typename V35, typename V36, typename V37, typename V38, typename V39, typename V40, typename V41, typename V42, typename V43, typename V44, typename V45, typename V46, typename V47, typename V48, typename V49, typename V50, typename V51, typename V52, typename V53, typename V54, typename V55, typename V56, typename V57, typename V58, typename V59, typename V60, typename V61, typename V62, typename V63, typename V64, typename V65, typename V66, typename V67, typename V68, typename V69, typename V70>
DbTable & DbTable::AddRow(V1 const &v1, V2 const &v2, V3 const &v3, V4 const &v4, V5 const &v5, V6 const &v6, V7 const &v7, V8 const &v8, V9 const &v9, V10 const &v10, V11 const &v11, V12 const &v12, V13 const &v13, V14 const &v14, V15 const &v15, V16 const &v16, V17 const &v17, V18 const &v18, V19 const &v19, V20 const &v20, V21 const &v21, V22 const &v22, V23 const &v23, V24 const &v24, V25 const &v25, V26 const &v26, V27 const &v27, V28 const &v28, V29 const &v29, V30 const &v30, V31 const &v31, V32 const &v32, V33 const &v33, V34 const &v34, V35 const &v35, V36 const &v36, V37 const &v37, V38 const &v38, V39 const &v39, V40 const &v40, V41 const &v41, V42 const &v42, V43 const &v43, V44 const &v44, V45 const &v45, V46 const &v46, V47 const &v47, V48 const &v48, V49 const &v49, V50 const &v50, V51 const &v51, V52 const &v52, V53 const &v53, V54 const &v54, V55 const &v55, V56 const &v56, V57 const &v57, V58 const &v58, V59 const &v59, V60 const &v60, V61 const &v61, V62 const &v62, V63 const &v63, V64 const &v64, V65 const &v65, V66 const &v66, V67 const &v67, V68 const &v68, V69 const &v69, V70 const &v70) {
    assert( _colNames.Length() == 70 );
    assert( _colTypes[0] == DbTypeIDs<V1>::ID() );
    assert( _colTypes[1] == DbTypeIDs<V2>::ID() );
    assert( _colTypes[2] == DbTypeIDs<V3>::ID() );
    assert( _colTypes[3] == DbTypeIDs<V4>::ID() );
    assert( _colTypes[4] == DbTypeIDs<V5>::ID() );
    assert( _colTypes[5] == DbTypeIDs<V6>::ID() );
    assert( _colTypes[6] == DbTypeIDs<V7>::ID() );
    assert( _colTypes[7] == DbTypeIDs<V8>::ID() );
    assert( _colTypes[8] == DbTypeIDs<V9>::ID() );
    assert( _colTypes[9] == DbTypeIDs<V10>::ID() );
    assert( _colTypes[10] == DbTypeIDs<V11>::ID() );
    assert( _colTypes[11] == DbTypeIDs<V12>::ID() );
    assert( _colTypes[12] == DbTypeIDs<V13>::ID() );
    assert( _colTypes[13] == DbTypeIDs<V14>::ID() );
    assert( _colTypes[14] == DbTypeIDs<V15>::ID() );
    assert( _colTypes[15] == DbTypeIDs<V16>::ID() );
    assert( _colTypes[16] == DbTypeIDs<V17>::ID() );
    assert( _colTypes[17] == DbTypeIDs<V18>::ID() );
    assert( _colTypes[18] == DbTypeIDs<V19>::ID() );
    assert( _colTypes[19] == DbTypeIDs<V20>::ID() );
    assert( _colTypes[20] == DbTypeIDs<V21>::ID() );
    assert( _colTypes[21] == DbTypeIDs<V22>::ID() );
    assert( _colTypes[22] == DbTypeIDs<V23>::ID() );
    assert( _colTypes[23] == DbTypeIDs<V24>::ID() );
    assert( _colTypes[24] == DbTypeIDs<V25>::ID() );
    assert( _colTypes[25] == DbTypeIDs<V26>::ID() );
    assert( _colTypes[26] == DbTypeIDs<V27>::ID() );
    assert( _colTypes[27] == DbTypeIDs<V28>::ID() );
    assert( _colTypes[28] == DbTypeIDs<V29>::ID() );
    assert( _colTypes[29] == DbTypeIDs<V30>::ID() );
    assert( _colTypes[30] == DbTypeIDs<V31>::ID() );
    assert( _colTypes[31] == DbTypeIDs<V32>::ID() );
    assert( _colTypes[32] == DbTypeIDs<V33>::ID() );
    assert( _colTypes[33] == DbTypeIDs<V34>::ID() );
    assert( _colTypes[34] == DbTypeIDs<V35>::ID() );
    assert( _colTypes[35] == DbTypeIDs<V36>::ID() );
    assert( _colTypes[36] == DbTypeIDs<V37>::ID() );
    assert( _colTypes[37] == DbTypeIDs<V38>::ID() );
    assert( _colTypes[38] == DbTypeIDs<V39>::ID() );
    assert( _colTypes[39] == DbTypeIDs<V40>::ID() );
    assert( _colTypes[40] == DbTypeIDs<V41>::ID() );
    assert( _colTypes[41] == DbTypeIDs<V42>::ID() );
    assert( _colTypes[42] == DbTypeIDs<V43>::ID() );
    assert( _colTypes[43] == DbTypeIDs<V44>::ID() );
    assert( _colTypes[44] == DbTypeIDs<V45>::ID() );
    assert( _colTypes[45] == DbTypeIDs<V46>::ID() );
    assert( _colTypes[46] == DbTypeIDs<V47>::ID() );
    assert( _colTypes[47] == DbTypeIDs<V48>::ID() );
    assert( _colTypes[48] == DbTypeIDs<V49>::ID() );
    assert( _colTypes[49] == DbTypeIDs<V50>::ID() );
    assert( _colTypes[50] == DbTypeIDs<V51>::ID() );
    assert( _colTypes[51] == DbTypeIDs<V52>::ID() );
    assert( _colTypes[52] == DbTypeIDs<V53>::ID() );
    assert( _colTypes[53] == DbTypeIDs<V54>::ID() );
    assert( _colTypes[54] == DbTypeIDs<V55>::ID() );
    assert( _colTypes[55] == DbTypeIDs<V56>::ID() );
    assert( _colTypes[56] == DbTypeIDs<V57>::ID() );
    assert( _colTypes[57] == DbTypeIDs<V58>::ID() );
    assert( _colTypes[58] == DbTypeIDs<V59>::ID() );
    assert( _colTypes[59] == DbTypeIDs<V60>::ID() );
    assert( _colTypes[60] == DbTypeIDs<V61>::ID() );
    assert( _colTypes[61] == DbTypeIDs<V62>::ID() );
    assert( _colTypes[62] == DbTypeIDs<V63>::ID() );
    assert( _colTypes[63] == DbTypeIDs<V64>::ID() );
    assert( _colTypes[64] == DbTypeIDs<V65>::ID() );
    assert( _colTypes[65] == DbTypeIDs<V66>::ID() );
    assert( _colTypes[66] == DbTypeIDs<V67>::ID() );
    assert( _colTypes[67] == DbTypeIDs<V68>::ID() );
    assert( _colTypes[68] == DbTypeIDs<V69>::ID() );
    assert( _colTypes[69] == DbTypeIDs<V70>::ID() );
    ((List<V1>*)_colDatas[0])->Add(v1);
    ((List<V2>*)_colDatas[1])->Add(v2);
    ((List<V3>*)_colDatas[2])->Add(v3);
    ((List<V4>*)_colDatas[3])->Add(v4);
    ((List<V5>*)_colDatas[4])->Add(v5);
    ((List<V6>*)_colDatas[5])->Add(v6);
    ((List<V7>*)_colDatas[6])->Add(v7);
    ((List<V8>*)_colDatas[7])->Add(v8);
    ((List<V9>*)_colDatas[8])->Add(v9);
    ((List<V10>*)_colDatas[9])->Add(v10);
    ((List<V11>*)_colDatas[10])->Add(v11);
    ((List<V12>*)_colDatas[11])->Add(v12);
    ((List<V13>*)_colDatas[12])->Add(v13);
    ((List<V14>*)_colDatas[13])->Add(v14);
    ((List<V15>*)_colDatas[14])->Add(v15);
    ((List<V16>*)_colDatas[15])->Add(v16);
    ((List<V17>*)_colDatas[16])->Add(v17);
    ((List<V18>*)_colDatas[17])->Add(v18);
    ((List<V19>*)_colDatas[18])->Add(v19);
    ((List<V20>*)_colDatas[19])->Add(v20);
    ((List<V21>*)_colDatas[20])->Add(v21);
    ((List<V22>*)_colDatas[21])->Add(v22);
    ((List<V23>*)_colDatas[22])->Add(v23);
    ((List<V24>*)_colDatas[23])->Add(v24);
    ((List<V25>*)_colDatas[24])->Add(v25);
    ((List<V26>*)_colDatas[25])->Add(v26);
    ((List<V27>*)_colDatas[26])->Add(v27);
    ((List<V28>*)_colDatas[27])->Add(v28);
    ((List<V29>*)_colDatas[28])->Add(v29);
    ((List<V30>*)_colDatas[29])->Add(v30);
    ((List<V31>*)_colDatas[30])->Add(v31);
    ((List<V32>*)_colDatas[31])->Add(v32);
    ((List<V33>*)_colDatas[32])->Add(v33);
    ((List<V34>*)_colDatas[33])->Add(v34);
    ((List<V35>*)_colDatas[34])->Add(v35);
    ((List<V36>*)_colDatas[35])->Add(v36);
    ((List<V37>*)_colDatas[36])->Add(v37);
    ((List<V38>*)_colDatas[37])->Add(v38);
    ((List<V39>*)_colDatas[38])->Add(v39);
    ((List<V40>*)_colDatas[39])->Add(v40);
    ((List<V41>*)_colDatas[40])->Add(v41);
    ((List<V42>*)_colDatas[41])->Add(v42);
    ((List<V43>*)_colDatas[42])->Add(v43);
    ((List<V44>*)_colDatas[43])->Add(v44);
    ((List<V45>*)_colDatas[44])->Add(v45);
    ((List<V46>*)_colDatas[45])->Add(v46);
    ((List<V47>*)_colDatas[46])->Add(v47);
    ((List<V48>*)_colDatas[47])->Add(v48);
    ((List<V49>*)_colDatas[48])->Add(v49);
    ((List<V50>*)_colDatas[49])->Add(v50);
    ((List<V51>*)_colDatas[50])->Add(v51);
    ((List<V52>*)_colDatas[51])->Add(v52);
    ((List<V53>*)_colDatas[52])->Add(v53);
    ((List<V54>*)_colDatas[53])->Add(v54);
    ((List<V55>*)_colDatas[54])->Add(v55);
    ((List<V56>*)_colDatas[55])->Add(v56);
    ((List<V57>*)_colDatas[56])->Add(v57);
    ((List<V58>*)_colDatas[57])->Add(v58);
    ((List<V59>*)_colDatas[58])->Add(v59);
    ((List<V60>*)_colDatas[59])->Add(v60);
    ((List<V61>*)_colDatas[60])->Add(v61);
    ((List<V62>*)_colDatas[61])->Add(v62);
    ((List<V63>*)_colDatas[62])->Add(v63);
    ((List<V64>*)_colDatas[63])->Add(v64);
    ((List<V65>*)_colDatas[64])->Add(v65);
    ((List<V66>*)_colDatas[65])->Add(v66);
    ((List<V67>*)_colDatas[66])->Add(v67);
    ((List<V68>*)_colDatas[67])->Add(v68);
    ((List<V69>*)_colDatas[68])->Add(v69);
    ((List<V70>*)_colDatas[69])->Add(v70);
    ++_rowCount;
    return *this;
}
template<typename V1, typename V2, typename V3, typename V4, typename V5, typename V6, typename V7, typename V8, typename V9, typename V10, typename V11, typename V12, typename V13, typename V14, typename V15, typename V16, typename V17, typename V18, typename V19, typename V20, typename V21, typename V22, typename V23, typename V24, typename V25, typename V26, typename V27, typename V28, typename V29, typename V30, typename V31, typename V32, typename V33, typename V34, typename V35, typename V36, typename V37, typename V38, typename V39, typename V40, typename V41, typename V42, typename V43, typename V44, typename V45, typename V46, typename V47, typename V48, typename V49, typename V50, typename V51, typename V52, typename V53, typename V54, typename V55, typename V56, typename V57, typename V58, typename V59, typename V60, typename V61, typename V62, typename V63, typename V64, typename V65, typename V66, typename V67, typename V68, typename V69, typename V70, typename V71>
DbTable & DbTable::AddRow(V1 const &v1, V2 const &v2, V3 const &v3, V4 const &v4, V5 const &v5, V6 const &v6, V7 const &v7, V8 const &v8, V9 const &v9, V10 const &v10, V11 const &v11, V12 const &v12, V13 const &v13, V14 const &v14, V15 const &v15, V16 const &v16, V17 const &v17, V18 const &v18, V19 const &v19, V20 const &v20, V21 const &v21, V22 const &v22, V23 const &v23, V24 const &v24, V25 const &v25, V26 const &v26, V27 const &v27, V28 const &v28, V29 const &v29, V30 const &v30, V31 const &v31, V32 const &v32, V33 const &v33, V34 const &v34, V35 const &v35, V36 const &v36, V37 const &v37, V38 const &v38, V39 const &v39, V40 const &v40, V41 const &v41, V42 const &v42, V43 const &v43, V44 const &v44, V45 const &v45, V46 const &v46, V47 const &v47, V48 const &v48, V49 const &v49, V50 const &v50, V51 const &v51, V52 const &v52, V53 const &v53, V54 const &v54, V55 const &v55, V56 const &v56, V57 const &v57, V58 const &v58, V59 const &v59, V60 const &v60, V61 const &v61, V62 const &v62, V63 const &v63, V64 const &v64, V65 const &v65, V66 const &v66, V67 const &v67, V68 const &v68, V69 const &v69, V70 const &v70, V71 const &v71) {
    assert( _colNames.Length() == 71 );
    assert( _colTypes[0] == DbTypeIDs<V1>::ID() );
    assert( _colTypes[1] == DbTypeIDs<V2>::ID() );
    assert( _colTypes[2] == DbTypeIDs<V3>::ID() );
    assert( _colTypes[3] == DbTypeIDs<V4>::ID() );
    assert( _colTypes[4] == DbTypeIDs<V5>::ID() );
    assert( _colTypes[5] == DbTypeIDs<V6>::ID() );
    assert( _colTypes[6] == DbTypeIDs<V7>::ID() );
    assert( _colTypes[7] == DbTypeIDs<V8>::ID() );
    assert( _colTypes[8] == DbTypeIDs<V9>::ID() );
    assert( _colTypes[9] == DbTypeIDs<V10>::ID() );
    assert( _colTypes[10] == DbTypeIDs<V11>::ID() );
    assert( _colTypes[11] == DbTypeIDs<V12>::ID() );
    assert( _colTypes[12] == DbTypeIDs<V13>::ID() );
    assert( _colTypes[13] == DbTypeIDs<V14>::ID() );
    assert( _colTypes[14] == DbTypeIDs<V15>::ID() );
    assert( _colTypes[15] == DbTypeIDs<V16>::ID() );
    assert( _colTypes[16] == DbTypeIDs<V17>::ID() );
    assert( _colTypes[17] == DbTypeIDs<V18>::ID() );
    assert( _colTypes[18] == DbTypeIDs<V19>::ID() );
    assert( _colTypes[19] == DbTypeIDs<V20>::ID() );
    assert( _colTypes[20] == DbTypeIDs<V21>::ID() );
    assert( _colTypes[21] == DbTypeIDs<V22>::ID() );
    assert( _colTypes[22] == DbTypeIDs<V23>::ID() );
    assert( _colTypes[23] == DbTypeIDs<V24>::ID() );
    assert( _colTypes[24] == DbTypeIDs<V25>::ID() );
    assert( _colTypes[25] == DbTypeIDs<V26>::ID() );
    assert( _colTypes[26] == DbTypeIDs<V27>::ID() );
    assert( _colTypes[27] == DbTypeIDs<V28>::ID() );
    assert( _colTypes[28] == DbTypeIDs<V29>::ID() );
    assert( _colTypes[29] == DbTypeIDs<V30>::ID() );
    assert( _colTypes[30] == DbTypeIDs<V31>::ID() );
    assert( _colTypes[31] == DbTypeIDs<V32>::ID() );
    assert( _colTypes[32] == DbTypeIDs<V33>::ID() );
    assert( _colTypes[33] == DbTypeIDs<V34>::ID() );
    assert( _colTypes[34] == DbTypeIDs<V35>::ID() );
    assert( _colTypes[35] == DbTypeIDs<V36>::ID() );
    assert( _colTypes[36] == DbTypeIDs<V37>::ID() );
    assert( _colTypes[37] == DbTypeIDs<V38>::ID() );
    assert( _colTypes[38] == DbTypeIDs<V39>::ID() );
    assert( _colTypes[39] == DbTypeIDs<V40>::ID() );
    assert( _colTypes[40] == DbTypeIDs<V41>::ID() );
    assert( _colTypes[41] == DbTypeIDs<V42>::ID() );
    assert( _colTypes[42] == DbTypeIDs<V43>::ID() );
    assert( _colTypes[43] == DbTypeIDs<V44>::ID() );
    assert( _colTypes[44] == DbTypeIDs<V45>::ID() );
    assert( _colTypes[45] == DbTypeIDs<V46>::ID() );
    assert( _colTypes[46] == DbTypeIDs<V47>::ID() );
    assert( _colTypes[47] == DbTypeIDs<V48>::ID() );
    assert( _colTypes[48] == DbTypeIDs<V49>::ID() );
    assert( _colTypes[49] == DbTypeIDs<V50>::ID() );
    assert( _colTypes[50] == DbTypeIDs<V51>::ID() );
    assert( _colTypes[51] == DbTypeIDs<V52>::ID() );
    assert( _colTypes[52] == DbTypeIDs<V53>::ID() );
    assert( _colTypes[53] == DbTypeIDs<V54>::ID() );
    assert( _colTypes[54] == DbTypeIDs<V55>::ID() );
    assert( _colTypes[55] == DbTypeIDs<V56>::ID() );
    assert( _colTypes[56] == DbTypeIDs<V57>::ID() );
    assert( _colTypes[57] == DbTypeIDs<V58>::ID() );
    assert( _colTypes[58] == DbTypeIDs<V59>::ID() );
    assert( _colTypes[59] == DbTypeIDs<V60>::ID() );
    assert( _colTypes[60] == DbTypeIDs<V61>::ID() );
    assert( _colTypes[61] == DbTypeIDs<V62>::ID() );
    assert( _colTypes[62] == DbTypeIDs<V63>::ID() );
    assert( _colTypes[63] == DbTypeIDs<V64>::ID() );
    assert( _colTypes[64] == DbTypeIDs<V65>::ID() );
    assert( _colTypes[65] == DbTypeIDs<V66>::ID() );
    assert( _colTypes[66] == DbTypeIDs<V67>::ID() );
    assert( _colTypes[67] == DbTypeIDs<V68>::ID() );
    assert( _colTypes[68] == DbTypeIDs<V69>::ID() );
    assert( _colTypes[69] == DbTypeIDs<V70>::ID() );
    assert( _colTypes[70] == DbTypeIDs<V71>::ID() );
    ((List<V1>*)_colDatas[0])->Add(v1);
    ((List<V2>*)_colDatas[1])->Add(v2);
    ((List<V3>*)_colDatas[2])->Add(v3);
    ((List<V4>*)_colDatas[3])->Add(v4);
    ((List<V5>*)_colDatas[4])->Add(v5);
    ((List<V6>*)_colDatas[5])->Add(v6);
    ((List<V7>*)_colDatas[6])->Add(v7);
    ((List<V8>*)_colDatas[7])->Add(v8);
    ((List<V9>*)_colDatas[8])->Add(v9);
    ((List<V10>*)_colDatas[9])->Add(v10);
    ((List<V11>*)_colDatas[10])->Add(v11);
    ((List<V12>*)_colDatas[11])->Add(v12);
    ((List<V13>*)_colDatas[12])->Add(v13);
    ((List<V14>*)_colDatas[13])->Add(v14);
    ((List<V15>*)_colDatas[14])->Add(v15);
    ((List<V16>*)_colDatas[15])->Add(v16);
    ((List<V17>*)_colDatas[16])->Add(v17);
    ((List<V18>*)_colDatas[17])->Add(v18);
    ((List<V19>*)_colDatas[18])->Add(v19);
    ((List<V20>*)_colDatas[19])->Add(v20);
    ((List<V21>*)_colDatas[20])->Add(v21);
    ((List<V22>*)_colDatas[21])->Add(v22);
    ((List<V23>*)_colDatas[22])->Add(v23);
    ((List<V24>*)_colDatas[23])->Add(v24);
    ((List<V25>*)_colDatas[24])->Add(v25);
    ((List<V26>*)_colDatas[25])->Add(v26);
    ((List<V27>*)_colDatas[26])->Add(v27);
    ((List<V28>*)_colDatas[27])->Add(v28);
    ((List<V29>*)_colDatas[28])->Add(v29);
    ((List<V30>*)_colDatas[29])->Add(v30);
    ((List<V31>*)_colDatas[30])->Add(v31);
    ((List<V32>*)_colDatas[31])->Add(v32);
    ((List<V33>*)_colDatas[32])->Add(v33);
    ((List<V34>*)_colDatas[33])->Add(v34);
    ((List<V35>*)_colDatas[34])->Add(v35);
    ((List<V36>*)_colDatas[35])->Add(v36);
    ((List<V37>*)_colDatas[36])->Add(v37);
    ((List<V38>*)_colDatas[37])->Add(v38);
    ((List<V39>*)_colDatas[38])->Add(v39);
    ((List<V40>*)_colDatas[39])->Add(v40);
    ((List<V41>*)_colDatas[40])->Add(v41);
    ((List<V42>*)_colDatas[41])->Add(v42);
    ((List<V43>*)_colDatas[42])->Add(v43);
    ((List<V44>*)_colDatas[43])->Add(v44);
    ((List<V45>*)_colDatas[44])->Add(v45);
    ((List<V46>*)_colDatas[45])->Add(v46);
    ((List<V47>*)_colDatas[46])->Add(v47);
    ((List<V48>*)_colDatas[47])->Add(v48);
    ((List<V49>*)_colDatas[48])->Add(v49);
    ((List<V50>*)_colDatas[49])->Add(v50);
    ((List<V51>*)_colDatas[50])->Add(v51);
    ((List<V52>*)_colDatas[51])->Add(v52);
    ((List<V53>*)_colDatas[52])->Add(v53);
    ((List<V54>*)_colDatas[53])->Add(v54);
    ((List<V55>*)_colDatas[54])->Add(v55);
    ((List<V56>*)_colDatas[55])->Add(v56);
    ((List<V57>*)_colDatas[56])->Add(v57);
    ((List<V58>*)_colDatas[57])->Add(v58);
    ((List<V59>*)_colDatas[58])->Add(v59);
    ((List<V60>*)_colDatas[59])->Add(v60);
    ((List<V61>*)_colDatas[60])->Add(v61);
    ((List<V62>*)_colDatas[61])->Add(v62);
    ((List<V63>*)_colDatas[62])->Add(v63);
    ((List<V64>*)_colDatas[63])->Add(v64);
    ((List<V65>*)_colDatas[64])->Add(v65);
    ((List<V66>*)_colDatas[65])->Add(v66);
    ((List<V67>*)_colDatas[66])->Add(v67);
    ((List<V68>*)_colDatas[67])->Add(v68);
    ((List<V69>*)_colDatas[68])->Add(v69);
    ((List<V70>*)_colDatas[69])->Add(v70);
    ((List<V71>*)_colDatas[70])->Add(v71);
    ++_rowCount;
    return *this;
}
template<typename V1, typename V2, typename V3, typename V4, typename V5, typename V6, typename V7, typename V8, typename V9, typename V10, typename V11, typename V12, typename V13, typename V14, typename V15, typename V16, typename V17, typename V18, typename V19, typename V20, typename V21, typename V22, typename V23, typename V24, typename V25, typename V26, typename V27, typename V28, typename V29, typename V30, typename V31, typename V32, typename V33, typename V34, typename V35, typename V36, typename V37, typename V38, typename V39, typename V40, typename V41, typename V42, typename V43, typename V44, typename V45, typename V46, typename V47, typename V48, typename V49, typename V50, typename V51, typename V52, typename V53, typename V54, typename V55, typename V56, typename V57, typename V58, typename V59, typename V60, typename V61, typename V62, typename V63, typename V64, typename V65, typename V66, typename V67, typename V68, typename V69, typename V70, typename V71, typename V72>
DbTable & DbTable::AddRow(V1 const &v1, V2 const &v2, V3 const &v3, V4 const &v4, V5 const &v5, V6 const &v6, V7 const &v7, V8 const &v8, V9 const &v9, V10 const &v10, V11 const &v11, V12 const &v12, V13 const &v13, V14 const &v14, V15 const &v15, V16 const &v16, V17 const &v17, V18 const &v18, V19 const &v19, V20 const &v20, V21 const &v21, V22 const &v22, V23 const &v23, V24 const &v24, V25 const &v25, V26 const &v26, V27 const &v27, V28 const &v28, V29 const &v29, V30 const &v30, V31 const &v31, V32 const &v32, V33 const &v33, V34 const &v34, V35 const &v35, V36 const &v36, V37 const &v37, V38 const &v38, V39 const &v39, V40 const &v40, V41 const &v41, V42 const &v42, V43 const &v43, V44 const &v44, V45 const &v45, V46 const &v46, V47 const &v47, V48 const &v48, V49 const &v49, V50 const &v50, V51 const &v51, V52 const &v52, V53 const &v53, V54 const &v54, V55 const &v55, V56 const &v56, V57 const &v57, V58 const &v58, V59 const &v59, V60 const &v60, V61 const &v61, V62 const &v62, V63 const &v63, V64 const &v64, V65 const &v65, V66 const &v66, V67 const &v67, V68 const &v68, V69 const &v69, V70 const &v70, V71 const &v71, V72 const &v72) {
    assert( _colNames.Length() == 72 );
    assert( _colTypes[0] == DbTypeIDs<V1>::ID() );
    assert( _colTypes[1] == DbTypeIDs<V2>::ID() );
    assert( _colTypes[2] == DbTypeIDs<V3>::ID() );
    assert( _colTypes[3] == DbTypeIDs<V4>::ID() );
    assert( _colTypes[4] == DbTypeIDs<V5>::ID() );
    assert( _colTypes[5] == DbTypeIDs<V6>::ID() );
    assert( _colTypes[6] == DbTypeIDs<V7>::ID() );
    assert( _colTypes[7] == DbTypeIDs<V8>::ID() );
    assert( _colTypes[8] == DbTypeIDs<V9>::ID() );
    assert( _colTypes[9] == DbTypeIDs<V10>::ID() );
    assert( _colTypes[10] == DbTypeIDs<V11>::ID() );
    assert( _colTypes[11] == DbTypeIDs<V12>::ID() );
    assert( _colTypes[12] == DbTypeIDs<V13>::ID() );
    assert( _colTypes[13] == DbTypeIDs<V14>::ID() );
    assert( _colTypes[14] == DbTypeIDs<V15>::ID() );
    assert( _colTypes[15] == DbTypeIDs<V16>::ID() );
    assert( _colTypes[16] == DbTypeIDs<V17>::ID() );
    assert( _colTypes[17] == DbTypeIDs<V18>::ID() );
    assert( _colTypes[18] == DbTypeIDs<V19>::ID() );
    assert( _colTypes[19] == DbTypeIDs<V20>::ID() );
    assert( _colTypes[20] == DbTypeIDs<V21>::ID() );
    assert( _colTypes[21] == DbTypeIDs<V22>::ID() );
    assert( _colTypes[22] == DbTypeIDs<V23>::ID() );
    assert( _colTypes[23] == DbTypeIDs<V24>::ID() );
    assert( _colTypes[24] == DbTypeIDs<V25>::ID() );
    assert( _colTypes[25] == DbTypeIDs<V26>::ID() );
    assert( _colTypes[26] == DbTypeIDs<V27>::ID() );
    assert( _colTypes[27] == DbTypeIDs<V28>::ID() );
    assert( _colTypes[28] == DbTypeIDs<V29>::ID() );
    assert( _colTypes[29] == DbTypeIDs<V30>::ID() );
    assert( _colTypes[30] == DbTypeIDs<V31>::ID() );
    assert( _colTypes[31] == DbTypeIDs<V32>::ID() );
    assert( _colTypes[32] == DbTypeIDs<V33>::ID() );
    assert( _colTypes[33] == DbTypeIDs<V34>::ID() );
    assert( _colTypes[34] == DbTypeIDs<V35>::ID() );
    assert( _colTypes[35] == DbTypeIDs<V36>::ID() );
    assert( _colTypes[36] == DbTypeIDs<V37>::ID() );
    assert( _colTypes[37] == DbTypeIDs<V38>::ID() );
    assert( _colTypes[38] == DbTypeIDs<V39>::ID() );
    assert( _colTypes[39] == DbTypeIDs<V40>::ID() );
    assert( _colTypes[40] == DbTypeIDs<V41>::ID() );
    assert( _colTypes[41] == DbTypeIDs<V42>::ID() );
    assert( _colTypes[42] == DbTypeIDs<V43>::ID() );
    assert( _colTypes[43] == DbTypeIDs<V44>::ID() );
    assert( _colTypes[44] == DbTypeIDs<V45>::ID() );
    assert( _colTypes[45] == DbTypeIDs<V46>::ID() );
    assert( _colTypes[46] == DbTypeIDs<V47>::ID() );
    assert( _colTypes[47] == DbTypeIDs<V48>::ID() );
    assert( _colTypes[48] == DbTypeIDs<V49>::ID() );
    assert( _colTypes[49] == DbTypeIDs<V50>::ID() );
    assert( _colTypes[50] == DbTypeIDs<V51>::ID() );
    assert( _colTypes[51] == DbTypeIDs<V52>::ID() );
    assert( _colTypes[52] == DbTypeIDs<V53>::ID() );
    assert( _colTypes[53] == DbTypeIDs<V54>::ID() );
    assert( _colTypes[54] == DbTypeIDs<V55>::ID() );
    assert( _colTypes[55] == DbTypeIDs<V56>::ID() );
    assert( _colTypes[56] == DbTypeIDs<V57>::ID() );
    assert( _colTypes[57] == DbTypeIDs<V58>::ID() );
    assert( _colTypes[58] == DbTypeIDs<V59>::ID() );
    assert( _colTypes[59] == DbTypeIDs<V60>::ID() );
    assert( _colTypes[60] == DbTypeIDs<V61>::ID() );
    assert( _colTypes[61] == DbTypeIDs<V62>::ID() );
    assert( _colTypes[62] == DbTypeIDs<V63>::ID() );
    assert( _colTypes[63] == DbTypeIDs<V64>::ID() );
    assert( _colTypes[64] == DbTypeIDs<V65>::ID() );
    assert( _colTypes[65] == DbTypeIDs<V66>::ID() );
    assert( _colTypes[66] == DbTypeIDs<V67>::ID() );
    assert( _colTypes[67] == DbTypeIDs<V68>::ID() );
    assert( _colTypes[68] == DbTypeIDs<V69>::ID() );
    assert( _colTypes[69] == DbTypeIDs<V70>::ID() );
    assert( _colTypes[70] == DbTypeIDs<V71>::ID() );
    assert( _colTypes[71] == DbTypeIDs<V72>::ID() );
    ((List<V1>*)_colDatas[0])->Add(v1);
    ((List<V2>*)_colDatas[1])->Add(v2);
    ((List<V3>*)_colDatas[2])->Add(v3);
    ((List<V4>*)_colDatas[3])->Add(v4);
    ((List<V5>*)_colDatas[4])->Add(v5);
    ((List<V6>*)_colDatas[5])->Add(v6);
    ((List<V7>*)_colDatas[6])->Add(v7);
    ((List<V8>*)_colDatas[7])->Add(v8);
    ((List<V9>*)_colDatas[8])->Add(v9);
    ((List<V10>*)_colDatas[9])->Add(v10);
    ((List<V11>*)_colDatas[10])->Add(v11);
    ((List<V12>*)_colDatas[11])->Add(v12);
    ((List<V13>*)_colDatas[12])->Add(v13);
    ((List<V14>*)_colDatas[13])->Add(v14);
    ((List<V15>*)_colDatas[14])->Add(v15);
    ((List<V16>*)_colDatas[15])->Add(v16);
    ((List<V17>*)_colDatas[16])->Add(v17);
    ((List<V18>*)_colDatas[17])->Add(v18);
    ((List<V19>*)_colDatas[18])->Add(v19);
    ((List<V20>*)_colDatas[19])->Add(v20);
    ((List<V21>*)_colDatas[20])->Add(v21);
    ((List<V22>*)_colDatas[21])->Add(v22);
    ((List<V23>*)_colDatas[22])->Add(v23);
    ((List<V24>*)_colDatas[23])->Add(v24);
    ((List<V25>*)_colDatas[24])->Add(v25);
    ((List<V26>*)_colDatas[25])->Add(v26);
    ((List<V27>*)_colDatas[26])->Add(v27);
    ((List<V28>*)_colDatas[27])->Add(v28);
    ((List<V29>*)_colDatas[28])->Add(v29);
    ((List<V30>*)_colDatas[29])->Add(v30);
    ((List<V31>*)_colDatas[30])->Add(v31);
    ((List<V32>*)_colDatas[31])->Add(v32);
    ((List<V33>*)_colDatas[32])->Add(v33);
    ((List<V34>*)_colDatas[33])->Add(v34);
    ((List<V35>*)_colDatas[34])->Add(v35);
    ((List<V36>*)_colDatas[35])->Add(v36);
    ((List<V37>*)_colDatas[36])->Add(v37);
    ((List<V38>*)_colDatas[37])->Add(v38);
    ((List<V39>*)_colDatas[38])->Add(v39);
    ((List<V40>*)_colDatas[39])->Add(v40);
    ((List<V41>*)_colDatas[40])->Add(v41);
    ((List<V42>*)_colDatas[41])->Add(v42);
    ((List<V43>*)_colDatas[42])->Add(v43);
    ((List<V44>*)_colDatas[43])->Add(v44);
    ((List<V45>*)_colDatas[44])->Add(v45);
    ((List<V46>*)_colDatas[45])->Add(v46);
    ((List<V47>*)_colDatas[46])->Add(v47);
    ((List<V48>*)_colDatas[47])->Add(v48);
    ((List<V49>*)_colDatas[48])->Add(v49);
    ((List<V50>*)_colDatas[49])->Add(v50);
    ((List<V51>*)_colDatas[50])->Add(v51);
    ((List<V52>*)_colDatas[51])->Add(v52);
    ((List<V53>*)_colDatas[52])->Add(v53);
    ((List<V54>*)_colDatas[53])->Add(v54);
    ((List<V55>*)_colDatas[54])->Add(v55);
    ((List<V56>*)_colDatas[55])->Add(v56);
    ((List<V57>*)_colDatas[56])->Add(v57);
    ((List<V58>*)_colDatas[57])->Add(v58);
    ((List<V59>*)_colDatas[58])->Add(v59);
    ((List<V60>*)_colDatas[59])->Add(v60);
    ((List<V61>*)_colDatas[60])->Add(v61);
    ((List<V62>*)_colDatas[61])->Add(v62);
    ((List<V63>*)_colDatas[62])->Add(v63);
    ((List<V64>*)_colDatas[63])->Add(v64);
    ((List<V65>*)_colDatas[64])->Add(v65);
    ((List<V66>*)_colDatas[65])->Add(v66);
    ((List<V67>*)_colDatas[66])->Add(v67);
    ((List<V68>*)_colDatas[67])->Add(v68);
    ((List<V69>*)_colDatas[68])->Add(v69);
    ((List<V70>*)_colDatas[69])->Add(v70);
    ((List<V71>*)_colDatas[70])->Add(v71);
    ((List<V72>*)_colDatas[71])->Add(v72);
    ++_rowCount;
    return *this;
}
template<typename V1, typename V2, typename V3, typename V4, typename V5, typename V6, typename V7, typename V8, typename V9, typename V10, typename V11, typename V12, typename V13, typename V14, typename V15, typename V16, typename V17, typename V18, typename V19, typename V20, typename V21, typename V22, typename V23, typename V24, typename V25, typename V26, typename V27, typename V28, typename V29, typename V30, typename V31, typename V32, typename V33, typename V34, typename V35, typename V36, typename V37, typename V38, typename V39, typename V40, typename V41, typename V42, typename V43, typename V44, typename V45, typename V46, typename V47, typename V48, typename V49, typename V50, typename V51, typename V52, typename V53, typename V54, typename V55, typename V56, typename V57, typename V58, typename V59, typename V60, typename V61, typename V62, typename V63, typename V64, typename V65, typename V66, typename V67, typename V68, typename V69, typename V70, typename V71, typename V72, typename V73>
DbTable & DbTable::AddRow(V1 const &v1, V2 const &v2, V3 const &v3, V4 const &v4, V5 const &v5, V6 const &v6, V7 const &v7, V8 const &v8, V9 const &v9, V10 const &v10, V11 const &v11, V12 const &v12, V13 const &v13, V14 const &v14, V15 const &v15, V16 const &v16, V17 const &v17, V18 const &v18, V19 const &v19, V20 const &v20, V21 const &v21, V22 const &v22, V23 const &v23, V24 const &v24, V25 const &v25, V26 const &v26, V27 const &v27, V28 const &v28, V29 const &v29, V30 const &v30, V31 const &v31, V32 const &v32, V33 const &v33, V34 const &v34, V35 const &v35, V36 const &v36, V37 const &v37, V38 const &v38, V39 const &v39, V40 const &v40, V41 const &v41, V42 const &v42, V43 const &v43, V44 const &v44, V45 const &v45, V46 const &v46, V47 const &v47, V48 const &v48, V49 const &v49, V50 const &v50, V51 const &v51, V52 const &v52, V53 const &v53, V54 const &v54, V55 const &v55, V56 const &v56, V57 const &v57, V58 const &v58, V59 const &v59, V60 const &v60, V61 const &v61, V62 const &v62, V63 const &v63, V64 const &v64, V65 const &v65, V66 const &v66, V67 const &v67, V68 const &v68, V69 const &v69, V70 const &v70, V71 const &v71, V72 const &v72, V73 const &v73) {
    assert( _colNames.Length() == 73 );
    assert( _colTypes[0] == DbTypeIDs<V1>::ID() );
    assert( _colTypes[1] == DbTypeIDs<V2>::ID() );
    assert( _colTypes[2] == DbTypeIDs<V3>::ID() );
    assert( _colTypes[3] == DbTypeIDs<V4>::ID() );
    assert( _colTypes[4] == DbTypeIDs<V5>::ID() );
    assert( _colTypes[5] == DbTypeIDs<V6>::ID() );
    assert( _colTypes[6] == DbTypeIDs<V7>::ID() );
    assert( _colTypes[7] == DbTypeIDs<V8>::ID() );
    assert( _colTypes[8] == DbTypeIDs<V9>::ID() );
    assert( _colTypes[9] == DbTypeIDs<V10>::ID() );
    assert( _colTypes[10] == DbTypeIDs<V11>::ID() );
    assert( _colTypes[11] == DbTypeIDs<V12>::ID() );
    assert( _colTypes[12] == DbTypeIDs<V13>::ID() );
    assert( _colTypes[13] == DbTypeIDs<V14>::ID() );
    assert( _colTypes[14] == DbTypeIDs<V15>::ID() );
    assert( _colTypes[15] == DbTypeIDs<V16>::ID() );
    assert( _colTypes[16] == DbTypeIDs<V17>::ID() );
    assert( _colTypes[17] == DbTypeIDs<V18>::ID() );
    assert( _colTypes[18] == DbTypeIDs<V19>::ID() );
    assert( _colTypes[19] == DbTypeIDs<V20>::ID() );
    assert( _colTypes[20] == DbTypeIDs<V21>::ID() );
    assert( _colTypes[21] == DbTypeIDs<V22>::ID() );
    assert( _colTypes[22] == DbTypeIDs<V23>::ID() );
    assert( _colTypes[23] == DbTypeIDs<V24>::ID() );
    assert( _colTypes[24] == DbTypeIDs<V25>::ID() );
    assert( _colTypes[25] == DbTypeIDs<V26>::ID() );
    assert( _colTypes[26] == DbTypeIDs<V27>::ID() );
    assert( _colTypes[27] == DbTypeIDs<V28>::ID() );
    assert( _colTypes[28] == DbTypeIDs<V29>::ID() );
    assert( _colTypes[29] == DbTypeIDs<V30>::ID() );
    assert( _colTypes[30] == DbTypeIDs<V31>::ID() );
    assert( _colTypes[31] == DbTypeIDs<V32>::ID() );
    assert( _colTypes[32] == DbTypeIDs<V33>::ID() );
    assert( _colTypes[33] == DbTypeIDs<V34>::ID() );
    assert( _colTypes[34] == DbTypeIDs<V35>::ID() );
    assert( _colTypes[35] == DbTypeIDs<V36>::ID() );
    assert( _colTypes[36] == DbTypeIDs<V37>::ID() );
    assert( _colTypes[37] == DbTypeIDs<V38>::ID() );
    assert( _colTypes[38] == DbTypeIDs<V39>::ID() );
    assert( _colTypes[39] == DbTypeIDs<V40>::ID() );
    assert( _colTypes[40] == DbTypeIDs<V41>::ID() );
    assert( _colTypes[41] == DbTypeIDs<V42>::ID() );
    assert( _colTypes[42] == DbTypeIDs<V43>::ID() );
    assert( _colTypes[43] == DbTypeIDs<V44>::ID() );
    assert( _colTypes[44] == DbTypeIDs<V45>::ID() );
    assert( _colTypes[45] == DbTypeIDs<V46>::ID() );
    assert( _colTypes[46] == DbTypeIDs<V47>::ID() );
    assert( _colTypes[47] == DbTypeIDs<V48>::ID() );
    assert( _colTypes[48] == DbTypeIDs<V49>::ID() );
    assert( _colTypes[49] == DbTypeIDs<V50>::ID() );
    assert( _colTypes[50] == DbTypeIDs<V51>::ID() );
    assert( _colTypes[51] == DbTypeIDs<V52>::ID() );
    assert( _colTypes[52] == DbTypeIDs<V53>::ID() );
    assert( _colTypes[53] == DbTypeIDs<V54>::ID() );
    assert( _colTypes[54] == DbTypeIDs<V55>::ID() );
    assert( _colTypes[55] == DbTypeIDs<V56>::ID() );
    assert( _colTypes[56] == DbTypeIDs<V57>::ID() );
    assert( _colTypes[57] == DbTypeIDs<V58>::ID() );
    assert( _colTypes[58] == DbTypeIDs<V59>::ID() );
    assert( _colTypes[59] == DbTypeIDs<V60>::ID() );
    assert( _colTypes[60] == DbTypeIDs<V61>::ID() );
    assert( _colTypes[61] == DbTypeIDs<V62>::ID() );
    assert( _colTypes[62] == DbTypeIDs<V63>::ID() );
    assert( _colTypes[63] == DbTypeIDs<V64>::ID() );
    assert( _colTypes[64] == DbTypeIDs<V65>::ID() );
    assert( _colTypes[65] == DbTypeIDs<V66>::ID() );
    assert( _colTypes[66] == DbTypeIDs<V67>::ID() );
    assert( _colTypes[67] == DbTypeIDs<V68>::ID() );
    assert( _colTypes[68] == DbTypeIDs<V69>::ID() );
    assert( _colTypes[69] == DbTypeIDs<V70>::ID() );
    assert( _colTypes[70] == DbTypeIDs<V71>::ID() );
    assert( _colTypes[71] == DbTypeIDs<V72>::ID() );
    assert( _colTypes[72] == DbTypeIDs<V73>::ID() );
    ((List<V1>*)_colDatas[0])->Add(v1);
    ((List<V2>*)_colDatas[1])->Add(v2);
    ((List<V3>*)_colDatas[2])->Add(v3);
    ((List<V4>*)_colDatas[3])->Add(v4);
    ((List<V5>*)_colDatas[4])->Add(v5);
    ((List<V6>*)_colDatas[5])->Add(v6);
    ((List<V7>*)_colDatas[6])->Add(v7);
    ((List<V8>*)_colDatas[7])->Add(v8);
    ((List<V9>*)_colDatas[8])->Add(v9);
    ((List<V10>*)_colDatas[9])->Add(v10);
    ((List<V11>*)_colDatas[10])->Add(v11);
    ((List<V12>*)_colDatas[11])->Add(v12);
    ((List<V13>*)_colDatas[12])->Add(v13);
    ((List<V14>*)_colDatas[13])->Add(v14);
    ((List<V15>*)_colDatas[14])->Add(v15);
    ((List<V16>*)_colDatas[15])->Add(v16);
    ((List<V17>*)_colDatas[16])->Add(v17);
    ((List<V18>*)_colDatas[17])->Add(v18);
    ((List<V19>*)_colDatas[18])->Add(v19);
    ((List<V20>*)_colDatas[19])->Add(v20);
    ((List<V21>*)_colDatas[20])->Add(v21);
    ((List<V22>*)_colDatas[21])->Add(v22);
    ((List<V23>*)_colDatas[22])->Add(v23);
    ((List<V24>*)_colDatas[23])->Add(v24);
    ((List<V25>*)_colDatas[24])->Add(v25);
    ((List<V26>*)_colDatas[25])->Add(v26);
    ((List<V27>*)_colDatas[26])->Add(v27);
    ((List<V28>*)_colDatas[27])->Add(v28);
    ((List<V29>*)_colDatas[28])->Add(v29);
    ((List<V30>*)_colDatas[29])->Add(v30);
    ((List<V31>*)_colDatas[30])->Add(v31);
    ((List<V32>*)_colDatas[31])->Add(v32);
    ((List<V33>*)_colDatas[32])->Add(v33);
    ((List<V34>*)_colDatas[33])->Add(v34);
    ((List<V35>*)_colDatas[34])->Add(v35);
    ((List<V36>*)_colDatas[35])->Add(v36);
    ((List<V37>*)_colDatas[36])->Add(v37);
    ((List<V38>*)_colDatas[37])->Add(v38);
    ((List<V39>*)_colDatas[38])->Add(v39);
    ((List<V40>*)_colDatas[39])->Add(v40);
    ((List<V41>*)_colDatas[40])->Add(v41);
    ((List<V42>*)_colDatas[41])->Add(v42);
    ((List<V43>*)_colDatas[42])->Add(v43);
    ((List<V44>*)_colDatas[43])->Add(v44);
    ((List<V45>*)_colDatas[44])->Add(v45);
    ((List<V46>*)_colDatas[45])->Add(v46);
    ((List<V47>*)_colDatas[46])->Add(v47);
    ((List<V48>*)_colDatas[47])->Add(v48);
    ((List<V49>*)_colDatas[48])->Add(v49);
    ((List<V50>*)_colDatas[49])->Add(v50);
    ((List<V51>*)_colDatas[50])->Add(v51);
    ((List<V52>*)_colDatas[51])->Add(v52);
    ((List<V53>*)_colDatas[52])->Add(v53);
    ((List<V54>*)_colDatas[53])->Add(v54);
    ((List<V55>*)_colDatas[54])->Add(v55);
    ((List<V56>*)_colDatas[55])->Add(v56);
    ((List<V57>*)_colDatas[56])->Add(v57);
    ((List<V58>*)_colDatas[57])->Add(v58);
    ((List<V59>*)_colDatas[58])->Add(v59);
    ((List<V60>*)_colDatas[59])->Add(v60);
    ((List<V61>*)_colDatas[60])->Add(v61);
    ((List<V62>*)_colDatas[61])->Add(v62);
    ((List<V63>*)_colDatas[62])->Add(v63);
    ((List<V64>*)_colDatas[63])->Add(v64);
    ((List<V65>*)_colDatas[64])->Add(v65);
    ((List<V66>*)_colDatas[65])->Add(v66);
    ((List<V67>*)_colDatas[66])->Add(v67);
    ((List<V68>*)_colDatas[67])->Add(v68);
    ((List<V69>*)_colDatas[68])->Add(v69);
    ((List<V70>*)_colDatas[69])->Add(v70);
    ((List<V71>*)_colDatas[70])->Add(v71);
    ((List<V72>*)_colDatas[71])->Add(v72);
    ((List<V73>*)_colDatas[72])->Add(v73);
    ++_rowCount;
    return *this;
}
template<typename V1, typename V2, typename V3, typename V4, typename V5, typename V6, typename V7, typename V8, typename V9, typename V10, typename V11, typename V12, typename V13, typename V14, typename V15, typename V16, typename V17, typename V18, typename V19, typename V20, typename V21, typename V22, typename V23, typename V24, typename V25, typename V26, typename V27, typename V28, typename V29, typename V30, typename V31, typename V32, typename V33, typename V34, typename V35, typename V36, typename V37, typename V38, typename V39, typename V40, typename V41, typename V42, typename V43, typename V44, typename V45, typename V46, typename V47, typename V48, typename V49, typename V50, typename V51, typename V52, typename V53, typename V54, typename V55, typename V56, typename V57, typename V58, typename V59, typename V60, typename V61, typename V62, typename V63, typename V64, typename V65, typename V66, typename V67, typename V68, typename V69, typename V70, typename V71, typename V72, typename V73, typename V74>
DbTable & DbTable::AddRow(V1 const &v1, V2 const &v2, V3 const &v3, V4 const &v4, V5 const &v5, V6 const &v6, V7 const &v7, V8 const &v8, V9 const &v9, V10 const &v10, V11 const &v11, V12 const &v12, V13 const &v13, V14 const &v14, V15 const &v15, V16 const &v16, V17 const &v17, V18 const &v18, V19 const &v19, V20 const &v20, V21 const &v21, V22 const &v22, V23 const &v23, V24 const &v24, V25 const &v25, V26 const &v26, V27 const &v27, V28 const &v28, V29 const &v29, V30 const &v30, V31 const &v31, V32 const &v32, V33 const &v33, V34 const &v34, V35 const &v35, V36 const &v36, V37 const &v37, V38 const &v38, V39 const &v39, V40 const &v40, V41 const &v41, V42 const &v42, V43 const &v43, V44 const &v44, V45 const &v45, V46 const &v46, V47 const &v47, V48 const &v48, V49 const &v49, V50 const &v50, V51 const &v51, V52 const &v52, V53 const &v53, V54 const &v54, V55 const &v55, V56 const &v56, V57 const &v57, V58 const &v58, V59 const &v59, V60 const &v60, V61 const &v61, V62 const &v62, V63 const &v63, V64 const &v64, V65 const &v65, V66 const &v66, V67 const &v67, V68 const &v68, V69 const &v69, V70 const &v70, V71 const &v71, V72 const &v72, V73 const &v73, V74 const &v74) {
    assert( _colNames.Length() == 74 );
    assert( _colTypes[0] == DbTypeIDs<V1>::ID() );
    assert( _colTypes[1] == DbTypeIDs<V2>::ID() );
    assert( _colTypes[2] == DbTypeIDs<V3>::ID() );
    assert( _colTypes[3] == DbTypeIDs<V4>::ID() );
    assert( _colTypes[4] == DbTypeIDs<V5>::ID() );
    assert( _colTypes[5] == DbTypeIDs<V6>::ID() );
    assert( _colTypes[6] == DbTypeIDs<V7>::ID() );
    assert( _colTypes[7] == DbTypeIDs<V8>::ID() );
    assert( _colTypes[8] == DbTypeIDs<V9>::ID() );
    assert( _colTypes[9] == DbTypeIDs<V10>::ID() );
    assert( _colTypes[10] == DbTypeIDs<V11>::ID() );
    assert( _colTypes[11] == DbTypeIDs<V12>::ID() );
    assert( _colTypes[12] == DbTypeIDs<V13>::ID() );
    assert( _colTypes[13] == DbTypeIDs<V14>::ID() );
    assert( _colTypes[14] == DbTypeIDs<V15>::ID() );
    assert( _colTypes[15] == DbTypeIDs<V16>::ID() );
    assert( _colTypes[16] == DbTypeIDs<V17>::ID() );
    assert( _colTypes[17] == DbTypeIDs<V18>::ID() );
    assert( _colTypes[18] == DbTypeIDs<V19>::ID() );
    assert( _colTypes[19] == DbTypeIDs<V20>::ID() );
    assert( _colTypes[20] == DbTypeIDs<V21>::ID() );
    assert( _colTypes[21] == DbTypeIDs<V22>::ID() );
    assert( _colTypes[22] == DbTypeIDs<V23>::ID() );
    assert( _colTypes[23] == DbTypeIDs<V24>::ID() );
    assert( _colTypes[24] == DbTypeIDs<V25>::ID() );
    assert( _colTypes[25] == DbTypeIDs<V26>::ID() );
    assert( _colTypes[26] == DbTypeIDs<V27>::ID() );
    assert( _colTypes[27] == DbTypeIDs<V28>::ID() );
    assert( _colTypes[28] == DbTypeIDs<V29>::ID() );
    assert( _colTypes[29] == DbTypeIDs<V30>::ID() );
    assert( _colTypes[30] == DbTypeIDs<V31>::ID() );
    assert( _colTypes[31] == DbTypeIDs<V32>::ID() );
    assert( _colTypes[32] == DbTypeIDs<V33>::ID() );
    assert( _colTypes[33] == DbTypeIDs<V34>::ID() );
    assert( _colTypes[34] == DbTypeIDs<V35>::ID() );
    assert( _colTypes[35] == DbTypeIDs<V36>::ID() );
    assert( _colTypes[36] == DbTypeIDs<V37>::ID() );
    assert( _colTypes[37] == DbTypeIDs<V38>::ID() );
    assert( _colTypes[38] == DbTypeIDs<V39>::ID() );
    assert( _colTypes[39] == DbTypeIDs<V40>::ID() );
    assert( _colTypes[40] == DbTypeIDs<V41>::ID() );
    assert( _colTypes[41] == DbTypeIDs<V42>::ID() );
    assert( _colTypes[42] == DbTypeIDs<V43>::ID() );
    assert( _colTypes[43] == DbTypeIDs<V44>::ID() );
    assert( _colTypes[44] == DbTypeIDs<V45>::ID() );
    assert( _colTypes[45] == DbTypeIDs<V46>::ID() );
    assert( _colTypes[46] == DbTypeIDs<V47>::ID() );
    assert( _colTypes[47] == DbTypeIDs<V48>::ID() );
    assert( _colTypes[48] == DbTypeIDs<V49>::ID() );
    assert( _colTypes[49] == DbTypeIDs<V50>::ID() );
    assert( _colTypes[50] == DbTypeIDs<V51>::ID() );
    assert( _colTypes[51] == DbTypeIDs<V52>::ID() );
    assert( _colTypes[52] == DbTypeIDs<V53>::ID() );
    assert( _colTypes[53] == DbTypeIDs<V54>::ID() );
    assert( _colTypes[54] == DbTypeIDs<V55>::ID() );
    assert( _colTypes[55] == DbTypeIDs<V56>::ID() );
    assert( _colTypes[56] == DbTypeIDs<V57>::ID() );
    assert( _colTypes[57] == DbTypeIDs<V58>::ID() );
    assert( _colTypes[58] == DbTypeIDs<V59>::ID() );
    assert( _colTypes[59] == DbTypeIDs<V60>::ID() );
    assert( _colTypes[60] == DbTypeIDs<V61>::ID() );
    assert( _colTypes[61] == DbTypeIDs<V62>::ID() );
    assert( _colTypes[62] == DbTypeIDs<V63>::ID() );
    assert( _colTypes[63] == DbTypeIDs<V64>::ID() );
    assert( _colTypes[64] == DbTypeIDs<V65>::ID() );
    assert( _colTypes[65] == DbTypeIDs<V66>::ID() );
    assert( _colTypes[66] == DbTypeIDs<V67>::ID() );
    assert( _colTypes[67] == DbTypeIDs<V68>::ID() );
    assert( _colTypes[68] == DbTypeIDs<V69>::ID() );
    assert( _colTypes[69] == DbTypeIDs<V70>::ID() );
    assert( _colTypes[70] == DbTypeIDs<V71>::ID() );
    assert( _colTypes[71] == DbTypeIDs<V72>::ID() );
    assert( _colTypes[72] == DbTypeIDs<V73>::ID() );
    assert( _colTypes[73] == DbTypeIDs<V74>::ID() );
    ((List<V1>*)_colDatas[0])->Add(v1);
    ((List<V2>*)_colDatas[1])->Add(v2);
    ((List<V3>*)_colDatas[2])->Add(v3);
    ((List<V4>*)_colDatas[3])->Add(v4);
    ((List<V5>*)_colDatas[4])->Add(v5);
    ((List<V6>*)_colDatas[5])->Add(v6);
    ((List<V7>*)_colDatas[6])->Add(v7);
    ((List<V8>*)_colDatas[7])->Add(v8);
    ((List<V9>*)_colDatas[8])->Add(v9);
    ((List<V10>*)_colDatas[9])->Add(v10);
    ((List<V11>*)_colDatas[10])->Add(v11);
    ((List<V12>*)_colDatas[11])->Add(v12);
    ((List<V13>*)_colDatas[12])->Add(v13);
    ((List<V14>*)_colDatas[13])->Add(v14);
    ((List<V15>*)_colDatas[14])->Add(v15);
    ((List<V16>*)_colDatas[15])->Add(v16);
    ((List<V17>*)_colDatas[16])->Add(v17);
    ((List<V18>*)_colDatas[17])->Add(v18);
    ((List<V19>*)_colDatas[18])->Add(v19);
    ((List<V20>*)_colDatas[19])->Add(v20);
    ((List<V21>*)_colDatas[20])->Add(v21);
    ((List<V22>*)_colDatas[21])->Add(v22);
    ((List<V23>*)_colDatas[22])->Add(v23);
    ((List<V24>*)_colDatas[23])->Add(v24);
    ((List<V25>*)_colDatas[24])->Add(v25);
    ((List<V26>*)_colDatas[25])->Add(v26);
    ((List<V27>*)_colDatas[26])->Add(v27);
    ((List<V28>*)_colDatas[27])->Add(v28);
    ((List<V29>*)_colDatas[28])->Add(v29);
    ((List<V30>*)_colDatas[29])->Add(v30);
    ((List<V31>*)_colDatas[30])->Add(v31);
    ((List<V32>*)_colDatas[31])->Add(v32);
    ((List<V33>*)_colDatas[32])->Add(v33);
    ((List<V34>*)_colDatas[33])->Add(v34);
    ((List<V35>*)_colDatas[34])->Add(v35);
    ((List<V36>*)_colDatas[35])->Add(v36);
    ((List<V37>*)_colDatas[36])->Add(v37);
    ((List<V38>*)_colDatas[37])->Add(v38);
    ((List<V39>*)_colDatas[38])->Add(v39);
    ((List<V40>*)_colDatas[39])->Add(v40);
    ((List<V41>*)_colDatas[40])->Add(v41);
    ((List<V42>*)_colDatas[41])->Add(v42);
    ((List<V43>*)_colDatas[42])->Add(v43);
    ((List<V44>*)_colDatas[43])->Add(v44);
    ((List<V45>*)_colDatas[44])->Add(v45);
    ((List<V46>*)_colDatas[45])->Add(v46);
    ((List<V47>*)_colDatas[46])->Add(v47);
    ((List<V48>*)_colDatas[47])->Add(v48);
    ((List<V49>*)_colDatas[48])->Add(v49);
    ((List<V50>*)_colDatas[49])->Add(v50);
    ((List<V51>*)_colDatas[50])->Add(v51);
    ((List<V52>*)_colDatas[51])->Add(v52);
    ((List<V53>*)_colDatas[52])->Add(v53);
    ((List<V54>*)_colDatas[53])->Add(v54);
    ((List<V55>*)_colDatas[54])->Add(v55);
    ((List<V56>*)_colDatas[55])->Add(v56);
    ((List<V57>*)_colDatas[56])->Add(v57);
    ((List<V58>*)_colDatas[57])->Add(v58);
    ((List<V59>*)_colDatas[58])->Add(v59);
    ((List<V60>*)_colDatas[59])->Add(v60);
    ((List<V61>*)_colDatas[60])->Add(v61);
    ((List<V62>*)_colDatas[61])->Add(v62);
    ((List<V63>*)_colDatas[62])->Add(v63);
    ((List<V64>*)_colDatas[63])->Add(v64);
    ((List<V65>*)_colDatas[64])->Add(v65);
    ((List<V66>*)_colDatas[65])->Add(v66);
    ((List<V67>*)_colDatas[66])->Add(v67);
    ((List<V68>*)_colDatas[67])->Add(v68);
    ((List<V69>*)_colDatas[68])->Add(v69);
    ((List<V70>*)_colDatas[69])->Add(v70);
    ((List<V71>*)_colDatas[70])->Add(v71);
    ((List<V72>*)_colDatas[71])->Add(v72);
    ((List<V73>*)_colDatas[72])->Add(v73);
    ((List<V74>*)_colDatas[73])->Add(v74);
    ++_rowCount;
    return *this;
}
template<typename V1, typename V2, typename V3, typename V4, typename V5, typename V6, typename V7, typename V8, typename V9, typename V10, typename V11, typename V12, typename V13, typename V14, typename V15, typename V16, typename V17, typename V18, typename V19, typename V20, typename V21, typename V22, typename V23, typename V24, typename V25, typename V26, typename V27, typename V28, typename V29, typename V30, typename V31, typename V32, typename V33, typename V34, typename V35, typename V36, typename V37, typename V38, typename V39, typename V40, typename V41, typename V42, typename V43, typename V44, typename V45, typename V46, typename V47, typename V48, typename V49, typename V50, typename V51, typename V52, typename V53, typename V54, typename V55, typename V56, typename V57, typename V58, typename V59, typename V60, typename V61, typename V62, typename V63, typename V64, typename V65, typename V66, typename V67, typename V68, typename V69, typename V70, typename V71, typename V72, typename V73, typename V74, typename V75>
DbTable & DbTable::AddRow(V1 const &v1, V2 const &v2, V3 const &v3, V4 const &v4, V5 const &v5, V6 const &v6, V7 const &v7, V8 const &v8, V9 const &v9, V10 const &v10, V11 const &v11, V12 const &v12, V13 const &v13, V14 const &v14, V15 const &v15, V16 const &v16, V17 const &v17, V18 const &v18, V19 const &v19, V20 const &v20, V21 const &v21, V22 const &v22, V23 const &v23, V24 const &v24, V25 const &v25, V26 const &v26, V27 const &v27, V28 const &v28, V29 const &v29, V30 const &v30, V31 const &v31, V32 const &v32, V33 const &v33, V34 const &v34, V35 const &v35, V36 const &v36, V37 const &v37, V38 const &v38, V39 const &v39, V40 const &v40, V41 const &v41, V42 const &v42, V43 const &v43, V44 const &v44, V45 const &v45, V46 const &v46, V47 const &v47, V48 const &v48, V49 const &v49, V50 const &v50, V51 const &v51, V52 const &v52, V53 const &v53, V54 const &v54, V55 const &v55, V56 const &v56, V57 const &v57, V58 const &v58, V59 const &v59, V60 const &v60, V61 const &v61, V62 const &v62, V63 const &v63, V64 const &v64, V65 const &v65, V66 const &v66, V67 const &v67, V68 const &v68, V69 const &v69, V70 const &v70, V71 const &v71, V72 const &v72, V73 const &v73, V74 const &v74, V75 const &v75) {
    assert( _colNames.Length() == 75 );
    assert( _colTypes[0] == DbTypeIDs<V1>::ID() );
    assert( _colTypes[1] == DbTypeIDs<V2>::ID() );
    assert( _colTypes[2] == DbTypeIDs<V3>::ID() );
    assert( _colTypes[3] == DbTypeIDs<V4>::ID() );
    assert( _colTypes[4] == DbTypeIDs<V5>::ID() );
    assert( _colTypes[5] == DbTypeIDs<V6>::ID() );
    assert( _colTypes[6] == DbTypeIDs<V7>::ID() );
    assert( _colTypes[7] == DbTypeIDs<V8>::ID() );
    assert( _colTypes[8] == DbTypeIDs<V9>::ID() );
    assert( _colTypes[9] == DbTypeIDs<V10>::ID() );
    assert( _colTypes[10] == DbTypeIDs<V11>::ID() );
    assert( _colTypes[11] == DbTypeIDs<V12>::ID() );
    assert( _colTypes[12] == DbTypeIDs<V13>::ID() );
    assert( _colTypes[13] == DbTypeIDs<V14>::ID() );
    assert( _colTypes[14] == DbTypeIDs<V15>::ID() );
    assert( _colTypes[15] == DbTypeIDs<V16>::ID() );
    assert( _colTypes[16] == DbTypeIDs<V17>::ID() );
    assert( _colTypes[17] == DbTypeIDs<V18>::ID() );
    assert( _colTypes[18] == DbTypeIDs<V19>::ID() );
    assert( _colTypes[19] == DbTypeIDs<V20>::ID() );
    assert( _colTypes[20] == DbTypeIDs<V21>::ID() );
    assert( _colTypes[21] == DbTypeIDs<V22>::ID() );
    assert( _colTypes[22] == DbTypeIDs<V23>::ID() );
    assert( _colTypes[23] == DbTypeIDs<V24>::ID() );
    assert( _colTypes[24] == DbTypeIDs<V25>::ID() );
    assert( _colTypes[25] == DbTypeIDs<V26>::ID() );
    assert( _colTypes[26] == DbTypeIDs<V27>::ID() );
    assert( _colTypes[27] == DbTypeIDs<V28>::ID() );
    assert( _colTypes[28] == DbTypeIDs<V29>::ID() );
    assert( _colTypes[29] == DbTypeIDs<V30>::ID() );
    assert( _colTypes[30] == DbTypeIDs<V31>::ID() );
    assert( _colTypes[31] == DbTypeIDs<V32>::ID() );
    assert( _colTypes[32] == DbTypeIDs<V33>::ID() );
    assert( _colTypes[33] == DbTypeIDs<V34>::ID() );
    assert( _colTypes[34] == DbTypeIDs<V35>::ID() );
    assert( _colTypes[35] == DbTypeIDs<V36>::ID() );
    assert( _colTypes[36] == DbTypeIDs<V37>::ID() );
    assert( _colTypes[37] == DbTypeIDs<V38>::ID() );
    assert( _colTypes[38] == DbTypeIDs<V39>::ID() );
    assert( _colTypes[39] == DbTypeIDs<V40>::ID() );
    assert( _colTypes[40] == DbTypeIDs<V41>::ID() );
    assert( _colTypes[41] == DbTypeIDs<V42>::ID() );
    assert( _colTypes[42] == DbTypeIDs<V43>::ID() );
    assert( _colTypes[43] == DbTypeIDs<V44>::ID() );
    assert( _colTypes[44] == DbTypeIDs<V45>::ID() );
    assert( _colTypes[45] == DbTypeIDs<V46>::ID() );
    assert( _colTypes[46] == DbTypeIDs<V47>::ID() );
    assert( _colTypes[47] == DbTypeIDs<V48>::ID() );
    assert( _colTypes[48] == DbTypeIDs<V49>::ID() );
    assert( _colTypes[49] == DbTypeIDs<V50>::ID() );
    assert( _colTypes[50] == DbTypeIDs<V51>::ID() );
    assert( _colTypes[51] == DbTypeIDs<V52>::ID() );
    assert( _colTypes[52] == DbTypeIDs<V53>::ID() );
    assert( _colTypes[53] == DbTypeIDs<V54>::ID() );
    assert( _colTypes[54] == DbTypeIDs<V55>::ID() );
    assert( _colTypes[55] == DbTypeIDs<V56>::ID() );
    assert( _colTypes[56] == DbTypeIDs<V57>::ID() );
    assert( _colTypes[57] == DbTypeIDs<V58>::ID() );
    assert( _colTypes[58] == DbTypeIDs<V59>::ID() );
    assert( _colTypes[59] == DbTypeIDs<V60>::ID() );
    assert( _colTypes[60] == DbTypeIDs<V61>::ID() );
    assert( _colTypes[61] == DbTypeIDs<V62>::ID() );
    assert( _colTypes[62] == DbTypeIDs<V63>::ID() );
    assert( _colTypes[63] == DbTypeIDs<V64>::ID() );
    assert( _colTypes[64] == DbTypeIDs<V65>::ID() );
    assert( _colTypes[65] == DbTypeIDs<V66>::ID() );
    assert( _colTypes[66] == DbTypeIDs<V67>::ID() );
    assert( _colTypes[67] == DbTypeIDs<V68>::ID() );
    assert( _colTypes[68] == DbTypeIDs<V69>::ID() );
    assert( _colTypes[69] == DbTypeIDs<V70>::ID() );
    assert( _colTypes[70] == DbTypeIDs<V71>::ID() );
    assert( _colTypes[71] == DbTypeIDs<V72>::ID() );
    assert( _colTypes[72] == DbTypeIDs<V73>::ID() );
    assert( _colTypes[73] == DbTypeIDs<V74>::ID() );
    assert( _colTypes[74] == DbTypeIDs<V75>::ID() );
    ((List<V1>*)_colDatas[0])->Add(v1);
    ((List<V2>*)_colDatas[1])->Add(v2);
    ((List<V3>*)_colDatas[2])->Add(v3);
    ((List<V4>*)_colDatas[3])->Add(v4);
    ((List<V5>*)_colDatas[4])->Add(v5);
    ((List<V6>*)_colDatas[5])->Add(v6);
    ((List<V7>*)_colDatas[6])->Add(v7);
    ((List<V8>*)_colDatas[7])->Add(v8);
    ((List<V9>*)_colDatas[8])->Add(v9);
    ((List<V10>*)_colDatas[9])->Add(v10);
    ((List<V11>*)_colDatas[10])->Add(v11);
    ((List<V12>*)_colDatas[11])->Add(v12);
    ((List<V13>*)_colDatas[12])->Add(v13);
    ((List<V14>*)_colDatas[13])->Add(v14);
    ((List<V15>*)_colDatas[14])->Add(v15);
    ((List<V16>*)_colDatas[15])->Add(v16);
    ((List<V17>*)_colDatas[16])->Add(v17);
    ((List<V18>*)_colDatas[17])->Add(v18);
    ((List<V19>*)_colDatas[18])->Add(v19);
    ((List<V20>*)_colDatas[19])->Add(v20);
    ((List<V21>*)_colDatas[20])->Add(v21);
    ((List<V22>*)_colDatas[21])->Add(v22);
    ((List<V23>*)_colDatas[22])->Add(v23);
    ((List<V24>*)_colDatas[23])->Add(v24);
    ((List<V25>*)_colDatas[24])->Add(v25);
    ((List<V26>*)_colDatas[25])->Add(v26);
    ((List<V27>*)_colDatas[26])->Add(v27);
    ((List<V28>*)_colDatas[27])->Add(v28);
    ((List<V29>*)_colDatas[28])->Add(v29);
    ((List<V30>*)_colDatas[29])->Add(v30);
    ((List<V31>*)_colDatas[30])->Add(v31);
    ((List<V32>*)_colDatas[31])->Add(v32);
    ((List<V33>*)_colDatas[32])->Add(v33);
    ((List<V34>*)_colDatas[33])->Add(v34);
    ((List<V35>*)_colDatas[34])->Add(v35);
    ((List<V36>*)_colDatas[35])->Add(v36);
    ((List<V37>*)_colDatas[36])->Add(v37);
    ((List<V38>*)_colDatas[37])->Add(v38);
    ((List<V39>*)_colDatas[38])->Add(v39);
    ((List<V40>*)_colDatas[39])->Add(v40);
    ((List<V41>*)_colDatas[40])->Add(v41);
    ((List<V42>*)_colDatas[41])->Add(v42);
    ((List<V43>*)_colDatas[42])->Add(v43);
    ((List<V44>*)_colDatas[43])->Add(v44);
    ((List<V45>*)_colDatas[44])->Add(v45);
    ((List<V46>*)_colDatas[45])->Add(v46);
    ((List<V47>*)_colDatas[46])->Add(v47);
    ((List<V48>*)_colDatas[47])->Add(v48);
    ((List<V49>*)_colDatas[48])->Add(v49);
    ((List<V50>*)_colDatas[49])->Add(v50);
    ((List<V51>*)_colDatas[50])->Add(v51);
    ((List<V52>*)_colDatas[51])->Add(v52);
    ((List<V53>*)_colDatas[52])->Add(v53);
    ((List<V54>*)_colDatas[53])->Add(v54);
    ((List<V55>*)_colDatas[54])->Add(v55);
    ((List<V56>*)_colDatas[55])->Add(v56);
    ((List<V57>*)_colDatas[56])->Add(v57);
    ((List<V58>*)_colDatas[57])->Add(v58);
    ((List<V59>*)_colDatas[58])->Add(v59);
    ((List<V60>*)_colDatas[59])->Add(v60);
    ((List<V61>*)_colDatas[60])->Add(v61);
    ((List<V62>*)_colDatas[61])->Add(v62);
    ((List<V63>*)_colDatas[62])->Add(v63);
    ((List<V64>*)_colDatas[63])->Add(v64);
    ((List<V65>*)_colDatas[64])->Add(v65);
    ((List<V66>*)_colDatas[65])->Add(v66);
    ((List<V67>*)_colDatas[66])->Add(v67);
    ((List<V68>*)_colDatas[67])->Add(v68);
    ((List<V69>*)_colDatas[68])->Add(v69);
    ((List<V70>*)_colDatas[69])->Add(v70);
    ((List<V71>*)_colDatas[70])->Add(v71);
    ((List<V72>*)_colDatas[71])->Add(v72);
    ((List<V73>*)_colDatas[72])->Add(v73);
    ((List<V74>*)_colDatas[73])->Add(v74);
    ((List<V75>*)_colDatas[74])->Add(v75);
    ++_rowCount;
    return *this;
}
template<typename V1, typename V2, typename V3, typename V4, typename V5, typename V6, typename V7, typename V8, typename V9, typename V10, typename V11, typename V12, typename V13, typename V14, typename V15, typename V16, typename V17, typename V18, typename V19, typename V20, typename V21, typename V22, typename V23, typename V24, typename V25, typename V26, typename V27, typename V28, typename V29, typename V30, typename V31, typename V32, typename V33, typename V34, typename V35, typename V36, typename V37, typename V38, typename V39, typename V40, typename V41, typename V42, typename V43, typename V44, typename V45, typename V46, typename V47, typename V48, typename V49, typename V50, typename V51, typename V52, typename V53, typename V54, typename V55, typename V56, typename V57, typename V58, typename V59, typename V60, typename V61, typename V62, typename V63, typename V64, typename V65, typename V66, typename V67, typename V68, typename V69, typename V70, typename V71, typename V72, typename V73, typename V74, typename V75, typename V76>
DbTable & DbTable::AddRow(V1 const &v1, V2 const &v2, V3 const &v3, V4 const &v4, V5 const &v5, V6 const &v6, V7 const &v7, V8 const &v8, V9 const &v9, V10 const &v10, V11 const &v11, V12 const &v12, V13 const &v13, V14 const &v14, V15 const &v15, V16 const &v16, V17 const &v17, V18 const &v18, V19 const &v19, V20 const &v20, V21 const &v21, V22 const &v22, V23 const &v23, V24 const &v24, V25 const &v25, V26 const &v26, V27 const &v27, V28 const &v28, V29 const &v29, V30 const &v30, V31 const &v31, V32 const &v32, V33 const &v33, V34 const &v34, V35 const &v35, V36 const &v36, V37 const &v37, V38 const &v38, V39 const &v39, V40 const &v40, V41 const &v41, V42 const &v42, V43 const &v43, V44 const &v44, V45 const &v45, V46 const &v46, V47 const &v47, V48 const &v48, V49 const &v49, V50 const &v50, V51 const &v51, V52 const &v52, V53 const &v53, V54 const &v54, V55 const &v55, V56 const &v56, V57 const &v57, V58 const &v58, V59 const &v59, V60 const &v60, V61 const &v61, V62 const &v62, V63 const &v63, V64 const &v64, V65 const &v65, V66 const &v66, V67 const &v67, V68 const &v68, V69 const &v69, V70 const &v70, V71 const &v71, V72 const &v72, V73 const &v73, V74 const &v74, V75 const &v75, V76 const &v76) {
    assert( _colNames.Length() == 76 );
    assert( _colTypes[0] == DbTypeIDs<V1>::ID() );
    assert( _colTypes[1] == DbTypeIDs<V2>::ID() );
    assert( _colTypes[2] == DbTypeIDs<V3>::ID() );
    assert( _colTypes[3] == DbTypeIDs<V4>::ID() );
    assert( _colTypes[4] == DbTypeIDs<V5>::ID() );
    assert( _colTypes[5] == DbTypeIDs<V6>::ID() );
    assert( _colTypes[6] == DbTypeIDs<V7>::ID() );
    assert( _colTypes[7] == DbTypeIDs<V8>::ID() );
    assert( _colTypes[8] == DbTypeIDs<V9>::ID() );
    assert( _colTypes[9] == DbTypeIDs<V10>::ID() );
    assert( _colTypes[10] == DbTypeIDs<V11>::ID() );
    assert( _colTypes[11] == DbTypeIDs<V12>::ID() );
    assert( _colTypes[12] == DbTypeIDs<V13>::ID() );
    assert( _colTypes[13] == DbTypeIDs<V14>::ID() );
    assert( _colTypes[14] == DbTypeIDs<V15>::ID() );
    assert( _colTypes[15] == DbTypeIDs<V16>::ID() );
    assert( _colTypes[16] == DbTypeIDs<V17>::ID() );
    assert( _colTypes[17] == DbTypeIDs<V18>::ID() );
    assert( _colTypes[18] == DbTypeIDs<V19>::ID() );
    assert( _colTypes[19] == DbTypeIDs<V20>::ID() );
    assert( _colTypes[20] == DbTypeIDs<V21>::ID() );
    assert( _colTypes[21] == DbTypeIDs<V22>::ID() );
    assert( _colTypes[22] == DbTypeIDs<V23>::ID() );
    assert( _colTypes[23] == DbTypeIDs<V24>::ID() );
    assert( _colTypes[24] == DbTypeIDs<V25>::ID() );
    assert( _colTypes[25] == DbTypeIDs<V26>::ID() );
    assert( _colTypes[26] == DbTypeIDs<V27>::ID() );
    assert( _colTypes[27] == DbTypeIDs<V28>::ID() );
    assert( _colTypes[28] == DbTypeIDs<V29>::ID() );
    assert( _colTypes[29] == DbTypeIDs<V30>::ID() );
    assert( _colTypes[30] == DbTypeIDs<V31>::ID() );
    assert( _colTypes[31] == DbTypeIDs<V32>::ID() );
    assert( _colTypes[32] == DbTypeIDs<V33>::ID() );
    assert( _colTypes[33] == DbTypeIDs<V34>::ID() );
    assert( _colTypes[34] == DbTypeIDs<V35>::ID() );
    assert( _colTypes[35] == DbTypeIDs<V36>::ID() );
    assert( _colTypes[36] == DbTypeIDs<V37>::ID() );
    assert( _colTypes[37] == DbTypeIDs<V38>::ID() );
    assert( _colTypes[38] == DbTypeIDs<V39>::ID() );
    assert( _colTypes[39] == DbTypeIDs<V40>::ID() );
    assert( _colTypes[40] == DbTypeIDs<V41>::ID() );
    assert( _colTypes[41] == DbTypeIDs<V42>::ID() );
    assert( _colTypes[42] == DbTypeIDs<V43>::ID() );
    assert( _colTypes[43] == DbTypeIDs<V44>::ID() );
    assert( _colTypes[44] == DbTypeIDs<V45>::ID() );
    assert( _colTypes[45] == DbTypeIDs<V46>::ID() );
    assert( _colTypes[46] == DbTypeIDs<V47>::ID() );
    assert( _colTypes[47] == DbTypeIDs<V48>::ID() );
    assert( _colTypes[48] == DbTypeIDs<V49>::ID() );
    assert( _colTypes[49] == DbTypeIDs<V50>::ID() );
    assert( _colTypes[50] == DbTypeIDs<V51>::ID() );
    assert( _colTypes[51] == DbTypeIDs<V52>::ID() );
    assert( _colTypes[52] == DbTypeIDs<V53>::ID() );
    assert( _colTypes[53] == DbTypeIDs<V54>::ID() );
    assert( _colTypes[54] == DbTypeIDs<V55>::ID() );
    assert( _colTypes[55] == DbTypeIDs<V56>::ID() );
    assert( _colTypes[56] == DbTypeIDs<V57>::ID() );
    assert( _colTypes[57] == DbTypeIDs<V58>::ID() );
    assert( _colTypes[58] == DbTypeIDs<V59>::ID() );
    assert( _colTypes[59] == DbTypeIDs<V60>::ID() );
    assert( _colTypes[60] == DbTypeIDs<V61>::ID() );
    assert( _colTypes[61] == DbTypeIDs<V62>::ID() );
    assert( _colTypes[62] == DbTypeIDs<V63>::ID() );
    assert( _colTypes[63] == DbTypeIDs<V64>::ID() );
    assert( _colTypes[64] == DbTypeIDs<V65>::ID() );
    assert( _colTypes[65] == DbTypeIDs<V66>::ID() );
    assert( _colTypes[66] == DbTypeIDs<V67>::ID() );
    assert( _colTypes[67] == DbTypeIDs<V68>::ID() );
    assert( _colTypes[68] == DbTypeIDs<V69>::ID() );
    assert( _colTypes[69] == DbTypeIDs<V70>::ID() );
    assert( _colTypes[70] == DbTypeIDs<V71>::ID() );
    assert( _colTypes[71] == DbTypeIDs<V72>::ID() );
    assert( _colTypes[72] == DbTypeIDs<V73>::ID() );
    assert( _colTypes[73] == DbTypeIDs<V74>::ID() );
    assert( _colTypes[74] == DbTypeIDs<V75>::ID() );
    assert( _colTypes[75] == DbTypeIDs<V76>::ID() );
    ((List<V1>*)_colDatas[0])->Add(v1);
    ((List<V2>*)_colDatas[1])->Add(v2);
    ((List<V3>*)_colDatas[2])->Add(v3);
    ((List<V4>*)_colDatas[3])->Add(v4);
    ((List<V5>*)_colDatas[4])->Add(v5);
    ((List<V6>*)_colDatas[5])->Add(v6);
    ((List<V7>*)_colDatas[6])->Add(v7);
    ((List<V8>*)_colDatas[7])->Add(v8);
    ((List<V9>*)_colDatas[8])->Add(v9);
    ((List<V10>*)_colDatas[9])->Add(v10);
    ((List<V11>*)_colDatas[10])->Add(v11);
    ((List<V12>*)_colDatas[11])->Add(v12);
    ((List<V13>*)_colDatas[12])->Add(v13);
    ((List<V14>*)_colDatas[13])->Add(v14);
    ((List<V15>*)_colDatas[14])->Add(v15);
    ((List<V16>*)_colDatas[15])->Add(v16);
    ((List<V17>*)_colDatas[16])->Add(v17);
    ((List<V18>*)_colDatas[17])->Add(v18);
    ((List<V19>*)_colDatas[18])->Add(v19);
    ((List<V20>*)_colDatas[19])->Add(v20);
    ((List<V21>*)_colDatas[20])->Add(v21);
    ((List<V22>*)_colDatas[21])->Add(v22);
    ((List<V23>*)_colDatas[22])->Add(v23);
    ((List<V24>*)_colDatas[23])->Add(v24);
    ((List<V25>*)_colDatas[24])->Add(v25);
    ((List<V26>*)_colDatas[25])->Add(v26);
    ((List<V27>*)_colDatas[26])->Add(v27);
    ((List<V28>*)_colDatas[27])->Add(v28);
    ((List<V29>*)_colDatas[28])->Add(v29);
    ((List<V30>*)_colDatas[29])->Add(v30);
    ((List<V31>*)_colDatas[30])->Add(v31);
    ((List<V32>*)_colDatas[31])->Add(v32);
    ((List<V33>*)_colDatas[32])->Add(v33);
    ((List<V34>*)_colDatas[33])->Add(v34);
    ((List<V35>*)_colDatas[34])->Add(v35);
    ((List<V36>*)_colDatas[35])->Add(v36);
    ((List<V37>*)_colDatas[36])->Add(v37);
    ((List<V38>*)_colDatas[37])->Add(v38);
    ((List<V39>*)_colDatas[38])->Add(v39);
    ((List<V40>*)_colDatas[39])->Add(v40);
    ((List<V41>*)_colDatas[40])->Add(v41);
    ((List<V42>*)_colDatas[41])->Add(v42);
    ((List<V43>*)_colDatas[42])->Add(v43);
    ((List<V44>*)_colDatas[43])->Add(v44);
    ((List<V45>*)_colDatas[44])->Add(v45);
    ((List<V46>*)_colDatas[45])->Add(v46);
    ((List<V47>*)_colDatas[46])->Add(v47);
    ((List<V48>*)_colDatas[47])->Add(v48);
    ((List<V49>*)_colDatas[48])->Add(v49);
    ((List<V50>*)_colDatas[49])->Add(v50);
    ((List<V51>*)_colDatas[50])->Add(v51);
    ((List<V52>*)_colDatas[51])->Add(v52);
    ((List<V53>*)_colDatas[52])->Add(v53);
    ((List<V54>*)_colDatas[53])->Add(v54);
    ((List<V55>*)_colDatas[54])->Add(v55);
    ((List<V56>*)_colDatas[55])->Add(v56);
    ((List<V57>*)_colDatas[56])->Add(v57);
    ((List<V58>*)_colDatas[57])->Add(v58);
    ((List<V59>*)_colDatas[58])->Add(v59);
    ((List<V60>*)_colDatas[59])->Add(v60);
    ((List<V61>*)_colDatas[60])->Add(v61);
    ((List<V62>*)_colDatas[61])->Add(v62);
    ((List<V63>*)_colDatas[62])->Add(v63);
    ((List<V64>*)_colDatas[63])->Add(v64);
    ((List<V65>*)_colDatas[64])->Add(v65);
    ((List<V66>*)_colDatas[65])->Add(v66);
    ((List<V67>*)_colDatas[66])->Add(v67);
    ((List<V68>*)_colDatas[67])->Add(v68);
    ((List<V69>*)_colDatas[68])->Add(v69);
    ((List<V70>*)_colDatas[69])->Add(v70);
    ((List<V71>*)_colDatas[70])->Add(v71);
    ((List<V72>*)_colDatas[71])->Add(v72);
    ((List<V73>*)_colDatas[72])->Add(v73);
    ((List<V74>*)_colDatas[73])->Add(v74);
    ((List<V75>*)_colDatas[74])->Add(v75);
    ((List<V76>*)_colDatas[75])->Add(v76);
    ++_rowCount;
    return *this;
}
template<typename V1, typename V2, typename V3, typename V4, typename V5, typename V6, typename V7, typename V8, typename V9, typename V10, typename V11, typename V12, typename V13, typename V14, typename V15, typename V16, typename V17, typename V18, typename V19, typename V20, typename V21, typename V22, typename V23, typename V24, typename V25, typename V26, typename V27, typename V28, typename V29, typename V30, typename V31, typename V32, typename V33, typename V34, typename V35, typename V36, typename V37, typename V38, typename V39, typename V40, typename V41, typename V42, typename V43, typename V44, typename V45, typename V46, typename V47, typename V48, typename V49, typename V50, typename V51, typename V52, typename V53, typename V54, typename V55, typename V56, typename V57, typename V58, typename V59, typename V60, typename V61, typename V62, typename V63, typename V64, typename V65, typename V66, typename V67, typename V68, typename V69, typename V70, typename V71, typename V72, typename V73, typename V74, typename V75, typename V76, typename V77>
DbTable & DbTable::AddRow(V1 const &v1, V2 const &v2, V3 const &v3, V4 const &v4, V5 const &v5, V6 const &v6, V7 const &v7, V8 const &v8, V9 const &v9, V10 const &v10, V11 const &v11, V12 const &v12, V13 const &v13, V14 const &v14, V15 const &v15, V16 const &v16, V17 const &v17, V18 const &v18, V19 const &v19, V20 const &v20, V21 const &v21, V22 const &v22, V23 const &v23, V24 const &v24, V25 const &v25, V26 const &v26, V27 const &v27, V28 const &v28, V29 const &v29, V30 const &v30, V31 const &v31, V32 const &v32, V33 const &v33, V34 const &v34, V35 const &v35, V36 const &v36, V37 const &v37, V38 const &v38, V39 const &v39, V40 const &v40, V41 const &v41, V42 const &v42, V43 const &v43, V44 const &v44, V45 const &v45, V46 const &v46, V47 const &v47, V48 const &v48, V49 const &v49, V50 const &v50, V51 const &v51, V52 const &v52, V53 const &v53, V54 const &v54, V55 const &v55, V56 const &v56, V57 const &v57, V58 const &v58, V59 const &v59, V60 const &v60, V61 const &v61, V62 const &v62, V63 const &v63, V64 const &v64, V65 const &v65, V66 const &v66, V67 const &v67, V68 const &v68, V69 const &v69, V70 const &v70, V71 const &v71, V72 const &v72, V73 const &v73, V74 const &v74, V75 const &v75, V76 const &v76, V77 const &v77) {
    assert( _colNames.Length() == 77 );
    assert( _colTypes[0] == DbTypeIDs<V1>::ID() );
    assert( _colTypes[1] == DbTypeIDs<V2>::ID() );
    assert( _colTypes[2] == DbTypeIDs<V3>::ID() );
    assert( _colTypes[3] == DbTypeIDs<V4>::ID() );
    assert( _colTypes[4] == DbTypeIDs<V5>::ID() );
    assert( _colTypes[5] == DbTypeIDs<V6>::ID() );
    assert( _colTypes[6] == DbTypeIDs<V7>::ID() );
    assert( _colTypes[7] == DbTypeIDs<V8>::ID() );
    assert( _colTypes[8] == DbTypeIDs<V9>::ID() );
    assert( _colTypes[9] == DbTypeIDs<V10>::ID() );
    assert( _colTypes[10] == DbTypeIDs<V11>::ID() );
    assert( _colTypes[11] == DbTypeIDs<V12>::ID() );
    assert( _colTypes[12] == DbTypeIDs<V13>::ID() );
    assert( _colTypes[13] == DbTypeIDs<V14>::ID() );
    assert( _colTypes[14] == DbTypeIDs<V15>::ID() );
    assert( _colTypes[15] == DbTypeIDs<V16>::ID() );
    assert( _colTypes[16] == DbTypeIDs<V17>::ID() );
    assert( _colTypes[17] == DbTypeIDs<V18>::ID() );
    assert( _colTypes[18] == DbTypeIDs<V19>::ID() );
    assert( _colTypes[19] == DbTypeIDs<V20>::ID() );
    assert( _colTypes[20] == DbTypeIDs<V21>::ID() );
    assert( _colTypes[21] == DbTypeIDs<V22>::ID() );
    assert( _colTypes[22] == DbTypeIDs<V23>::ID() );
    assert( _colTypes[23] == DbTypeIDs<V24>::ID() );
    assert( _colTypes[24] == DbTypeIDs<V25>::ID() );
    assert( _colTypes[25] == DbTypeIDs<V26>::ID() );
    assert( _colTypes[26] == DbTypeIDs<V27>::ID() );
    assert( _colTypes[27] == DbTypeIDs<V28>::ID() );
    assert( _colTypes[28] == DbTypeIDs<V29>::ID() );
    assert( _colTypes[29] == DbTypeIDs<V30>::ID() );
    assert( _colTypes[30] == DbTypeIDs<V31>::ID() );
    assert( _colTypes[31] == DbTypeIDs<V32>::ID() );
    assert( _colTypes[32] == DbTypeIDs<V33>::ID() );
    assert( _colTypes[33] == DbTypeIDs<V34>::ID() );
    assert( _colTypes[34] == DbTypeIDs<V35>::ID() );
    assert( _colTypes[35] == DbTypeIDs<V36>::ID() );
    assert( _colTypes[36] == DbTypeIDs<V37>::ID() );
    assert( _colTypes[37] == DbTypeIDs<V38>::ID() );
    assert( _colTypes[38] == DbTypeIDs<V39>::ID() );
    assert( _colTypes[39] == DbTypeIDs<V40>::ID() );
    assert( _colTypes[40] == DbTypeIDs<V41>::ID() );
    assert( _colTypes[41] == DbTypeIDs<V42>::ID() );
    assert( _colTypes[42] == DbTypeIDs<V43>::ID() );
    assert( _colTypes[43] == DbTypeIDs<V44>::ID() );
    assert( _colTypes[44] == DbTypeIDs<V45>::ID() );
    assert( _colTypes[45] == DbTypeIDs<V46>::ID() );
    assert( _colTypes[46] == DbTypeIDs<V47>::ID() );
    assert( _colTypes[47] == DbTypeIDs<V48>::ID() );
    assert( _colTypes[48] == DbTypeIDs<V49>::ID() );
    assert( _colTypes[49] == DbTypeIDs<V50>::ID() );
    assert( _colTypes[50] == DbTypeIDs<V51>::ID() );
    assert( _colTypes[51] == DbTypeIDs<V52>::ID() );
    assert( _colTypes[52] == DbTypeIDs<V53>::ID() );
    assert( _colTypes[53] == DbTypeIDs<V54>::ID() );
    assert( _colTypes[54] == DbTypeIDs<V55>::ID() );
    assert( _colTypes[55] == DbTypeIDs<V56>::ID() );
    assert( _colTypes[56] == DbTypeIDs<V57>::ID() );
    assert( _colTypes[57] == DbTypeIDs<V58>::ID() );
    assert( _colTypes[58] == DbTypeIDs<V59>::ID() );
    assert( _colTypes[59] == DbTypeIDs<V60>::ID() );
    assert( _colTypes[60] == DbTypeIDs<V61>::ID() );
    assert( _colTypes[61] == DbTypeIDs<V62>::ID() );
    assert( _colTypes[62] == DbTypeIDs<V63>::ID() );
    assert( _colTypes[63] == DbTypeIDs<V64>::ID() );
    assert( _colTypes[64] == DbTypeIDs<V65>::ID() );
    assert( _colTypes[65] == DbTypeIDs<V66>::ID() );
    assert( _colTypes[66] == DbTypeIDs<V67>::ID() );
    assert( _colTypes[67] == DbTypeIDs<V68>::ID() );
    assert( _colTypes[68] == DbTypeIDs<V69>::ID() );
    assert( _colTypes[69] == DbTypeIDs<V70>::ID() );
    assert( _colTypes[70] == DbTypeIDs<V71>::ID() );
    assert( _colTypes[71] == DbTypeIDs<V72>::ID() );
    assert( _colTypes[72] == DbTypeIDs<V73>::ID() );
    assert( _colTypes[73] == DbTypeIDs<V74>::ID() );
    assert( _colTypes[74] == DbTypeIDs<V75>::ID() );
    assert( _colTypes[75] == DbTypeIDs<V76>::ID() );
    assert( _colTypes[76] == DbTypeIDs<V77>::ID() );
    ((List<V1>*)_colDatas[0])->Add(v1);
    ((List<V2>*)_colDatas[1])->Add(v2);
    ((List<V3>*)_colDatas[2])->Add(v3);
    ((List<V4>*)_colDatas[3])->Add(v4);
    ((List<V5>*)_colDatas[4])->Add(v5);
    ((List<V6>*)_colDatas[5])->Add(v6);
    ((List<V7>*)_colDatas[6])->Add(v7);
    ((List<V8>*)_colDatas[7])->Add(v8);
    ((List<V9>*)_colDatas[8])->Add(v9);
    ((List<V10>*)_colDatas[9])->Add(v10);
    ((List<V11>*)_colDatas[10])->Add(v11);
    ((List<V12>*)_colDatas[11])->Add(v12);
    ((List<V13>*)_colDatas[12])->Add(v13);
    ((List<V14>*)_colDatas[13])->Add(v14);
    ((List<V15>*)_colDatas[14])->Add(v15);
    ((List<V16>*)_colDatas[15])->Add(v16);
    ((List<V17>*)_colDatas[16])->Add(v17);
    ((List<V18>*)_colDatas[17])->Add(v18);
    ((List<V19>*)_colDatas[18])->Add(v19);
    ((List<V20>*)_colDatas[19])->Add(v20);
    ((List<V21>*)_colDatas[20])->Add(v21);
    ((List<V22>*)_colDatas[21])->Add(v22);
    ((List<V23>*)_colDatas[22])->Add(v23);
    ((List<V24>*)_colDatas[23])->Add(v24);
    ((List<V25>*)_colDatas[24])->Add(v25);
    ((List<V26>*)_colDatas[25])->Add(v26);
    ((List<V27>*)_colDatas[26])->Add(v27);
    ((List<V28>*)_colDatas[27])->Add(v28);
    ((List<V29>*)_colDatas[28])->Add(v29);
    ((List<V30>*)_colDatas[29])->Add(v30);
    ((List<V31>*)_colDatas[30])->Add(v31);
    ((List<V32>*)_colDatas[31])->Add(v32);
    ((List<V33>*)_colDatas[32])->Add(v33);
    ((List<V34>*)_colDatas[33])->Add(v34);
    ((List<V35>*)_colDatas[34])->Add(v35);
    ((List<V36>*)_colDatas[35])->Add(v36);
    ((List<V37>*)_colDatas[36])->Add(v37);
    ((List<V38>*)_colDatas[37])->Add(v38);
    ((List<V39>*)_colDatas[38])->Add(v39);
    ((List<V40>*)_colDatas[39])->Add(v40);
    ((List<V41>*)_colDatas[40])->Add(v41);
    ((List<V42>*)_colDatas[41])->Add(v42);
    ((List<V43>*)_colDatas[42])->Add(v43);
    ((List<V44>*)_colDatas[43])->Add(v44);
    ((List<V45>*)_colDatas[44])->Add(v45);
    ((List<V46>*)_colDatas[45])->Add(v46);
    ((List<V47>*)_colDatas[46])->Add(v47);
    ((List<V48>*)_colDatas[47])->Add(v48);
    ((List<V49>*)_colDatas[48])->Add(v49);
    ((List<V50>*)_colDatas[49])->Add(v50);
    ((List<V51>*)_colDatas[50])->Add(v51);
    ((List<V52>*)_colDatas[51])->Add(v52);
    ((List<V53>*)_colDatas[52])->Add(v53);
    ((List<V54>*)_colDatas[53])->Add(v54);
    ((List<V55>*)_colDatas[54])->Add(v55);
    ((List<V56>*)_colDatas[55])->Add(v56);
    ((List<V57>*)_colDatas[56])->Add(v57);
    ((List<V58>*)_colDatas[57])->Add(v58);
    ((List<V59>*)_colDatas[58])->Add(v59);
    ((List<V60>*)_colDatas[59])->Add(v60);
    ((List<V61>*)_colDatas[60])->Add(v61);
    ((List<V62>*)_colDatas[61])->Add(v62);
    ((List<V63>*)_colDatas[62])->Add(v63);
    ((List<V64>*)_colDatas[63])->Add(v64);
    ((List<V65>*)_colDatas[64])->Add(v65);
    ((List<V66>*)_colDatas[65])->Add(v66);
    ((List<V67>*)_colDatas[66])->Add(v67);
    ((List<V68>*)_colDatas[67])->Add(v68);
    ((List<V69>*)_colDatas[68])->Add(v69);
    ((List<V70>*)_colDatas[69])->Add(v70);
    ((List<V71>*)_colDatas[70])->Add(v71);
    ((List<V72>*)_colDatas[71])->Add(v72);
    ((List<V73>*)_colDatas[72])->Add(v73);
    ((List<V74>*)_colDatas[73])->Add(v74);
    ((List<V75>*)_colDatas[74])->Add(v75);
    ((List<V76>*)_colDatas[75])->Add(v76);
    ((List<V77>*)_colDatas[76])->Add(v77);
    ++_rowCount;
    return *this;
}
template<typename V1, typename V2, typename V3, typename V4, typename V5, typename V6, typename V7, typename V8, typename V9, typename V10, typename V11, typename V12, typename V13, typename V14, typename V15, typename V16, typename V17, typename V18, typename V19, typename V20, typename V21, typename V22, typename V23, typename V24, typename V25, typename V26, typename V27, typename V28, typename V29, typename V30, typename V31, typename V32, typename V33, typename V34, typename V35, typename V36, typename V37, typename V38, typename V39, typename V40, typename V41, typename V42, typename V43, typename V44, typename V45, typename V46, typename V47, typename V48, typename V49, typename V50, typename V51, typename V52, typename V53, typename V54, typename V55, typename V56, typename V57, typename V58, typename V59, typename V60, typename V61, typename V62, typename V63, typename V64, typename V65, typename V66, typename V67, typename V68, typename V69, typename V70, typename V71, typename V72, typename V73, typename V74, typename V75, typename V76, typename V77, typename V78>
DbTable & DbTable::AddRow(V1 const &v1, V2 const &v2, V3 const &v3, V4 const &v4, V5 const &v5, V6 const &v6, V7 const &v7, V8 const &v8, V9 const &v9, V10 const &v10, V11 const &v11, V12 const &v12, V13 const &v13, V14 const &v14, V15 const &v15, V16 const &v16, V17 const &v17, V18 const &v18, V19 const &v19, V20 const &v20, V21 const &v21, V22 const &v22, V23 const &v23, V24 const &v24, V25 const &v25, V26 const &v26, V27 const &v27, V28 const &v28, V29 const &v29, V30 const &v30, V31 const &v31, V32 const &v32, V33 const &v33, V34 const &v34, V35 const &v35, V36 const &v36, V37 const &v37, V38 const &v38, V39 const &v39, V40 const &v40, V41 const &v41, V42 const &v42, V43 const &v43, V44 const &v44, V45 const &v45, V46 const &v46, V47 const &v47, V48 const &v48, V49 const &v49, V50 const &v50, V51 const &v51, V52 const &v52, V53 const &v53, V54 const &v54, V55 const &v55, V56 const &v56, V57 const &v57, V58 const &v58, V59 const &v59, V60 const &v60, V61 const &v61, V62 const &v62, V63 const &v63, V64 const &v64, V65 const &v65, V66 const &v66, V67 const &v67, V68 const &v68, V69 const &v69, V70 const &v70, V71 const &v71, V72 const &v72, V73 const &v73, V74 const &v74, V75 const &v75, V76 const &v76, V77 const &v77, V78 const &v78) {
    assert( _colNames.Length() == 78 );
    assert( _colTypes[0] == DbTypeIDs<V1>::ID() );
    assert( _colTypes[1] == DbTypeIDs<V2>::ID() );
    assert( _colTypes[2] == DbTypeIDs<V3>::ID() );
    assert( _colTypes[3] == DbTypeIDs<V4>::ID() );
    assert( _colTypes[4] == DbTypeIDs<V5>::ID() );
    assert( _colTypes[5] == DbTypeIDs<V6>::ID() );
    assert( _colTypes[6] == DbTypeIDs<V7>::ID() );
    assert( _colTypes[7] == DbTypeIDs<V8>::ID() );
    assert( _colTypes[8] == DbTypeIDs<V9>::ID() );
    assert( _colTypes[9] == DbTypeIDs<V10>::ID() );
    assert( _colTypes[10] == DbTypeIDs<V11>::ID() );
    assert( _colTypes[11] == DbTypeIDs<V12>::ID() );
    assert( _colTypes[12] == DbTypeIDs<V13>::ID() );
    assert( _colTypes[13] == DbTypeIDs<V14>::ID() );
    assert( _colTypes[14] == DbTypeIDs<V15>::ID() );
    assert( _colTypes[15] == DbTypeIDs<V16>::ID() );
    assert( _colTypes[16] == DbTypeIDs<V17>::ID() );
    assert( _colTypes[17] == DbTypeIDs<V18>::ID() );
    assert( _colTypes[18] == DbTypeIDs<V19>::ID() );
    assert( _colTypes[19] == DbTypeIDs<V20>::ID() );
    assert( _colTypes[20] == DbTypeIDs<V21>::ID() );
    assert( _colTypes[21] == DbTypeIDs<V22>::ID() );
    assert( _colTypes[22] == DbTypeIDs<V23>::ID() );
    assert( _colTypes[23] == DbTypeIDs<V24>::ID() );
    assert( _colTypes[24] == DbTypeIDs<V25>::ID() );
    assert( _colTypes[25] == DbTypeIDs<V26>::ID() );
    assert( _colTypes[26] == DbTypeIDs<V27>::ID() );
    assert( _colTypes[27] == DbTypeIDs<V28>::ID() );
    assert( _colTypes[28] == DbTypeIDs<V29>::ID() );
    assert( _colTypes[29] == DbTypeIDs<V30>::ID() );
    assert( _colTypes[30] == DbTypeIDs<V31>::ID() );
    assert( _colTypes[31] == DbTypeIDs<V32>::ID() );
    assert( _colTypes[32] == DbTypeIDs<V33>::ID() );
    assert( _colTypes[33] == DbTypeIDs<V34>::ID() );
    assert( _colTypes[34] == DbTypeIDs<V35>::ID() );
    assert( _colTypes[35] == DbTypeIDs<V36>::ID() );
    assert( _colTypes[36] == DbTypeIDs<V37>::ID() );
    assert( _colTypes[37] == DbTypeIDs<V38>::ID() );
    assert( _colTypes[38] == DbTypeIDs<V39>::ID() );
    assert( _colTypes[39] == DbTypeIDs<V40>::ID() );
    assert( _colTypes[40] == DbTypeIDs<V41>::ID() );
    assert( _colTypes[41] == DbTypeIDs<V42>::ID() );
    assert( _colTypes[42] == DbTypeIDs<V43>::ID() );
    assert( _colTypes[43] == DbTypeIDs<V44>::ID() );
    assert( _colTypes[44] == DbTypeIDs<V45>::ID() );
    assert( _colTypes[45] == DbTypeIDs<V46>::ID() );
    assert( _colTypes[46] == DbTypeIDs<V47>::ID() );
    assert( _colTypes[47] == DbTypeIDs<V48>::ID() );
    assert( _colTypes[48] == DbTypeIDs<V49>::ID() );
    assert( _colTypes[49] == DbTypeIDs<V50>::ID() );
    assert( _colTypes[50] == DbTypeIDs<V51>::ID() );
    assert( _colTypes[51] == DbTypeIDs<V52>::ID() );
    assert( _colTypes[52] == DbTypeIDs<V53>::ID() );
    assert( _colTypes[53] == DbTypeIDs<V54>::ID() );
    assert( _colTypes[54] == DbTypeIDs<V55>::ID() );
    assert( _colTypes[55] == DbTypeIDs<V56>::ID() );
    assert( _colTypes[56] == DbTypeIDs<V57>::ID() );
    assert( _colTypes[57] == DbTypeIDs<V58>::ID() );
    assert( _colTypes[58] == DbTypeIDs<V59>::ID() );
    assert( _colTypes[59] == DbTypeIDs<V60>::ID() );
    assert( _colTypes[60] == DbTypeIDs<V61>::ID() );
    assert( _colTypes[61] == DbTypeIDs<V62>::ID() );
    assert( _colTypes[62] == DbTypeIDs<V63>::ID() );
    assert( _colTypes[63] == DbTypeIDs<V64>::ID() );
    assert( _colTypes[64] == DbTypeIDs<V65>::ID() );
    assert( _colTypes[65] == DbTypeIDs<V66>::ID() );
    assert( _colTypes[66] == DbTypeIDs<V67>::ID() );
    assert( _colTypes[67] == DbTypeIDs<V68>::ID() );
    assert( _colTypes[68] == DbTypeIDs<V69>::ID() );
    assert( _colTypes[69] == DbTypeIDs<V70>::ID() );
    assert( _colTypes[70] == DbTypeIDs<V71>::ID() );
    assert( _colTypes[71] == DbTypeIDs<V72>::ID() );
    assert( _colTypes[72] == DbTypeIDs<V73>::ID() );
    assert( _colTypes[73] == DbTypeIDs<V74>::ID() );
    assert( _colTypes[74] == DbTypeIDs<V75>::ID() );
    assert( _colTypes[75] == DbTypeIDs<V76>::ID() );
    assert( _colTypes[76] == DbTypeIDs<V77>::ID() );
    assert( _colTypes[77] == DbTypeIDs<V78>::ID() );
    ((List<V1>*)_colDatas[0])->Add(v1);
    ((List<V2>*)_colDatas[1])->Add(v2);
    ((List<V3>*)_colDatas[2])->Add(v3);
    ((List<V4>*)_colDatas[3])->Add(v4);
    ((List<V5>*)_colDatas[4])->Add(v5);
    ((List<V6>*)_colDatas[5])->Add(v6);
    ((List<V7>*)_colDatas[6])->Add(v7);
    ((List<V8>*)_colDatas[7])->Add(v8);
    ((List<V9>*)_colDatas[8])->Add(v9);
    ((List<V10>*)_colDatas[9])->Add(v10);
    ((List<V11>*)_colDatas[10])->Add(v11);
    ((List<V12>*)_colDatas[11])->Add(v12);
    ((List<V13>*)_colDatas[12])->Add(v13);
    ((List<V14>*)_colDatas[13])->Add(v14);
    ((List<V15>*)_colDatas[14])->Add(v15);
    ((List<V16>*)_colDatas[15])->Add(v16);
    ((List<V17>*)_colDatas[16])->Add(v17);
    ((List<V18>*)_colDatas[17])->Add(v18);
    ((List<V19>*)_colDatas[18])->Add(v19);
    ((List<V20>*)_colDatas[19])->Add(v20);
    ((List<V21>*)_colDatas[20])->Add(v21);
    ((List<V22>*)_colDatas[21])->Add(v22);
    ((List<V23>*)_colDatas[22])->Add(v23);
    ((List<V24>*)_colDatas[23])->Add(v24);
    ((List<V25>*)_colDatas[24])->Add(v25);
    ((List<V26>*)_colDatas[25])->Add(v26);
    ((List<V27>*)_colDatas[26])->Add(v27);
    ((List<V28>*)_colDatas[27])->Add(v28);
    ((List<V29>*)_colDatas[28])->Add(v29);
    ((List<V30>*)_colDatas[29])->Add(v30);
    ((List<V31>*)_colDatas[30])->Add(v31);
    ((List<V32>*)_colDatas[31])->Add(v32);
    ((List<V33>*)_colDatas[32])->Add(v33);
    ((List<V34>*)_colDatas[33])->Add(v34);
    ((List<V35>*)_colDatas[34])->Add(v35);
    ((List<V36>*)_colDatas[35])->Add(v36);
    ((List<V37>*)_colDatas[36])->Add(v37);
    ((List<V38>*)_colDatas[37])->Add(v38);
    ((List<V39>*)_colDatas[38])->Add(v39);
    ((List<V40>*)_colDatas[39])->Add(v40);
    ((List<V41>*)_colDatas[40])->Add(v41);
    ((List<V42>*)_colDatas[41])->Add(v42);
    ((List<V43>*)_colDatas[42])->Add(v43);
    ((List<V44>*)_colDatas[43])->Add(v44);
    ((List<V45>*)_colDatas[44])->Add(v45);
    ((List<V46>*)_colDatas[45])->Add(v46);
    ((List<V47>*)_colDatas[46])->Add(v47);
    ((List<V48>*)_colDatas[47])->Add(v48);
    ((List<V49>*)_colDatas[48])->Add(v49);
    ((List<V50>*)_colDatas[49])->Add(v50);
    ((List<V51>*)_colDatas[50])->Add(v51);
    ((List<V52>*)_colDatas[51])->Add(v52);
    ((List<V53>*)_colDatas[52])->Add(v53);
    ((List<V54>*)_colDatas[53])->Add(v54);
    ((List<V55>*)_colDatas[54])->Add(v55);
    ((List<V56>*)_colDatas[55])->Add(v56);
    ((List<V57>*)_colDatas[56])->Add(v57);
    ((List<V58>*)_colDatas[57])->Add(v58);
    ((List<V59>*)_colDatas[58])->Add(v59);
    ((List<V60>*)_colDatas[59])->Add(v60);
    ((List<V61>*)_colDatas[60])->Add(v61);
    ((List<V62>*)_colDatas[61])->Add(v62);
    ((List<V63>*)_colDatas[62])->Add(v63);
    ((List<V64>*)_colDatas[63])->Add(v64);
    ((List<V65>*)_colDatas[64])->Add(v65);
    ((List<V66>*)_colDatas[65])->Add(v66);
    ((List<V67>*)_colDatas[66])->Add(v67);
    ((List<V68>*)_colDatas[67])->Add(v68);
    ((List<V69>*)_colDatas[68])->Add(v69);
    ((List<V70>*)_colDatas[69])->Add(v70);
    ((List<V71>*)_colDatas[70])->Add(v71);
    ((List<V72>*)_colDatas[71])->Add(v72);
    ((List<V73>*)_colDatas[72])->Add(v73);
    ((List<V74>*)_colDatas[73])->Add(v74);
    ((List<V75>*)_colDatas[74])->Add(v75);
    ((List<V76>*)_colDatas[75])->Add(v76);
    ((List<V77>*)_colDatas[76])->Add(v77);
    ((List<V78>*)_colDatas[77])->Add(v78);
    ++_rowCount;
    return *this;
}
template<typename V1, typename V2, typename V3, typename V4, typename V5, typename V6, typename V7, typename V8, typename V9, typename V10, typename V11, typename V12, typename V13, typename V14, typename V15, typename V16, typename V17, typename V18, typename V19, typename V20, typename V21, typename V22, typename V23, typename V24, typename V25, typename V26, typename V27, typename V28, typename V29, typename V30, typename V31, typename V32, typename V33, typename V34, typename V35, typename V36, typename V37, typename V38, typename V39, typename V40, typename V41, typename V42, typename V43, typename V44, typename V45, typename V46, typename V47, typename V48, typename V49, typename V50, typename V51, typename V52, typename V53, typename V54, typename V55, typename V56, typename V57, typename V58, typename V59, typename V60, typename V61, typename V62, typename V63, typename V64, typename V65, typename V66, typename V67, typename V68, typename V69, typename V70, typename V71, typename V72, typename V73, typename V74, typename V75, typename V76, typename V77, typename V78, typename V79>
DbTable & DbTable::AddRow(V1 const &v1, V2 const &v2, V3 const &v3, V4 const &v4, V5 const &v5, V6 const &v6, V7 const &v7, V8 const &v8, V9 const &v9, V10 const &v10, V11 const &v11, V12 const &v12, V13 const &v13, V14 const &v14, V15 const &v15, V16 const &v16, V17 const &v17, V18 const &v18, V19 const &v19, V20 const &v20, V21 const &v21, V22 const &v22, V23 const &v23, V24 const &v24, V25 const &v25, V26 const &v26, V27 const &v27, V28 const &v28, V29 const &v29, V30 const &v30, V31 const &v31, V32 const &v32, V33 const &v33, V34 const &v34, V35 const &v35, V36 const &v36, V37 const &v37, V38 const &v38, V39 const &v39, V40 const &v40, V41 const &v41, V42 const &v42, V43 const &v43, V44 const &v44, V45 const &v45, V46 const &v46, V47 const &v47, V48 const &v48, V49 const &v49, V50 const &v50, V51 const &v51, V52 const &v52, V53 const &v53, V54 const &v54, V55 const &v55, V56 const &v56, V57 const &v57, V58 const &v58, V59 const &v59, V60 const &v60, V61 const &v61, V62 const &v62, V63 const &v63, V64 const &v64, V65 const &v65, V66 const &v66, V67 const &v67, V68 const &v68, V69 const &v69, V70 const &v70, V71 const &v71, V72 const &v72, V73 const &v73, V74 const &v74, V75 const &v75, V76 const &v76, V77 const &v77, V78 const &v78, V79 const &v79) {
    assert( _colNames.Length() == 79 );
    assert( _colTypes[0] == DbTypeIDs<V1>::ID() );
    assert( _colTypes[1] == DbTypeIDs<V2>::ID() );
    assert( _colTypes[2] == DbTypeIDs<V3>::ID() );
    assert( _colTypes[3] == DbTypeIDs<V4>::ID() );
    assert( _colTypes[4] == DbTypeIDs<V5>::ID() );
    assert( _colTypes[5] == DbTypeIDs<V6>::ID() );
    assert( _colTypes[6] == DbTypeIDs<V7>::ID() );
    assert( _colTypes[7] == DbTypeIDs<V8>::ID() );
    assert( _colTypes[8] == DbTypeIDs<V9>::ID() );
    assert( _colTypes[9] == DbTypeIDs<V10>::ID() );
    assert( _colTypes[10] == DbTypeIDs<V11>::ID() );
    assert( _colTypes[11] == DbTypeIDs<V12>::ID() );
    assert( _colTypes[12] == DbTypeIDs<V13>::ID() );
    assert( _colTypes[13] == DbTypeIDs<V14>::ID() );
    assert( _colTypes[14] == DbTypeIDs<V15>::ID() );
    assert( _colTypes[15] == DbTypeIDs<V16>::ID() );
    assert( _colTypes[16] == DbTypeIDs<V17>::ID() );
    assert( _colTypes[17] == DbTypeIDs<V18>::ID() );
    assert( _colTypes[18] == DbTypeIDs<V19>::ID() );
    assert( _colTypes[19] == DbTypeIDs<V20>::ID() );
    assert( _colTypes[20] == DbTypeIDs<V21>::ID() );
    assert( _colTypes[21] == DbTypeIDs<V22>::ID() );
    assert( _colTypes[22] == DbTypeIDs<V23>::ID() );
    assert( _colTypes[23] == DbTypeIDs<V24>::ID() );
    assert( _colTypes[24] == DbTypeIDs<V25>::ID() );
    assert( _colTypes[25] == DbTypeIDs<V26>::ID() );
    assert( _colTypes[26] == DbTypeIDs<V27>::ID() );
    assert( _colTypes[27] == DbTypeIDs<V28>::ID() );
    assert( _colTypes[28] == DbTypeIDs<V29>::ID() );
    assert( _colTypes[29] == DbTypeIDs<V30>::ID() );
    assert( _colTypes[30] == DbTypeIDs<V31>::ID() );
    assert( _colTypes[31] == DbTypeIDs<V32>::ID() );
    assert( _colTypes[32] == DbTypeIDs<V33>::ID() );
    assert( _colTypes[33] == DbTypeIDs<V34>::ID() );
    assert( _colTypes[34] == DbTypeIDs<V35>::ID() );
    assert( _colTypes[35] == DbTypeIDs<V36>::ID() );
    assert( _colTypes[36] == DbTypeIDs<V37>::ID() );
    assert( _colTypes[37] == DbTypeIDs<V38>::ID() );
    assert( _colTypes[38] == DbTypeIDs<V39>::ID() );
    assert( _colTypes[39] == DbTypeIDs<V40>::ID() );
    assert( _colTypes[40] == DbTypeIDs<V41>::ID() );
    assert( _colTypes[41] == DbTypeIDs<V42>::ID() );
    assert( _colTypes[42] == DbTypeIDs<V43>::ID() );
    assert( _colTypes[43] == DbTypeIDs<V44>::ID() );
    assert( _colTypes[44] == DbTypeIDs<V45>::ID() );
    assert( _colTypes[45] == DbTypeIDs<V46>::ID() );
    assert( _colTypes[46] == DbTypeIDs<V47>::ID() );
    assert( _colTypes[47] == DbTypeIDs<V48>::ID() );
    assert( _colTypes[48] == DbTypeIDs<V49>::ID() );
    assert( _colTypes[49] == DbTypeIDs<V50>::ID() );
    assert( _colTypes[50] == DbTypeIDs<V51>::ID() );
    assert( _colTypes[51] == DbTypeIDs<V52>::ID() );
    assert( _colTypes[52] == DbTypeIDs<V53>::ID() );
    assert( _colTypes[53] == DbTypeIDs<V54>::ID() );
    assert( _colTypes[54] == DbTypeIDs<V55>::ID() );
    assert( _colTypes[55] == DbTypeIDs<V56>::ID() );
    assert( _colTypes[56] == DbTypeIDs<V57>::ID() );
    assert( _colTypes[57] == DbTypeIDs<V58>::ID() );
    assert( _colTypes[58] == DbTypeIDs<V59>::ID() );
    assert( _colTypes[59] == DbTypeIDs<V60>::ID() );
    assert( _colTypes[60] == DbTypeIDs<V61>::ID() );
    assert( _colTypes[61] == DbTypeIDs<V62>::ID() );
    assert( _colTypes[62] == DbTypeIDs<V63>::ID() );
    assert( _colTypes[63] == DbTypeIDs<V64>::ID() );
    assert( _colTypes[64] == DbTypeIDs<V65>::ID() );
    assert( _colTypes[65] == DbTypeIDs<V66>::ID() );
    assert( _colTypes[66] == DbTypeIDs<V67>::ID() );
    assert( _colTypes[67] == DbTypeIDs<V68>::ID() );
    assert( _colTypes[68] == DbTypeIDs<V69>::ID() );
    assert( _colTypes[69] == DbTypeIDs<V70>::ID() );
    assert( _colTypes[70] == DbTypeIDs<V71>::ID() );
    assert( _colTypes[71] == DbTypeIDs<V72>::ID() );
    assert( _colTypes[72] == DbTypeIDs<V73>::ID() );
    assert( _colTypes[73] == DbTypeIDs<V74>::ID() );
    assert( _colTypes[74] == DbTypeIDs<V75>::ID() );
    assert( _colTypes[75] == DbTypeIDs<V76>::ID() );
    assert( _colTypes[76] == DbTypeIDs<V77>::ID() );
    assert( _colTypes[77] == DbTypeIDs<V78>::ID() );
    assert( _colTypes[78] == DbTypeIDs<V79>::ID() );
    ((List<V1>*)_colDatas[0])->Add(v1);
    ((List<V2>*)_colDatas[1])->Add(v2);
    ((List<V3>*)_colDatas[2])->Add(v3);
    ((List<V4>*)_colDatas[3])->Add(v4);
    ((List<V5>*)_colDatas[4])->Add(v5);
    ((List<V6>*)_colDatas[5])->Add(v6);
    ((List<V7>*)_colDatas[6])->Add(v7);
    ((List<V8>*)_colDatas[7])->Add(v8);
    ((List<V9>*)_colDatas[8])->Add(v9);
    ((List<V10>*)_colDatas[9])->Add(v10);
    ((List<V11>*)_colDatas[10])->Add(v11);
    ((List<V12>*)_colDatas[11])->Add(v12);
    ((List<V13>*)_colDatas[12])->Add(v13);
    ((List<V14>*)_colDatas[13])->Add(v14);
    ((List<V15>*)_colDatas[14])->Add(v15);
    ((List<V16>*)_colDatas[15])->Add(v16);
    ((List<V17>*)_colDatas[16])->Add(v17);
    ((List<V18>*)_colDatas[17])->Add(v18);
    ((List<V19>*)_colDatas[18])->Add(v19);
    ((List<V20>*)_colDatas[19])->Add(v20);
    ((List<V21>*)_colDatas[20])->Add(v21);
    ((List<V22>*)_colDatas[21])->Add(v22);
    ((List<V23>*)_colDatas[22])->Add(v23);
    ((List<V24>*)_colDatas[23])->Add(v24);
    ((List<V25>*)_colDatas[24])->Add(v25);
    ((List<V26>*)_colDatas[25])->Add(v26);
    ((List<V27>*)_colDatas[26])->Add(v27);
    ((List<V28>*)_colDatas[27])->Add(v28);
    ((List<V29>*)_colDatas[28])->Add(v29);
    ((List<V30>*)_colDatas[29])->Add(v30);
    ((List<V31>*)_colDatas[30])->Add(v31);
    ((List<V32>*)_colDatas[31])->Add(v32);
    ((List<V33>*)_colDatas[32])->Add(v33);
    ((List<V34>*)_colDatas[33])->Add(v34);
    ((List<V35>*)_colDatas[34])->Add(v35);
    ((List<V36>*)_colDatas[35])->Add(v36);
    ((List<V37>*)_colDatas[36])->Add(v37);
    ((List<V38>*)_colDatas[37])->Add(v38);
    ((List<V39>*)_colDatas[38])->Add(v39);
    ((List<V40>*)_colDatas[39])->Add(v40);
    ((List<V41>*)_colDatas[40])->Add(v41);
    ((List<V42>*)_colDatas[41])->Add(v42);
    ((List<V43>*)_colDatas[42])->Add(v43);
    ((List<V44>*)_colDatas[43])->Add(v44);
    ((List<V45>*)_colDatas[44])->Add(v45);
    ((List<V46>*)_colDatas[45])->Add(v46);
    ((List<V47>*)_colDatas[46])->Add(v47);
    ((List<V48>*)_colDatas[47])->Add(v48);
    ((List<V49>*)_colDatas[48])->Add(v49);
    ((List<V50>*)_colDatas[49])->Add(v50);
    ((List<V51>*)_colDatas[50])->Add(v51);
    ((List<V52>*)_colDatas[51])->Add(v52);
    ((List<V53>*)_colDatas[52])->Add(v53);
    ((List<V54>*)_colDatas[53])->Add(v54);
    ((List<V55>*)_colDatas[54])->Add(v55);
    ((List<V56>*)_colDatas[55])->Add(v56);
    ((List<V57>*)_colDatas[56])->Add(v57);
    ((List<V58>*)_colDatas[57])->Add(v58);
    ((List<V59>*)_colDatas[58])->Add(v59);
    ((List<V60>*)_colDatas[59])->Add(v60);
    ((List<V61>*)_colDatas[60])->Add(v61);
    ((List<V62>*)_colDatas[61])->Add(v62);
    ((List<V63>*)_colDatas[62])->Add(v63);
    ((List<V64>*)_colDatas[63])->Add(v64);
    ((List<V65>*)_colDatas[64])->Add(v65);
    ((List<V66>*)_colDatas[65])->Add(v66);
    ((List<V67>*)_colDatas[66])->Add(v67);
    ((List<V68>*)_colDatas[67])->Add(v68);
    ((List<V69>*)_colDatas[68])->Add(v69);
    ((List<V70>*)_colDatas[69])->Add(v70);
    ((List<V71>*)_colDatas[70])->Add(v71);
    ((List<V72>*)_colDatas[71])->Add(v72);
    ((List<V73>*)_colDatas[72])->Add(v73);
    ((List<V74>*)_colDatas[73])->Add(v74);
    ((List<V75>*)_colDatas[74])->Add(v75);
    ((List<V76>*)_colDatas[75])->Add(v76);
    ((List<V77>*)_colDatas[76])->Add(v77);
    ((List<V78>*)_colDatas[77])->Add(v78);
    ((List<V79>*)_colDatas[78])->Add(v79);
    ++_rowCount;
    return *this;
}
template<typename V1, typename V2, typename V3, typename V4, typename V5, typename V6, typename V7, typename V8, typename V9, typename V10, typename V11, typename V12, typename V13, typename V14, typename V15, typename V16, typename V17, typename V18, typename V19, typename V20, typename V21, typename V22, typename V23, typename V24, typename V25, typename V26, typename V27, typename V28, typename V29, typename V30, typename V31, typename V32, typename V33, typename V34, typename V35, typename V36, typename V37, typename V38, typename V39, typename V40, typename V41, typename V42, typename V43, typename V44, typename V45, typename V46, typename V47, typename V48, typename V49, typename V50, typename V51, typename V52, typename V53, typename V54, typename V55, typename V56, typename V57, typename V58, typename V59, typename V60, typename V61, typename V62, typename V63, typename V64, typename V65, typename V66, typename V67, typename V68, typename V69, typename V70, typename V71, typename V72, typename V73, typename V74, typename V75, typename V76, typename V77, typename V78, typename V79, typename V80>
DbTable & DbTable::AddRow(V1 const &v1, V2 const &v2, V3 const &v3, V4 const &v4, V5 const &v5, V6 const &v6, V7 const &v7, V8 const &v8, V9 const &v9, V10 const &v10, V11 const &v11, V12 const &v12, V13 const &v13, V14 const &v14, V15 const &v15, V16 const &v16, V17 const &v17, V18 const &v18, V19 const &v19, V20 const &v20, V21 const &v21, V22 const &v22, V23 const &v23, V24 const &v24, V25 const &v25, V26 const &v26, V27 const &v27, V28 const &v28, V29 const &v29, V30 const &v30, V31 const &v31, V32 const &v32, V33 const &v33, V34 const &v34, V35 const &v35, V36 const &v36, V37 const &v37, V38 const &v38, V39 const &v39, V40 const &v40, V41 const &v41, V42 const &v42, V43 const &v43, V44 const &v44, V45 const &v45, V46 const &v46, V47 const &v47, V48 const &v48, V49 const &v49, V50 const &v50, V51 const &v51, V52 const &v52, V53 const &v53, V54 const &v54, V55 const &v55, V56 const &v56, V57 const &v57, V58 const &v58, V59 const &v59, V60 const &v60, V61 const &v61, V62 const &v62, V63 const &v63, V64 const &v64, V65 const &v65, V66 const &v66, V67 const &v67, V68 const &v68, V69 const &v69, V70 const &v70, V71 const &v71, V72 const &v72, V73 const &v73, V74 const &v74, V75 const &v75, V76 const &v76, V77 const &v77, V78 const &v78, V79 const &v79, V80 const &v80) {
    assert( _colNames.Length() == 80 );
    assert( _colTypes[0] == DbTypeIDs<V1>::ID() );
    assert( _colTypes[1] == DbTypeIDs<V2>::ID() );
    assert( _colTypes[2] == DbTypeIDs<V3>::ID() );
    assert( _colTypes[3] == DbTypeIDs<V4>::ID() );
    assert( _colTypes[4] == DbTypeIDs<V5>::ID() );
    assert( _colTypes[5] == DbTypeIDs<V6>::ID() );
    assert( _colTypes[6] == DbTypeIDs<V7>::ID() );
    assert( _colTypes[7] == DbTypeIDs<V8>::ID() );
    assert( _colTypes[8] == DbTypeIDs<V9>::ID() );
    assert( _colTypes[9] == DbTypeIDs<V10>::ID() );
    assert( _colTypes[10] == DbTypeIDs<V11>::ID() );
    assert( _colTypes[11] == DbTypeIDs<V12>::ID() );
    assert( _colTypes[12] == DbTypeIDs<V13>::ID() );
    assert( _colTypes[13] == DbTypeIDs<V14>::ID() );
    assert( _colTypes[14] == DbTypeIDs<V15>::ID() );
    assert( _colTypes[15] == DbTypeIDs<V16>::ID() );
    assert( _colTypes[16] == DbTypeIDs<V17>::ID() );
    assert( _colTypes[17] == DbTypeIDs<V18>::ID() );
    assert( _colTypes[18] == DbTypeIDs<V19>::ID() );
    assert( _colTypes[19] == DbTypeIDs<V20>::ID() );
    assert( _colTypes[20] == DbTypeIDs<V21>::ID() );
    assert( _colTypes[21] == DbTypeIDs<V22>::ID() );
    assert( _colTypes[22] == DbTypeIDs<V23>::ID() );
    assert( _colTypes[23] == DbTypeIDs<V24>::ID() );
    assert( _colTypes[24] == DbTypeIDs<V25>::ID() );
    assert( _colTypes[25] == DbTypeIDs<V26>::ID() );
    assert( _colTypes[26] == DbTypeIDs<V27>::ID() );
    assert( _colTypes[27] == DbTypeIDs<V28>::ID() );
    assert( _colTypes[28] == DbTypeIDs<V29>::ID() );
    assert( _colTypes[29] == DbTypeIDs<V30>::ID() );
    assert( _colTypes[30] == DbTypeIDs<V31>::ID() );
    assert( _colTypes[31] == DbTypeIDs<V32>::ID() );
    assert( _colTypes[32] == DbTypeIDs<V33>::ID() );
    assert( _colTypes[33] == DbTypeIDs<V34>::ID() );
    assert( _colTypes[34] == DbTypeIDs<V35>::ID() );
    assert( _colTypes[35] == DbTypeIDs<V36>::ID() );
    assert( _colTypes[36] == DbTypeIDs<V37>::ID() );
    assert( _colTypes[37] == DbTypeIDs<V38>::ID() );
    assert( _colTypes[38] == DbTypeIDs<V39>::ID() );
    assert( _colTypes[39] == DbTypeIDs<V40>::ID() );
    assert( _colTypes[40] == DbTypeIDs<V41>::ID() );
    assert( _colTypes[41] == DbTypeIDs<V42>::ID() );
    assert( _colTypes[42] == DbTypeIDs<V43>::ID() );
    assert( _colTypes[43] == DbTypeIDs<V44>::ID() );
    assert( _colTypes[44] == DbTypeIDs<V45>::ID() );
    assert( _colTypes[45] == DbTypeIDs<V46>::ID() );
    assert( _colTypes[46] == DbTypeIDs<V47>::ID() );
    assert( _colTypes[47] == DbTypeIDs<V48>::ID() );
    assert( _colTypes[48] == DbTypeIDs<V49>::ID() );
    assert( _colTypes[49] == DbTypeIDs<V50>::ID() );
    assert( _colTypes[50] == DbTypeIDs<V51>::ID() );
    assert( _colTypes[51] == DbTypeIDs<V52>::ID() );
    assert( _colTypes[52] == DbTypeIDs<V53>::ID() );
    assert( _colTypes[53] == DbTypeIDs<V54>::ID() );
    assert( _colTypes[54] == DbTypeIDs<V55>::ID() );
    assert( _colTypes[55] == DbTypeIDs<V56>::ID() );
    assert( _colTypes[56] == DbTypeIDs<V57>::ID() );
    assert( _colTypes[57] == DbTypeIDs<V58>::ID() );
    assert( _colTypes[58] == DbTypeIDs<V59>::ID() );
    assert( _colTypes[59] == DbTypeIDs<V60>::ID() );
    assert( _colTypes[60] == DbTypeIDs<V61>::ID() );
    assert( _colTypes[61] == DbTypeIDs<V62>::ID() );
    assert( _colTypes[62] == DbTypeIDs<V63>::ID() );
    assert( _colTypes[63] == DbTypeIDs<V64>::ID() );
    assert( _colTypes[64] == DbTypeIDs<V65>::ID() );
    assert( _colTypes[65] == DbTypeIDs<V66>::ID() );
    assert( _colTypes[66] == DbTypeIDs<V67>::ID() );
    assert( _colTypes[67] == DbTypeIDs<V68>::ID() );
    assert( _colTypes[68] == DbTypeIDs<V69>::ID() );
    assert( _colTypes[69] == DbTypeIDs<V70>::ID() );
    assert( _colTypes[70] == DbTypeIDs<V71>::ID() );
    assert( _colTypes[71] == DbTypeIDs<V72>::ID() );
    assert( _colTypes[72] == DbTypeIDs<V73>::ID() );
    assert( _colTypes[73] == DbTypeIDs<V74>::ID() );
    assert( _colTypes[74] == DbTypeIDs<V75>::ID() );
    assert( _colTypes[75] == DbTypeIDs<V76>::ID() );
    assert( _colTypes[76] == DbTypeIDs<V77>::ID() );
    assert( _colTypes[77] == DbTypeIDs<V78>::ID() );
    assert( _colTypes[78] == DbTypeIDs<V79>::ID() );
    assert( _colTypes[79] == DbTypeIDs<V80>::ID() );
    ((List<V1>*)_colDatas[0])->Add(v1);
    ((List<V2>*)_colDatas[1])->Add(v2);
    ((List<V3>*)_colDatas[2])->Add(v3);
    ((List<V4>*)_colDatas[3])->Add(v4);
    ((List<V5>*)_colDatas[4])->Add(v5);
    ((List<V6>*)_colDatas[5])->Add(v6);
    ((List<V7>*)_colDatas[6])->Add(v7);
    ((List<V8>*)_colDatas[7])->Add(v8);
    ((List<V9>*)_colDatas[8])->Add(v9);
    ((List<V10>*)_colDatas[9])->Add(v10);
    ((List<V11>*)_colDatas[10])->Add(v11);
    ((List<V12>*)_colDatas[11])->Add(v12);
    ((List<V13>*)_colDatas[12])->Add(v13);
    ((List<V14>*)_colDatas[13])->Add(v14);
    ((List<V15>*)_colDatas[14])->Add(v15);
    ((List<V16>*)_colDatas[15])->Add(v16);
    ((List<V17>*)_colDatas[16])->Add(v17);
    ((List<V18>*)_colDatas[17])->Add(v18);
    ((List<V19>*)_colDatas[18])->Add(v19);
    ((List<V20>*)_colDatas[19])->Add(v20);
    ((List<V21>*)_colDatas[20])->Add(v21);
    ((List<V22>*)_colDatas[21])->Add(v22);
    ((List<V23>*)_colDatas[22])->Add(v23);
    ((List<V24>*)_colDatas[23])->Add(v24);
    ((List<V25>*)_colDatas[24])->Add(v25);
    ((List<V26>*)_colDatas[25])->Add(v26);
    ((List<V27>*)_colDatas[26])->Add(v27);
    ((List<V28>*)_colDatas[27])->Add(v28);
    ((List<V29>*)_colDatas[28])->Add(v29);
    ((List<V30>*)_colDatas[29])->Add(v30);
    ((List<V31>*)_colDatas[30])->Add(v31);
    ((List<V32>*)_colDatas[31])->Add(v32);
    ((List<V33>*)_colDatas[32])->Add(v33);
    ((List<V34>*)_colDatas[33])->Add(v34);
    ((List<V35>*)_colDatas[34])->Add(v35);
    ((List<V36>*)_colDatas[35])->Add(v36);
    ((List<V37>*)_colDatas[36])->Add(v37);
    ((List<V38>*)_colDatas[37])->Add(v38);
    ((List<V39>*)_colDatas[38])->Add(v39);
    ((List<V40>*)_colDatas[39])->Add(v40);
    ((List<V41>*)_colDatas[40])->Add(v41);
    ((List<V42>*)_colDatas[41])->Add(v42);
    ((List<V43>*)_colDatas[42])->Add(v43);
    ((List<V44>*)_colDatas[43])->Add(v44);
    ((List<V45>*)_colDatas[44])->Add(v45);
    ((List<V46>*)_colDatas[45])->Add(v46);
    ((List<V47>*)_colDatas[46])->Add(v47);
    ((List<V48>*)_colDatas[47])->Add(v48);
    ((List<V49>*)_colDatas[48])->Add(v49);
    ((List<V50>*)_colDatas[49])->Add(v50);
    ((List<V51>*)_colDatas[50])->Add(v51);
    ((List<V52>*)_colDatas[51])->Add(v52);
    ((List<V53>*)_colDatas[52])->Add(v53);
    ((List<V54>*)_colDatas[53])->Add(v54);
    ((List<V55>*)_colDatas[54])->Add(v55);
    ((List<V56>*)_colDatas[55])->Add(v56);
    ((List<V57>*)_colDatas[56])->Add(v57);
    ((List<V58>*)_colDatas[57])->Add(v58);
    ((List<V59>*)_colDatas[58])->Add(v59);
    ((List<V60>*)_colDatas[59])->Add(v60);
    ((List<V61>*)_colDatas[60])->Add(v61);
    ((List<V62>*)_colDatas[61])->Add(v62);
    ((List<V63>*)_colDatas[62])->Add(v63);
    ((List<V64>*)_colDatas[63])->Add(v64);
    ((List<V65>*)_colDatas[64])->Add(v65);
    ((List<V66>*)_colDatas[65])->Add(v66);
    ((List<V67>*)_colDatas[66])->Add(v67);
    ((List<V68>*)_colDatas[67])->Add(v68);
    ((List<V69>*)_colDatas[68])->Add(v69);
    ((List<V70>*)_colDatas[69])->Add(v70);
    ((List<V71>*)_colDatas[70])->Add(v71);
    ((List<V72>*)_colDatas[71])->Add(v72);
    ((List<V73>*)_colDatas[72])->Add(v73);
    ((List<V74>*)_colDatas[73])->Add(v74);
    ((List<V75>*)_colDatas[74])->Add(v75);
    ((List<V76>*)_colDatas[75])->Add(v76);
    ((List<V77>*)_colDatas[76])->Add(v77);
    ((List<V78>*)_colDatas[77])->Add(v78);
    ((List<V79>*)_colDatas[78])->Add(v79);
    ((List<V80>*)_colDatas[79])->Add(v80);
    ++_rowCount;
    return *this;
}
template<typename V1, typename V2, typename V3, typename V4, typename V5, typename V6, typename V7, typename V8, typename V9, typename V10, typename V11, typename V12, typename V13, typename V14, typename V15, typename V16, typename V17, typename V18, typename V19, typename V20, typename V21, typename V22, typename V23, typename V24, typename V25, typename V26, typename V27, typename V28, typename V29, typename V30, typename V31, typename V32, typename V33, typename V34, typename V35, typename V36, typename V37, typename V38, typename V39, typename V40, typename V41, typename V42, typename V43, typename V44, typename V45, typename V46, typename V47, typename V48, typename V49, typename V50, typename V51, typename V52, typename V53, typename V54, typename V55, typename V56, typename V57, typename V58, typename V59, typename V60, typename V61, typename V62, typename V63, typename V64, typename V65, typename V66, typename V67, typename V68, typename V69, typename V70, typename V71, typename V72, typename V73, typename V74, typename V75, typename V76, typename V77, typename V78, typename V79, typename V80, typename V81>
DbTable & DbTable::AddRow(V1 const &v1, V2 const &v2, V3 const &v3, V4 const &v4, V5 const &v5, V6 const &v6, V7 const &v7, V8 const &v8, V9 const &v9, V10 const &v10, V11 const &v11, V12 const &v12, V13 const &v13, V14 const &v14, V15 const &v15, V16 const &v16, V17 const &v17, V18 const &v18, V19 const &v19, V20 const &v20, V21 const &v21, V22 const &v22, V23 const &v23, V24 const &v24, V25 const &v25, V26 const &v26, V27 const &v27, V28 const &v28, V29 const &v29, V30 const &v30, V31 const &v31, V32 const &v32, V33 const &v33, V34 const &v34, V35 const &v35, V36 const &v36, V37 const &v37, V38 const &v38, V39 const &v39, V40 const &v40, V41 const &v41, V42 const &v42, V43 const &v43, V44 const &v44, V45 const &v45, V46 const &v46, V47 const &v47, V48 const &v48, V49 const &v49, V50 const &v50, V51 const &v51, V52 const &v52, V53 const &v53, V54 const &v54, V55 const &v55, V56 const &v56, V57 const &v57, V58 const &v58, V59 const &v59, V60 const &v60, V61 const &v61, V62 const &v62, V63 const &v63, V64 const &v64, V65 const &v65, V66 const &v66, V67 const &v67, V68 const &v68, V69 const &v69, V70 const &v70, V71 const &v71, V72 const &v72, V73 const &v73, V74 const &v74, V75 const &v75, V76 const &v76, V77 const &v77, V78 const &v78, V79 const &v79, V80 const &v80, V81 const &v81) {
    assert( _colNames.Length() == 81 );
    assert( _colTypes[0] == DbTypeIDs<V1>::ID() );
    assert( _colTypes[1] == DbTypeIDs<V2>::ID() );
    assert( _colTypes[2] == DbTypeIDs<V3>::ID() );
    assert( _colTypes[3] == DbTypeIDs<V4>::ID() );
    assert( _colTypes[4] == DbTypeIDs<V5>::ID() );
    assert( _colTypes[5] == DbTypeIDs<V6>::ID() );
    assert( _colTypes[6] == DbTypeIDs<V7>::ID() );
    assert( _colTypes[7] == DbTypeIDs<V8>::ID() );
    assert( _colTypes[8] == DbTypeIDs<V9>::ID() );
    assert( _colTypes[9] == DbTypeIDs<V10>::ID() );
    assert( _colTypes[10] == DbTypeIDs<V11>::ID() );
    assert( _colTypes[11] == DbTypeIDs<V12>::ID() );
    assert( _colTypes[12] == DbTypeIDs<V13>::ID() );
    assert( _colTypes[13] == DbTypeIDs<V14>::ID() );
    assert( _colTypes[14] == DbTypeIDs<V15>::ID() );
    assert( _colTypes[15] == DbTypeIDs<V16>::ID() );
    assert( _colTypes[16] == DbTypeIDs<V17>::ID() );
    assert( _colTypes[17] == DbTypeIDs<V18>::ID() );
    assert( _colTypes[18] == DbTypeIDs<V19>::ID() );
    assert( _colTypes[19] == DbTypeIDs<V20>::ID() );
    assert( _colTypes[20] == DbTypeIDs<V21>::ID() );
    assert( _colTypes[21] == DbTypeIDs<V22>::ID() );
    assert( _colTypes[22] == DbTypeIDs<V23>::ID() );
    assert( _colTypes[23] == DbTypeIDs<V24>::ID() );
    assert( _colTypes[24] == DbTypeIDs<V25>::ID() );
    assert( _colTypes[25] == DbTypeIDs<V26>::ID() );
    assert( _colTypes[26] == DbTypeIDs<V27>::ID() );
    assert( _colTypes[27] == DbTypeIDs<V28>::ID() );
    assert( _colTypes[28] == DbTypeIDs<V29>::ID() );
    assert( _colTypes[29] == DbTypeIDs<V30>::ID() );
    assert( _colTypes[30] == DbTypeIDs<V31>::ID() );
    assert( _colTypes[31] == DbTypeIDs<V32>::ID() );
    assert( _colTypes[32] == DbTypeIDs<V33>::ID() );
    assert( _colTypes[33] == DbTypeIDs<V34>::ID() );
    assert( _colTypes[34] == DbTypeIDs<V35>::ID() );
    assert( _colTypes[35] == DbTypeIDs<V36>::ID() );
    assert( _colTypes[36] == DbTypeIDs<V37>::ID() );
    assert( _colTypes[37] == DbTypeIDs<V38>::ID() );
    assert( _colTypes[38] == DbTypeIDs<V39>::ID() );
    assert( _colTypes[39] == DbTypeIDs<V40>::ID() );
    assert( _colTypes[40] == DbTypeIDs<V41>::ID() );
    assert( _colTypes[41] == DbTypeIDs<V42>::ID() );
    assert( _colTypes[42] == DbTypeIDs<V43>::ID() );
    assert( _colTypes[43] == DbTypeIDs<V44>::ID() );
    assert( _colTypes[44] == DbTypeIDs<V45>::ID() );
    assert( _colTypes[45] == DbTypeIDs<V46>::ID() );
    assert( _colTypes[46] == DbTypeIDs<V47>::ID() );
    assert( _colTypes[47] == DbTypeIDs<V48>::ID() );
    assert( _colTypes[48] == DbTypeIDs<V49>::ID() );
    assert( _colTypes[49] == DbTypeIDs<V50>::ID() );
    assert( _colTypes[50] == DbTypeIDs<V51>::ID() );
    assert( _colTypes[51] == DbTypeIDs<V52>::ID() );
    assert( _colTypes[52] == DbTypeIDs<V53>::ID() );
    assert( _colTypes[53] == DbTypeIDs<V54>::ID() );
    assert( _colTypes[54] == DbTypeIDs<V55>::ID() );
    assert( _colTypes[55] == DbTypeIDs<V56>::ID() );
    assert( _colTypes[56] == DbTypeIDs<V57>::ID() );
    assert( _colTypes[57] == DbTypeIDs<V58>::ID() );
    assert( _colTypes[58] == DbTypeIDs<V59>::ID() );
    assert( _colTypes[59] == DbTypeIDs<V60>::ID() );
    assert( _colTypes[60] == DbTypeIDs<V61>::ID() );
    assert( _colTypes[61] == DbTypeIDs<V62>::ID() );
    assert( _colTypes[62] == DbTypeIDs<V63>::ID() );
    assert( _colTypes[63] == DbTypeIDs<V64>::ID() );
    assert( _colTypes[64] == DbTypeIDs<V65>::ID() );
    assert( _colTypes[65] == DbTypeIDs<V66>::ID() );
    assert( _colTypes[66] == DbTypeIDs<V67>::ID() );
    assert( _colTypes[67] == DbTypeIDs<V68>::ID() );
    assert( _colTypes[68] == DbTypeIDs<V69>::ID() );
    assert( _colTypes[69] == DbTypeIDs<V70>::ID() );
    assert( _colTypes[70] == DbTypeIDs<V71>::ID() );
    assert( _colTypes[71] == DbTypeIDs<V72>::ID() );
    assert( _colTypes[72] == DbTypeIDs<V73>::ID() );
    assert( _colTypes[73] == DbTypeIDs<V74>::ID() );
    assert( _colTypes[74] == DbTypeIDs<V75>::ID() );
    assert( _colTypes[75] == DbTypeIDs<V76>::ID() );
    assert( _colTypes[76] == DbTypeIDs<V77>::ID() );
    assert( _colTypes[77] == DbTypeIDs<V78>::ID() );
    assert( _colTypes[78] == DbTypeIDs<V79>::ID() );
    assert( _colTypes[79] == DbTypeIDs<V80>::ID() );
    assert( _colTypes[80] == DbTypeIDs<V81>::ID() );
    ((List<V1>*)_colDatas[0])->Add(v1);
    ((List<V2>*)_colDatas[1])->Add(v2);
    ((List<V3>*)_colDatas[2])->Add(v3);
    ((List<V4>*)_colDatas[3])->Add(v4);
    ((List<V5>*)_colDatas[4])->Add(v5);
    ((List<V6>*)_colDatas[5])->Add(v6);
    ((List<V7>*)_colDatas[6])->Add(v7);
    ((List<V8>*)_colDatas[7])->Add(v8);
    ((List<V9>*)_colDatas[8])->Add(v9);
    ((List<V10>*)_colDatas[9])->Add(v10);
    ((List<V11>*)_colDatas[10])->Add(v11);
    ((List<V12>*)_colDatas[11])->Add(v12);
    ((List<V13>*)_colDatas[12])->Add(v13);
    ((List<V14>*)_colDatas[13])->Add(v14);
    ((List<V15>*)_colDatas[14])->Add(v15);
    ((List<V16>*)_colDatas[15])->Add(v16);
    ((List<V17>*)_colDatas[16])->Add(v17);
    ((List<V18>*)_colDatas[17])->Add(v18);
    ((List<V19>*)_colDatas[18])->Add(v19);
    ((List<V20>*)_colDatas[19])->Add(v20);
    ((List<V21>*)_colDatas[20])->Add(v21);
    ((List<V22>*)_colDatas[21])->Add(v22);
    ((List<V23>*)_colDatas[22])->Add(v23);
    ((List<V24>*)_colDatas[23])->Add(v24);
    ((List<V25>*)_colDatas[24])->Add(v25);
    ((List<V26>*)_colDatas[25])->Add(v26);
    ((List<V27>*)_colDatas[26])->Add(v27);
    ((List<V28>*)_colDatas[27])->Add(v28);
    ((List<V29>*)_colDatas[28])->Add(v29);
    ((List<V30>*)_colDatas[29])->Add(v30);
    ((List<V31>*)_colDatas[30])->Add(v31);
    ((List<V32>*)_colDatas[31])->Add(v32);
    ((List<V33>*)_colDatas[32])->Add(v33);
    ((List<V34>*)_colDatas[33])->Add(v34);
    ((List<V35>*)_colDatas[34])->Add(v35);
    ((List<V36>*)_colDatas[35])->Add(v36);
    ((List<V37>*)_colDatas[36])->Add(v37);
    ((List<V38>*)_colDatas[37])->Add(v38);
    ((List<V39>*)_colDatas[38])->Add(v39);
    ((List<V40>*)_colDatas[39])->Add(v40);
    ((List<V41>*)_colDatas[40])->Add(v41);
    ((List<V42>*)_colDatas[41])->Add(v42);
    ((List<V43>*)_colDatas[42])->Add(v43);
    ((List<V44>*)_colDatas[43])->Add(v44);
    ((List<V45>*)_colDatas[44])->Add(v45);
    ((List<V46>*)_colDatas[45])->Add(v46);
    ((List<V47>*)_colDatas[46])->Add(v47);
    ((List<V48>*)_colDatas[47])->Add(v48);
    ((List<V49>*)_colDatas[48])->Add(v49);
    ((List<V50>*)_colDatas[49])->Add(v50);
    ((List<V51>*)_colDatas[50])->Add(v51);
    ((List<V52>*)_colDatas[51])->Add(v52);
    ((List<V53>*)_colDatas[52])->Add(v53);
    ((List<V54>*)_colDatas[53])->Add(v54);
    ((List<V55>*)_colDatas[54])->Add(v55);
    ((List<V56>*)_colDatas[55])->Add(v56);
    ((List<V57>*)_colDatas[56])->Add(v57);
    ((List<V58>*)_colDatas[57])->Add(v58);
    ((List<V59>*)_colDatas[58])->Add(v59);
    ((List<V60>*)_colDatas[59])->Add(v60);
    ((List<V61>*)_colDatas[60])->Add(v61);
    ((List<V62>*)_colDatas[61])->Add(v62);
    ((List<V63>*)_colDatas[62])->Add(v63);
    ((List<V64>*)_colDatas[63])->Add(v64);
    ((List<V65>*)_colDatas[64])->Add(v65);
    ((List<V66>*)_colDatas[65])->Add(v66);
    ((List<V67>*)_colDatas[66])->Add(v67);
    ((List<V68>*)_colDatas[67])->Add(v68);
    ((List<V69>*)_colDatas[68])->Add(v69);
    ((List<V70>*)_colDatas[69])->Add(v70);
    ((List<V71>*)_colDatas[70])->Add(v71);
    ((List<V72>*)_colDatas[71])->Add(v72);
    ((List<V73>*)_colDatas[72])->Add(v73);
    ((List<V74>*)_colDatas[73])->Add(v74);
    ((List<V75>*)_colDatas[74])->Add(v75);
    ((List<V76>*)_colDatas[75])->Add(v76);
    ((List<V77>*)_colDatas[76])->Add(v77);
    ((List<V78>*)_colDatas[77])->Add(v78);
    ((List<V79>*)_colDatas[78])->Add(v79);
    ((List<V80>*)_colDatas[79])->Add(v80);
    ((List<V81>*)_colDatas[80])->Add(v81);
    ++_rowCount;
    return *this;
}
template<typename V1, typename V2, typename V3, typename V4, typename V5, typename V6, typename V7, typename V8, typename V9, typename V10, typename V11, typename V12, typename V13, typename V14, typename V15, typename V16, typename V17, typename V18, typename V19, typename V20, typename V21, typename V22, typename V23, typename V24, typename V25, typename V26, typename V27, typename V28, typename V29, typename V30, typename V31, typename V32, typename V33, typename V34, typename V35, typename V36, typename V37, typename V38, typename V39, typename V40, typename V41, typename V42, typename V43, typename V44, typename V45, typename V46, typename V47, typename V48, typename V49, typename V50, typename V51, typename V52, typename V53, typename V54, typename V55, typename V56, typename V57, typename V58, typename V59, typename V60, typename V61, typename V62, typename V63, typename V64, typename V65, typename V66, typename V67, typename V68, typename V69, typename V70, typename V71, typename V72, typename V73, typename V74, typename V75, typename V76, typename V77, typename V78, typename V79, typename V80, typename V81, typename V82>
DbTable & DbTable::AddRow(V1 const &v1, V2 const &v2, V3 const &v3, V4 const &v4, V5 const &v5, V6 const &v6, V7 const &v7, V8 const &v8, V9 const &v9, V10 const &v10, V11 const &v11, V12 const &v12, V13 const &v13, V14 const &v14, V15 const &v15, V16 const &v16, V17 const &v17, V18 const &v18, V19 const &v19, V20 const &v20, V21 const &v21, V22 const &v22, V23 const &v23, V24 const &v24, V25 const &v25, V26 const &v26, V27 const &v27, V28 const &v28, V29 const &v29, V30 const &v30, V31 const &v31, V32 const &v32, V33 const &v33, V34 const &v34, V35 const &v35, V36 const &v36, V37 const &v37, V38 const &v38, V39 const &v39, V40 const &v40, V41 const &v41, V42 const &v42, V43 const &v43, V44 const &v44, V45 const &v45, V46 const &v46, V47 const &v47, V48 const &v48, V49 const &v49, V50 const &v50, V51 const &v51, V52 const &v52, V53 const &v53, V54 const &v54, V55 const &v55, V56 const &v56, V57 const &v57, V58 const &v58, V59 const &v59, V60 const &v60, V61 const &v61, V62 const &v62, V63 const &v63, V64 const &v64, V65 const &v65, V66 const &v66, V67 const &v67, V68 const &v68, V69 const &v69, V70 const &v70, V71 const &v71, V72 const &v72, V73 const &v73, V74 const &v74, V75 const &v75, V76 const &v76, V77 const &v77, V78 const &v78, V79 const &v79, V80 const &v80, V81 const &v81, V82 const &v82) {
    assert( _colNames.Length() == 82 );
    assert( _colTypes[0] == DbTypeIDs<V1>::ID() );
    assert( _colTypes[1] == DbTypeIDs<V2>::ID() );
    assert( _colTypes[2] == DbTypeIDs<V3>::ID() );
    assert( _colTypes[3] == DbTypeIDs<V4>::ID() );
    assert( _colTypes[4] == DbTypeIDs<V5>::ID() );
    assert( _colTypes[5] == DbTypeIDs<V6>::ID() );
    assert( _colTypes[6] == DbTypeIDs<V7>::ID() );
    assert( _colTypes[7] == DbTypeIDs<V8>::ID() );
    assert( _colTypes[8] == DbTypeIDs<V9>::ID() );
    assert( _colTypes[9] == DbTypeIDs<V10>::ID() );
    assert( _colTypes[10] == DbTypeIDs<V11>::ID() );
    assert( _colTypes[11] == DbTypeIDs<V12>::ID() );
    assert( _colTypes[12] == DbTypeIDs<V13>::ID() );
    assert( _colTypes[13] == DbTypeIDs<V14>::ID() );
    assert( _colTypes[14] == DbTypeIDs<V15>::ID() );
    assert( _colTypes[15] == DbTypeIDs<V16>::ID() );
    assert( _colTypes[16] == DbTypeIDs<V17>::ID() );
    assert( _colTypes[17] == DbTypeIDs<V18>::ID() );
    assert( _colTypes[18] == DbTypeIDs<V19>::ID() );
    assert( _colTypes[19] == DbTypeIDs<V20>::ID() );
    assert( _colTypes[20] == DbTypeIDs<V21>::ID() );
    assert( _colTypes[21] == DbTypeIDs<V22>::ID() );
    assert( _colTypes[22] == DbTypeIDs<V23>::ID() );
    assert( _colTypes[23] == DbTypeIDs<V24>::ID() );
    assert( _colTypes[24] == DbTypeIDs<V25>::ID() );
    assert( _colTypes[25] == DbTypeIDs<V26>::ID() );
    assert( _colTypes[26] == DbTypeIDs<V27>::ID() );
    assert( _colTypes[27] == DbTypeIDs<V28>::ID() );
    assert( _colTypes[28] == DbTypeIDs<V29>::ID() );
    assert( _colTypes[29] == DbTypeIDs<V30>::ID() );
    assert( _colTypes[30] == DbTypeIDs<V31>::ID() );
    assert( _colTypes[31] == DbTypeIDs<V32>::ID() );
    assert( _colTypes[32] == DbTypeIDs<V33>::ID() );
    assert( _colTypes[33] == DbTypeIDs<V34>::ID() );
    assert( _colTypes[34] == DbTypeIDs<V35>::ID() );
    assert( _colTypes[35] == DbTypeIDs<V36>::ID() );
    assert( _colTypes[36] == DbTypeIDs<V37>::ID() );
    assert( _colTypes[37] == DbTypeIDs<V38>::ID() );
    assert( _colTypes[38] == DbTypeIDs<V39>::ID() );
    assert( _colTypes[39] == DbTypeIDs<V40>::ID() );
    assert( _colTypes[40] == DbTypeIDs<V41>::ID() );
    assert( _colTypes[41] == DbTypeIDs<V42>::ID() );
    assert( _colTypes[42] == DbTypeIDs<V43>::ID() );
    assert( _colTypes[43] == DbTypeIDs<V44>::ID() );
    assert( _colTypes[44] == DbTypeIDs<V45>::ID() );
    assert( _colTypes[45] == DbTypeIDs<V46>::ID() );
    assert( _colTypes[46] == DbTypeIDs<V47>::ID() );
    assert( _colTypes[47] == DbTypeIDs<V48>::ID() );
    assert( _colTypes[48] == DbTypeIDs<V49>::ID() );
    assert( _colTypes[49] == DbTypeIDs<V50>::ID() );
    assert( _colTypes[50] == DbTypeIDs<V51>::ID() );
    assert( _colTypes[51] == DbTypeIDs<V52>::ID() );
    assert( _colTypes[52] == DbTypeIDs<V53>::ID() );
    assert( _colTypes[53] == DbTypeIDs<V54>::ID() );
    assert( _colTypes[54] == DbTypeIDs<V55>::ID() );
    assert( _colTypes[55] == DbTypeIDs<V56>::ID() );
    assert( _colTypes[56] == DbTypeIDs<V57>::ID() );
    assert( _colTypes[57] == DbTypeIDs<V58>::ID() );
    assert( _colTypes[58] == DbTypeIDs<V59>::ID() );
    assert( _colTypes[59] == DbTypeIDs<V60>::ID() );
    assert( _colTypes[60] == DbTypeIDs<V61>::ID() );
    assert( _colTypes[61] == DbTypeIDs<V62>::ID() );
    assert( _colTypes[62] == DbTypeIDs<V63>::ID() );
    assert( _colTypes[63] == DbTypeIDs<V64>::ID() );
    assert( _colTypes[64] == DbTypeIDs<V65>::ID() );
    assert( _colTypes[65] == DbTypeIDs<V66>::ID() );
    assert( _colTypes[66] == DbTypeIDs<V67>::ID() );
    assert( _colTypes[67] == DbTypeIDs<V68>::ID() );
    assert( _colTypes[68] == DbTypeIDs<V69>::ID() );
    assert( _colTypes[69] == DbTypeIDs<V70>::ID() );
    assert( _colTypes[70] == DbTypeIDs<V71>::ID() );
    assert( _colTypes[71] == DbTypeIDs<V72>::ID() );
    assert( _colTypes[72] == DbTypeIDs<V73>::ID() );
    assert( _colTypes[73] == DbTypeIDs<V74>::ID() );
    assert( _colTypes[74] == DbTypeIDs<V75>::ID() );
    assert( _colTypes[75] == DbTypeIDs<V76>::ID() );
    assert( _colTypes[76] == DbTypeIDs<V77>::ID() );
    assert( _colTypes[77] == DbTypeIDs<V78>::ID() );
    assert( _colTypes[78] == DbTypeIDs<V79>::ID() );
    assert( _colTypes[79] == DbTypeIDs<V80>::ID() );
    assert( _colTypes[80] == DbTypeIDs<V81>::ID() );
    assert( _colTypes[81] == DbTypeIDs<V82>::ID() );
    ((List<V1>*)_colDatas[0])->Add(v1);
    ((List<V2>*)_colDatas[1])->Add(v2);
    ((List<V3>*)_colDatas[2])->Add(v3);
    ((List<V4>*)_colDatas[3])->Add(v4);
    ((List<V5>*)_colDatas[4])->Add(v5);
    ((List<V6>*)_colDatas[5])->Add(v6);
    ((List<V7>*)_colDatas[6])->Add(v7);
    ((List<V8>*)_colDatas[7])->Add(v8);
    ((List<V9>*)_colDatas[8])->Add(v9);
    ((List<V10>*)_colDatas[9])->Add(v10);
    ((List<V11>*)_colDatas[10])->Add(v11);
    ((List<V12>*)_colDatas[11])->Add(v12);
    ((List<V13>*)_colDatas[12])->Add(v13);
    ((List<V14>*)_colDatas[13])->Add(v14);
    ((List<V15>*)_colDatas[14])->Add(v15);
    ((List<V16>*)_colDatas[15])->Add(v16);
    ((List<V17>*)_colDatas[16])->Add(v17);
    ((List<V18>*)_colDatas[17])->Add(v18);
    ((List<V19>*)_colDatas[18])->Add(v19);
    ((List<V20>*)_colDatas[19])->Add(v20);
    ((List<V21>*)_colDatas[20])->Add(v21);
    ((List<V22>*)_colDatas[21])->Add(v22);
    ((List<V23>*)_colDatas[22])->Add(v23);
    ((List<V24>*)_colDatas[23])->Add(v24);
    ((List<V25>*)_colDatas[24])->Add(v25);
    ((List<V26>*)_colDatas[25])->Add(v26);
    ((List<V27>*)_colDatas[26])->Add(v27);
    ((List<V28>*)_colDatas[27])->Add(v28);
    ((List<V29>*)_colDatas[28])->Add(v29);
    ((List<V30>*)_colDatas[29])->Add(v30);
    ((List<V31>*)_colDatas[30])->Add(v31);
    ((List<V32>*)_colDatas[31])->Add(v32);
    ((List<V33>*)_colDatas[32])->Add(v33);
    ((List<V34>*)_colDatas[33])->Add(v34);
    ((List<V35>*)_colDatas[34])->Add(v35);
    ((List<V36>*)_colDatas[35])->Add(v36);
    ((List<V37>*)_colDatas[36])->Add(v37);
    ((List<V38>*)_colDatas[37])->Add(v38);
    ((List<V39>*)_colDatas[38])->Add(v39);
    ((List<V40>*)_colDatas[39])->Add(v40);
    ((List<V41>*)_colDatas[40])->Add(v41);
    ((List<V42>*)_colDatas[41])->Add(v42);
    ((List<V43>*)_colDatas[42])->Add(v43);
    ((List<V44>*)_colDatas[43])->Add(v44);
    ((List<V45>*)_colDatas[44])->Add(v45);
    ((List<V46>*)_colDatas[45])->Add(v46);
    ((List<V47>*)_colDatas[46])->Add(v47);
    ((List<V48>*)_colDatas[47])->Add(v48);
    ((List<V49>*)_colDatas[48])->Add(v49);
    ((List<V50>*)_colDatas[49])->Add(v50);
    ((List<V51>*)_colDatas[50])->Add(v51);
    ((List<V52>*)_colDatas[51])->Add(v52);
    ((List<V53>*)_colDatas[52])->Add(v53);
    ((List<V54>*)_colDatas[53])->Add(v54);
    ((List<V55>*)_colDatas[54])->Add(v55);
    ((List<V56>*)_colDatas[55])->Add(v56);
    ((List<V57>*)_colDatas[56])->Add(v57);
    ((List<V58>*)_colDatas[57])->Add(v58);
    ((List<V59>*)_colDatas[58])->Add(v59);
    ((List<V60>*)_colDatas[59])->Add(v60);
    ((List<V61>*)_colDatas[60])->Add(v61);
    ((List<V62>*)_colDatas[61])->Add(v62);
    ((List<V63>*)_colDatas[62])->Add(v63);
    ((List<V64>*)_colDatas[63])->Add(v64);
    ((List<V65>*)_colDatas[64])->Add(v65);
    ((List<V66>*)_colDatas[65])->Add(v66);
    ((List<V67>*)_colDatas[66])->Add(v67);
    ((List<V68>*)_colDatas[67])->Add(v68);
    ((List<V69>*)_colDatas[68])->Add(v69);
    ((List<V70>*)_colDatas[69])->Add(v70);
    ((List<V71>*)_colDatas[70])->Add(v71);
    ((List<V72>*)_colDatas[71])->Add(v72);
    ((List<V73>*)_colDatas[72])->Add(v73);
    ((List<V74>*)_colDatas[73])->Add(v74);
    ((List<V75>*)_colDatas[74])->Add(v75);
    ((List<V76>*)_colDatas[75])->Add(v76);
    ((List<V77>*)_colDatas[76])->Add(v77);
    ((List<V78>*)_colDatas[77])->Add(v78);
    ((List<V79>*)_colDatas[78])->Add(v79);
    ((List<V80>*)_colDatas[79])->Add(v80);
    ((List<V81>*)_colDatas[80])->Add(v81);
    ((List<V82>*)_colDatas[81])->Add(v82);
    ++_rowCount;
    return *this;
}
template<typename V1, typename V2, typename V3, typename V4, typename V5, typename V6, typename V7, typename V8, typename V9, typename V10, typename V11, typename V12, typename V13, typename V14, typename V15, typename V16, typename V17, typename V18, typename V19, typename V20, typename V21, typename V22, typename V23, typename V24, typename V25, typename V26, typename V27, typename V28, typename V29, typename V30, typename V31, typename V32, typename V33, typename V34, typename V35, typename V36, typename V37, typename V38, typename V39, typename V40, typename V41, typename V42, typename V43, typename V44, typename V45, typename V46, typename V47, typename V48, typename V49, typename V50, typename V51, typename V52, typename V53, typename V54, typename V55, typename V56, typename V57, typename V58, typename V59, typename V60, typename V61, typename V62, typename V63, typename V64, typename V65, typename V66, typename V67, typename V68, typename V69, typename V70, typename V71, typename V72, typename V73, typename V74, typename V75, typename V76, typename V77, typename V78, typename V79, typename V80, typename V81, typename V82, typename V83>
DbTable & DbTable::AddRow(V1 const &v1, V2 const &v2, V3 const &v3, V4 const &v4, V5 const &v5, V6 const &v6, V7 const &v7, V8 const &v8, V9 const &v9, V10 const &v10, V11 const &v11, V12 const &v12, V13 const &v13, V14 const &v14, V15 const &v15, V16 const &v16, V17 const &v17, V18 const &v18, V19 const &v19, V20 const &v20, V21 const &v21, V22 const &v22, V23 const &v23, V24 const &v24, V25 const &v25, V26 const &v26, V27 const &v27, V28 const &v28, V29 const &v29, V30 const &v30, V31 const &v31, V32 const &v32, V33 const &v33, V34 const &v34, V35 const &v35, V36 const &v36, V37 const &v37, V38 const &v38, V39 const &v39, V40 const &v40, V41 const &v41, V42 const &v42, V43 const &v43, V44 const &v44, V45 const &v45, V46 const &v46, V47 const &v47, V48 const &v48, V49 const &v49, V50 const &v50, V51 const &v51, V52 const &v52, V53 const &v53, V54 const &v54, V55 const &v55, V56 const &v56, V57 const &v57, V58 const &v58, V59 const &v59, V60 const &v60, V61 const &v61, V62 const &v62, V63 const &v63, V64 const &v64, V65 const &v65, V66 const &v66, V67 const &v67, V68 const &v68, V69 const &v69, V70 const &v70, V71 const &v71, V72 const &v72, V73 const &v73, V74 const &v74, V75 const &v75, V76 const &v76, V77 const &v77, V78 const &v78, V79 const &v79, V80 const &v80, V81 const &v81, V82 const &v82, V83 const &v83) {
    assert( _colNames.Length() == 83 );
    assert( _colTypes[0] == DbTypeIDs<V1>::ID() );
    assert( _colTypes[1] == DbTypeIDs<V2>::ID() );
    assert( _colTypes[2] == DbTypeIDs<V3>::ID() );
    assert( _colTypes[3] == DbTypeIDs<V4>::ID() );
    assert( _colTypes[4] == DbTypeIDs<V5>::ID() );
    assert( _colTypes[5] == DbTypeIDs<V6>::ID() );
    assert( _colTypes[6] == DbTypeIDs<V7>::ID() );
    assert( _colTypes[7] == DbTypeIDs<V8>::ID() );
    assert( _colTypes[8] == DbTypeIDs<V9>::ID() );
    assert( _colTypes[9] == DbTypeIDs<V10>::ID() );
    assert( _colTypes[10] == DbTypeIDs<V11>::ID() );
    assert( _colTypes[11] == DbTypeIDs<V12>::ID() );
    assert( _colTypes[12] == DbTypeIDs<V13>::ID() );
    assert( _colTypes[13] == DbTypeIDs<V14>::ID() );
    assert( _colTypes[14] == DbTypeIDs<V15>::ID() );
    assert( _colTypes[15] == DbTypeIDs<V16>::ID() );
    assert( _colTypes[16] == DbTypeIDs<V17>::ID() );
    assert( _colTypes[17] == DbTypeIDs<V18>::ID() );
    assert( _colTypes[18] == DbTypeIDs<V19>::ID() );
    assert( _colTypes[19] == DbTypeIDs<V20>::ID() );
    assert( _colTypes[20] == DbTypeIDs<V21>::ID() );
    assert( _colTypes[21] == DbTypeIDs<V22>::ID() );
    assert( _colTypes[22] == DbTypeIDs<V23>::ID() );
    assert( _colTypes[23] == DbTypeIDs<V24>::ID() );
    assert( _colTypes[24] == DbTypeIDs<V25>::ID() );
    assert( _colTypes[25] == DbTypeIDs<V26>::ID() );
    assert( _colTypes[26] == DbTypeIDs<V27>::ID() );
    assert( _colTypes[27] == DbTypeIDs<V28>::ID() );
    assert( _colTypes[28] == DbTypeIDs<V29>::ID() );
    assert( _colTypes[29] == DbTypeIDs<V30>::ID() );
    assert( _colTypes[30] == DbTypeIDs<V31>::ID() );
    assert( _colTypes[31] == DbTypeIDs<V32>::ID() );
    assert( _colTypes[32] == DbTypeIDs<V33>::ID() );
    assert( _colTypes[33] == DbTypeIDs<V34>::ID() );
    assert( _colTypes[34] == DbTypeIDs<V35>::ID() );
    assert( _colTypes[35] == DbTypeIDs<V36>::ID() );
    assert( _colTypes[36] == DbTypeIDs<V37>::ID() );
    assert( _colTypes[37] == DbTypeIDs<V38>::ID() );
    assert( _colTypes[38] == DbTypeIDs<V39>::ID() );
    assert( _colTypes[39] == DbTypeIDs<V40>::ID() );
    assert( _colTypes[40] == DbTypeIDs<V41>::ID() );
    assert( _colTypes[41] == DbTypeIDs<V42>::ID() );
    assert( _colTypes[42] == DbTypeIDs<V43>::ID() );
    assert( _colTypes[43] == DbTypeIDs<V44>::ID() );
    assert( _colTypes[44] == DbTypeIDs<V45>::ID() );
    assert( _colTypes[45] == DbTypeIDs<V46>::ID() );
    assert( _colTypes[46] == DbTypeIDs<V47>::ID() );
    assert( _colTypes[47] == DbTypeIDs<V48>::ID() );
    assert( _colTypes[48] == DbTypeIDs<V49>::ID() );
    assert( _colTypes[49] == DbTypeIDs<V50>::ID() );
    assert( _colTypes[50] == DbTypeIDs<V51>::ID() );
    assert( _colTypes[51] == DbTypeIDs<V52>::ID() );
    assert( _colTypes[52] == DbTypeIDs<V53>::ID() );
    assert( _colTypes[53] == DbTypeIDs<V54>::ID() );
    assert( _colTypes[54] == DbTypeIDs<V55>::ID() );
    assert( _colTypes[55] == DbTypeIDs<V56>::ID() );
    assert( _colTypes[56] == DbTypeIDs<V57>::ID() );
    assert( _colTypes[57] == DbTypeIDs<V58>::ID() );
    assert( _colTypes[58] == DbTypeIDs<V59>::ID() );
    assert( _colTypes[59] == DbTypeIDs<V60>::ID() );
    assert( _colTypes[60] == DbTypeIDs<V61>::ID() );
    assert( _colTypes[61] == DbTypeIDs<V62>::ID() );
    assert( _colTypes[62] == DbTypeIDs<V63>::ID() );
    assert( _colTypes[63] == DbTypeIDs<V64>::ID() );
    assert( _colTypes[64] == DbTypeIDs<V65>::ID() );
    assert( _colTypes[65] == DbTypeIDs<V66>::ID() );
    assert( _colTypes[66] == DbTypeIDs<V67>::ID() );
    assert( _colTypes[67] == DbTypeIDs<V68>::ID() );
    assert( _colTypes[68] == DbTypeIDs<V69>::ID() );
    assert( _colTypes[69] == DbTypeIDs<V70>::ID() );
    assert( _colTypes[70] == DbTypeIDs<V71>::ID() );
    assert( _colTypes[71] == DbTypeIDs<V72>::ID() );
    assert( _colTypes[72] == DbTypeIDs<V73>::ID() );
    assert( _colTypes[73] == DbTypeIDs<V74>::ID() );
    assert( _colTypes[74] == DbTypeIDs<V75>::ID() );
    assert( _colTypes[75] == DbTypeIDs<V76>::ID() );
    assert( _colTypes[76] == DbTypeIDs<V77>::ID() );
    assert( _colTypes[77] == DbTypeIDs<V78>::ID() );
    assert( _colTypes[78] == DbTypeIDs<V79>::ID() );
    assert( _colTypes[79] == DbTypeIDs<V80>::ID() );
    assert( _colTypes[80] == DbTypeIDs<V81>::ID() );
    assert( _colTypes[81] == DbTypeIDs<V82>::ID() );
    assert( _colTypes[82] == DbTypeIDs<V83>::ID() );
    ((List<V1>*)_colDatas[0])->Add(v1);
    ((List<V2>*)_colDatas[1])->Add(v2);
    ((List<V3>*)_colDatas[2])->Add(v3);
    ((List<V4>*)_colDatas[3])->Add(v4);
    ((List<V5>*)_colDatas[4])->Add(v5);
    ((List<V6>*)_colDatas[5])->Add(v6);
    ((List<V7>*)_colDatas[6])->Add(v7);
    ((List<V8>*)_colDatas[7])->Add(v8);
    ((List<V9>*)_colDatas[8])->Add(v9);
    ((List<V10>*)_colDatas[9])->Add(v10);
    ((List<V11>*)_colDatas[10])->Add(v11);
    ((List<V12>*)_colDatas[11])->Add(v12);
    ((List<V13>*)_colDatas[12])->Add(v13);
    ((List<V14>*)_colDatas[13])->Add(v14);
    ((List<V15>*)_colDatas[14])->Add(v15);
    ((List<V16>*)_colDatas[15])->Add(v16);
    ((List<V17>*)_colDatas[16])->Add(v17);
    ((List<V18>*)_colDatas[17])->Add(v18);
    ((List<V19>*)_colDatas[18])->Add(v19);
    ((List<V20>*)_colDatas[19])->Add(v20);
    ((List<V21>*)_colDatas[20])->Add(v21);
    ((List<V22>*)_colDatas[21])->Add(v22);
    ((List<V23>*)_colDatas[22])->Add(v23);
    ((List<V24>*)_colDatas[23])->Add(v24);
    ((List<V25>*)_colDatas[24])->Add(v25);
    ((List<V26>*)_colDatas[25])->Add(v26);
    ((List<V27>*)_colDatas[26])->Add(v27);
    ((List<V28>*)_colDatas[27])->Add(v28);
    ((List<V29>*)_colDatas[28])->Add(v29);
    ((List<V30>*)_colDatas[29])->Add(v30);
    ((List<V31>*)_colDatas[30])->Add(v31);
    ((List<V32>*)_colDatas[31])->Add(v32);
    ((List<V33>*)_colDatas[32])->Add(v33);
    ((List<V34>*)_colDatas[33])->Add(v34);
    ((List<V35>*)_colDatas[34])->Add(v35);
    ((List<V36>*)_colDatas[35])->Add(v36);
    ((List<V37>*)_colDatas[36])->Add(v37);
    ((List<V38>*)_colDatas[37])->Add(v38);
    ((List<V39>*)_colDatas[38])->Add(v39);
    ((List<V40>*)_colDatas[39])->Add(v40);
    ((List<V41>*)_colDatas[40])->Add(v41);
    ((List<V42>*)_colDatas[41])->Add(v42);
    ((List<V43>*)_colDatas[42])->Add(v43);
    ((List<V44>*)_colDatas[43])->Add(v44);
    ((List<V45>*)_colDatas[44])->Add(v45);
    ((List<V46>*)_colDatas[45])->Add(v46);
    ((List<V47>*)_colDatas[46])->Add(v47);
    ((List<V48>*)_colDatas[47])->Add(v48);
    ((List<V49>*)_colDatas[48])->Add(v49);
    ((List<V50>*)_colDatas[49])->Add(v50);
    ((List<V51>*)_colDatas[50])->Add(v51);
    ((List<V52>*)_colDatas[51])->Add(v52);
    ((List<V53>*)_colDatas[52])->Add(v53);
    ((List<V54>*)_colDatas[53])->Add(v54);
    ((List<V55>*)_colDatas[54])->Add(v55);
    ((List<V56>*)_colDatas[55])->Add(v56);
    ((List<V57>*)_colDatas[56])->Add(v57);
    ((List<V58>*)_colDatas[57])->Add(v58);
    ((List<V59>*)_colDatas[58])->Add(v59);
    ((List<V60>*)_colDatas[59])->Add(v60);
    ((List<V61>*)_colDatas[60])->Add(v61);
    ((List<V62>*)_colDatas[61])->Add(v62);
    ((List<V63>*)_colDatas[62])->Add(v63);
    ((List<V64>*)_colDatas[63])->Add(v64);
    ((List<V65>*)_colDatas[64])->Add(v65);
    ((List<V66>*)_colDatas[65])->Add(v66);
    ((List<V67>*)_colDatas[66])->Add(v67);
    ((List<V68>*)_colDatas[67])->Add(v68);
    ((List<V69>*)_colDatas[68])->Add(v69);
    ((List<V70>*)_colDatas[69])->Add(v70);
    ((List<V71>*)_colDatas[70])->Add(v71);
    ((List<V72>*)_colDatas[71])->Add(v72);
    ((List<V73>*)_colDatas[72])->Add(v73);
    ((List<V74>*)_colDatas[73])->Add(v74);
    ((List<V75>*)_colDatas[74])->Add(v75);
    ((List<V76>*)_colDatas[75])->Add(v76);
    ((List<V77>*)_colDatas[76])->Add(v77);
    ((List<V78>*)_colDatas[77])->Add(v78);
    ((List<V79>*)_colDatas[78])->Add(v79);
    ((List<V80>*)_colDatas[79])->Add(v80);
    ((List<V81>*)_colDatas[80])->Add(v81);
    ((List<V82>*)_colDatas[81])->Add(v82);
    ((List<V83>*)_colDatas[82])->Add(v83);
    ++_rowCount;
    return *this;
}
template<typename V1, typename V2, typename V3, typename V4, typename V5, typename V6, typename V7, typename V8, typename V9, typename V10, typename V11, typename V12, typename V13, typename V14, typename V15, typename V16, typename V17, typename V18, typename V19, typename V20, typename V21, typename V22, typename V23, typename V24, typename V25, typename V26, typename V27, typename V28, typename V29, typename V30, typename V31, typename V32, typename V33, typename V34, typename V35, typename V36, typename V37, typename V38, typename V39, typename V40, typename V41, typename V42, typename V43, typename V44, typename V45, typename V46, typename V47, typename V48, typename V49, typename V50, typename V51, typename V52, typename V53, typename V54, typename V55, typename V56, typename V57, typename V58, typename V59, typename V60, typename V61, typename V62, typename V63, typename V64, typename V65, typename V66, typename V67, typename V68, typename V69, typename V70, typename V71, typename V72, typename V73, typename V74, typename V75, typename V76, typename V77, typename V78, typename V79, typename V80, typename V81, typename V82, typename V83, typename V84>
DbTable & DbTable::AddRow(V1 const &v1, V2 const &v2, V3 const &v3, V4 const &v4, V5 const &v5, V6 const &v6, V7 const &v7, V8 const &v8, V9 const &v9, V10 const &v10, V11 const &v11, V12 const &v12, V13 const &v13, V14 const &v14, V15 const &v15, V16 const &v16, V17 const &v17, V18 const &v18, V19 const &v19, V20 const &v20, V21 const &v21, V22 const &v22, V23 const &v23, V24 const &v24, V25 const &v25, V26 const &v26, V27 const &v27, V28 const &v28, V29 const &v29, V30 const &v30, V31 const &v31, V32 const &v32, V33 const &v33, V34 const &v34, V35 const &v35, V36 const &v36, V37 const &v37, V38 const &v38, V39 const &v39, V40 const &v40, V41 const &v41, V42 const &v42, V43 const &v43, V44 const &v44, V45 const &v45, V46 const &v46, V47 const &v47, V48 const &v48, V49 const &v49, V50 const &v50, V51 const &v51, V52 const &v52, V53 const &v53, V54 const &v54, V55 const &v55, V56 const &v56, V57 const &v57, V58 const &v58, V59 const &v59, V60 const &v60, V61 const &v61, V62 const &v62, V63 const &v63, V64 const &v64, V65 const &v65, V66 const &v66, V67 const &v67, V68 const &v68, V69 const &v69, V70 const &v70, V71 const &v71, V72 const &v72, V73 const &v73, V74 const &v74, V75 const &v75, V76 const &v76, V77 const &v77, V78 const &v78, V79 const &v79, V80 const &v80, V81 const &v81, V82 const &v82, V83 const &v83, V84 const &v84) {
    assert( _colNames.Length() == 84 );
    assert( _colTypes[0] == DbTypeIDs<V1>::ID() );
    assert( _colTypes[1] == DbTypeIDs<V2>::ID() );
    assert( _colTypes[2] == DbTypeIDs<V3>::ID() );
    assert( _colTypes[3] == DbTypeIDs<V4>::ID() );
    assert( _colTypes[4] == DbTypeIDs<V5>::ID() );
    assert( _colTypes[5] == DbTypeIDs<V6>::ID() );
    assert( _colTypes[6] == DbTypeIDs<V7>::ID() );
    assert( _colTypes[7] == DbTypeIDs<V8>::ID() );
    assert( _colTypes[8] == DbTypeIDs<V9>::ID() );
    assert( _colTypes[9] == DbTypeIDs<V10>::ID() );
    assert( _colTypes[10] == DbTypeIDs<V11>::ID() );
    assert( _colTypes[11] == DbTypeIDs<V12>::ID() );
    assert( _colTypes[12] == DbTypeIDs<V13>::ID() );
    assert( _colTypes[13] == DbTypeIDs<V14>::ID() );
    assert( _colTypes[14] == DbTypeIDs<V15>::ID() );
    assert( _colTypes[15] == DbTypeIDs<V16>::ID() );
    assert( _colTypes[16] == DbTypeIDs<V17>::ID() );
    assert( _colTypes[17] == DbTypeIDs<V18>::ID() );
    assert( _colTypes[18] == DbTypeIDs<V19>::ID() );
    assert( _colTypes[19] == DbTypeIDs<V20>::ID() );
    assert( _colTypes[20] == DbTypeIDs<V21>::ID() );
    assert( _colTypes[21] == DbTypeIDs<V22>::ID() );
    assert( _colTypes[22] == DbTypeIDs<V23>::ID() );
    assert( _colTypes[23] == DbTypeIDs<V24>::ID() );
    assert( _colTypes[24] == DbTypeIDs<V25>::ID() );
    assert( _colTypes[25] == DbTypeIDs<V26>::ID() );
    assert( _colTypes[26] == DbTypeIDs<V27>::ID() );
    assert( _colTypes[27] == DbTypeIDs<V28>::ID() );
    assert( _colTypes[28] == DbTypeIDs<V29>::ID() );
    assert( _colTypes[29] == DbTypeIDs<V30>::ID() );
    assert( _colTypes[30] == DbTypeIDs<V31>::ID() );
    assert( _colTypes[31] == DbTypeIDs<V32>::ID() );
    assert( _colTypes[32] == DbTypeIDs<V33>::ID() );
    assert( _colTypes[33] == DbTypeIDs<V34>::ID() );
    assert( _colTypes[34] == DbTypeIDs<V35>::ID() );
    assert( _colTypes[35] == DbTypeIDs<V36>::ID() );
    assert( _colTypes[36] == DbTypeIDs<V37>::ID() );
    assert( _colTypes[37] == DbTypeIDs<V38>::ID() );
    assert( _colTypes[38] == DbTypeIDs<V39>::ID() );
    assert( _colTypes[39] == DbTypeIDs<V40>::ID() );
    assert( _colTypes[40] == DbTypeIDs<V41>::ID() );
    assert( _colTypes[41] == DbTypeIDs<V42>::ID() );
    assert( _colTypes[42] == DbTypeIDs<V43>::ID() );
    assert( _colTypes[43] == DbTypeIDs<V44>::ID() );
    assert( _colTypes[44] == DbTypeIDs<V45>::ID() );
    assert( _colTypes[45] == DbTypeIDs<V46>::ID() );
    assert( _colTypes[46] == DbTypeIDs<V47>::ID() );
    assert( _colTypes[47] == DbTypeIDs<V48>::ID() );
    assert( _colTypes[48] == DbTypeIDs<V49>::ID() );
    assert( _colTypes[49] == DbTypeIDs<V50>::ID() );
    assert( _colTypes[50] == DbTypeIDs<V51>::ID() );
    assert( _colTypes[51] == DbTypeIDs<V52>::ID() );
    assert( _colTypes[52] == DbTypeIDs<V53>::ID() );
    assert( _colTypes[53] == DbTypeIDs<V54>::ID() );
    assert( _colTypes[54] == DbTypeIDs<V55>::ID() );
    assert( _colTypes[55] == DbTypeIDs<V56>::ID() );
    assert( _colTypes[56] == DbTypeIDs<V57>::ID() );
    assert( _colTypes[57] == DbTypeIDs<V58>::ID() );
    assert( _colTypes[58] == DbTypeIDs<V59>::ID() );
    assert( _colTypes[59] == DbTypeIDs<V60>::ID() );
    assert( _colTypes[60] == DbTypeIDs<V61>::ID() );
    assert( _colTypes[61] == DbTypeIDs<V62>::ID() );
    assert( _colTypes[62] == DbTypeIDs<V63>::ID() );
    assert( _colTypes[63] == DbTypeIDs<V64>::ID() );
    assert( _colTypes[64] == DbTypeIDs<V65>::ID() );
    assert( _colTypes[65] == DbTypeIDs<V66>::ID() );
    assert( _colTypes[66] == DbTypeIDs<V67>::ID() );
    assert( _colTypes[67] == DbTypeIDs<V68>::ID() );
    assert( _colTypes[68] == DbTypeIDs<V69>::ID() );
    assert( _colTypes[69] == DbTypeIDs<V70>::ID() );
    assert( _colTypes[70] == DbTypeIDs<V71>::ID() );
    assert( _colTypes[71] == DbTypeIDs<V72>::ID() );
    assert( _colTypes[72] == DbTypeIDs<V73>::ID() );
    assert( _colTypes[73] == DbTypeIDs<V74>::ID() );
    assert( _colTypes[74] == DbTypeIDs<V75>::ID() );
    assert( _colTypes[75] == DbTypeIDs<V76>::ID() );
    assert( _colTypes[76] == DbTypeIDs<V77>::ID() );
    assert( _colTypes[77] == DbTypeIDs<V78>::ID() );
    assert( _colTypes[78] == DbTypeIDs<V79>::ID() );
    assert( _colTypes[79] == DbTypeIDs<V80>::ID() );
    assert( _colTypes[80] == DbTypeIDs<V81>::ID() );
    assert( _colTypes[81] == DbTypeIDs<V82>::ID() );
    assert( _colTypes[82] == DbTypeIDs<V83>::ID() );
    assert( _colTypes[83] == DbTypeIDs<V84>::ID() );
    ((List<V1>*)_colDatas[0])->Add(v1);
    ((List<V2>*)_colDatas[1])->Add(v2);
    ((List<V3>*)_colDatas[2])->Add(v3);
    ((List<V4>*)_colDatas[3])->Add(v4);
    ((List<V5>*)_colDatas[4])->Add(v5);
    ((List<V6>*)_colDatas[5])->Add(v6);
    ((List<V7>*)_colDatas[6])->Add(v7);
    ((List<V8>*)_colDatas[7])->Add(v8);
    ((List<V9>*)_colDatas[8])->Add(v9);
    ((List<V10>*)_colDatas[9])->Add(v10);
    ((List<V11>*)_colDatas[10])->Add(v11);
    ((List<V12>*)_colDatas[11])->Add(v12);
    ((List<V13>*)_colDatas[12])->Add(v13);
    ((List<V14>*)_colDatas[13])->Add(v14);
    ((List<V15>*)_colDatas[14])->Add(v15);
    ((List<V16>*)_colDatas[15])->Add(v16);
    ((List<V17>*)_colDatas[16])->Add(v17);
    ((List<V18>*)_colDatas[17])->Add(v18);
    ((List<V19>*)_colDatas[18])->Add(v19);
    ((List<V20>*)_colDatas[19])->Add(v20);
    ((List<V21>*)_colDatas[20])->Add(v21);
    ((List<V22>*)_colDatas[21])->Add(v22);
    ((List<V23>*)_colDatas[22])->Add(v23);
    ((List<V24>*)_colDatas[23])->Add(v24);
    ((List<V25>*)_colDatas[24])->Add(v25);
    ((List<V26>*)_colDatas[25])->Add(v26);
    ((List<V27>*)_colDatas[26])->Add(v27);
    ((List<V28>*)_colDatas[27])->Add(v28);
    ((List<V29>*)_colDatas[28])->Add(v29);
    ((List<V30>*)_colDatas[29])->Add(v30);
    ((List<V31>*)_colDatas[30])->Add(v31);
    ((List<V32>*)_colDatas[31])->Add(v32);
    ((List<V33>*)_colDatas[32])->Add(v33);
    ((List<V34>*)_colDatas[33])->Add(v34);
    ((List<V35>*)_colDatas[34])->Add(v35);
    ((List<V36>*)_colDatas[35])->Add(v36);
    ((List<V37>*)_colDatas[36])->Add(v37);
    ((List<V38>*)_colDatas[37])->Add(v38);
    ((List<V39>*)_colDatas[38])->Add(v39);
    ((List<V40>*)_colDatas[39])->Add(v40);
    ((List<V41>*)_colDatas[40])->Add(v41);
    ((List<V42>*)_colDatas[41])->Add(v42);
    ((List<V43>*)_colDatas[42])->Add(v43);
    ((List<V44>*)_colDatas[43])->Add(v44);
    ((List<V45>*)_colDatas[44])->Add(v45);
    ((List<V46>*)_colDatas[45])->Add(v46);
    ((List<V47>*)_colDatas[46])->Add(v47);
    ((List<V48>*)_colDatas[47])->Add(v48);
    ((List<V49>*)_colDatas[48])->Add(v49);
    ((List<V50>*)_colDatas[49])->Add(v50);
    ((List<V51>*)_colDatas[50])->Add(v51);
    ((List<V52>*)_colDatas[51])->Add(v52);
    ((List<V53>*)_colDatas[52])->Add(v53);
    ((List<V54>*)_colDatas[53])->Add(v54);
    ((List<V55>*)_colDatas[54])->Add(v55);
    ((List<V56>*)_colDatas[55])->Add(v56);
    ((List<V57>*)_colDatas[56])->Add(v57);
    ((List<V58>*)_colDatas[57])->Add(v58);
    ((List<V59>*)_colDatas[58])->Add(v59);
    ((List<V60>*)_colDatas[59])->Add(v60);
    ((List<V61>*)_colDatas[60])->Add(v61);
    ((List<V62>*)_colDatas[61])->Add(v62);
    ((List<V63>*)_colDatas[62])->Add(v63);
    ((List<V64>*)_colDatas[63])->Add(v64);
    ((List<V65>*)_colDatas[64])->Add(v65);
    ((List<V66>*)_colDatas[65])->Add(v66);
    ((List<V67>*)_colDatas[66])->Add(v67);
    ((List<V68>*)_colDatas[67])->Add(v68);
    ((List<V69>*)_colDatas[68])->Add(v69);
    ((List<V70>*)_colDatas[69])->Add(v70);
    ((List<V71>*)_colDatas[70])->Add(v71);
    ((List<V72>*)_colDatas[71])->Add(v72);
    ((List<V73>*)_colDatas[72])->Add(v73);
    ((List<V74>*)_colDatas[73])->Add(v74);
    ((List<V75>*)_colDatas[74])->Add(v75);
    ((List<V76>*)_colDatas[75])->Add(v76);
    ((List<V77>*)_colDatas[76])->Add(v77);
    ((List<V78>*)_colDatas[77])->Add(v78);
    ((List<V79>*)_colDatas[78])->Add(v79);
    ((List<V80>*)_colDatas[79])->Add(v80);
    ((List<V81>*)_colDatas[80])->Add(v81);
    ((List<V82>*)_colDatas[81])->Add(v82);
    ((List<V83>*)_colDatas[82])->Add(v83);
    ((List<V84>*)_colDatas[83])->Add(v84);
    ++_rowCount;
    return *this;
}
template<typename V1, typename V2, typename V3, typename V4, typename V5, typename V6, typename V7, typename V8, typename V9, typename V10, typename V11, typename V12, typename V13, typename V14, typename V15, typename V16, typename V17, typename V18, typename V19, typename V20, typename V21, typename V22, typename V23, typename V24, typename V25, typename V26, typename V27, typename V28, typename V29, typename V30, typename V31, typename V32, typename V33, typename V34, typename V35, typename V36, typename V37, typename V38, typename V39, typename V40, typename V41, typename V42, typename V43, typename V44, typename V45, typename V46, typename V47, typename V48, typename V49, typename V50, typename V51, typename V52, typename V53, typename V54, typename V55, typename V56, typename V57, typename V58, typename V59, typename V60, typename V61, typename V62, typename V63, typename V64, typename V65, typename V66, typename V67, typename V68, typename V69, typename V70, typename V71, typename V72, typename V73, typename V74, typename V75, typename V76, typename V77, typename V78, typename V79, typename V80, typename V81, typename V82, typename V83, typename V84, typename V85>
DbTable & DbTable::AddRow(V1 const &v1, V2 const &v2, V3 const &v3, V4 const &v4, V5 const &v5, V6 const &v6, V7 const &v7, V8 const &v8, V9 const &v9, V10 const &v10, V11 const &v11, V12 const &v12, V13 const &v13, V14 const &v14, V15 const &v15, V16 const &v16, V17 const &v17, V18 const &v18, V19 const &v19, V20 const &v20, V21 const &v21, V22 const &v22, V23 const &v23, V24 const &v24, V25 const &v25, V26 const &v26, V27 const &v27, V28 const &v28, V29 const &v29, V30 const &v30, V31 const &v31, V32 const &v32, V33 const &v33, V34 const &v34, V35 const &v35, V36 const &v36, V37 const &v37, V38 const &v38, V39 const &v39, V40 const &v40, V41 const &v41, V42 const &v42, V43 const &v43, V44 const &v44, V45 const &v45, V46 const &v46, V47 const &v47, V48 const &v48, V49 const &v49, V50 const &v50, V51 const &v51, V52 const &v52, V53 const &v53, V54 const &v54, V55 const &v55, V56 const &v56, V57 const &v57, V58 const &v58, V59 const &v59, V60 const &v60, V61 const &v61, V62 const &v62, V63 const &v63, V64 const &v64, V65 const &v65, V66 const &v66, V67 const &v67, V68 const &v68, V69 const &v69, V70 const &v70, V71 const &v71, V72 const &v72, V73 const &v73, V74 const &v74, V75 const &v75, V76 const &v76, V77 const &v77, V78 const &v78, V79 const &v79, V80 const &v80, V81 const &v81, V82 const &v82, V83 const &v83, V84 const &v84, V85 const &v85) {
    assert( _colNames.Length() == 85 );
    assert( _colTypes[0] == DbTypeIDs<V1>::ID() );
    assert( _colTypes[1] == DbTypeIDs<V2>::ID() );
    assert( _colTypes[2] == DbTypeIDs<V3>::ID() );
    assert( _colTypes[3] == DbTypeIDs<V4>::ID() );
    assert( _colTypes[4] == DbTypeIDs<V5>::ID() );
    assert( _colTypes[5] == DbTypeIDs<V6>::ID() );
    assert( _colTypes[6] == DbTypeIDs<V7>::ID() );
    assert( _colTypes[7] == DbTypeIDs<V8>::ID() );
    assert( _colTypes[8] == DbTypeIDs<V9>::ID() );
    assert( _colTypes[9] == DbTypeIDs<V10>::ID() );
    assert( _colTypes[10] == DbTypeIDs<V11>::ID() );
    assert( _colTypes[11] == DbTypeIDs<V12>::ID() );
    assert( _colTypes[12] == DbTypeIDs<V13>::ID() );
    assert( _colTypes[13] == DbTypeIDs<V14>::ID() );
    assert( _colTypes[14] == DbTypeIDs<V15>::ID() );
    assert( _colTypes[15] == DbTypeIDs<V16>::ID() );
    assert( _colTypes[16] == DbTypeIDs<V17>::ID() );
    assert( _colTypes[17] == DbTypeIDs<V18>::ID() );
    assert( _colTypes[18] == DbTypeIDs<V19>::ID() );
    assert( _colTypes[19] == DbTypeIDs<V20>::ID() );
    assert( _colTypes[20] == DbTypeIDs<V21>::ID() );
    assert( _colTypes[21] == DbTypeIDs<V22>::ID() );
    assert( _colTypes[22] == DbTypeIDs<V23>::ID() );
    assert( _colTypes[23] == DbTypeIDs<V24>::ID() );
    assert( _colTypes[24] == DbTypeIDs<V25>::ID() );
    assert( _colTypes[25] == DbTypeIDs<V26>::ID() );
    assert( _colTypes[26] == DbTypeIDs<V27>::ID() );
    assert( _colTypes[27] == DbTypeIDs<V28>::ID() );
    assert( _colTypes[28] == DbTypeIDs<V29>::ID() );
    assert( _colTypes[29] == DbTypeIDs<V30>::ID() );
    assert( _colTypes[30] == DbTypeIDs<V31>::ID() );
    assert( _colTypes[31] == DbTypeIDs<V32>::ID() );
    assert( _colTypes[32] == DbTypeIDs<V33>::ID() );
    assert( _colTypes[33] == DbTypeIDs<V34>::ID() );
    assert( _colTypes[34] == DbTypeIDs<V35>::ID() );
    assert( _colTypes[35] == DbTypeIDs<V36>::ID() );
    assert( _colTypes[36] == DbTypeIDs<V37>::ID() );
    assert( _colTypes[37] == DbTypeIDs<V38>::ID() );
    assert( _colTypes[38] == DbTypeIDs<V39>::ID() );
    assert( _colTypes[39] == DbTypeIDs<V40>::ID() );
    assert( _colTypes[40] == DbTypeIDs<V41>::ID() );
    assert( _colTypes[41] == DbTypeIDs<V42>::ID() );
    assert( _colTypes[42] == DbTypeIDs<V43>::ID() );
    assert( _colTypes[43] == DbTypeIDs<V44>::ID() );
    assert( _colTypes[44] == DbTypeIDs<V45>::ID() );
    assert( _colTypes[45] == DbTypeIDs<V46>::ID() );
    assert( _colTypes[46] == DbTypeIDs<V47>::ID() );
    assert( _colTypes[47] == DbTypeIDs<V48>::ID() );
    assert( _colTypes[48] == DbTypeIDs<V49>::ID() );
    assert( _colTypes[49] == DbTypeIDs<V50>::ID() );
    assert( _colTypes[50] == DbTypeIDs<V51>::ID() );
    assert( _colTypes[51] == DbTypeIDs<V52>::ID() );
    assert( _colTypes[52] == DbTypeIDs<V53>::ID() );
    assert( _colTypes[53] == DbTypeIDs<V54>::ID() );
    assert( _colTypes[54] == DbTypeIDs<V55>::ID() );
    assert( _colTypes[55] == DbTypeIDs<V56>::ID() );
    assert( _colTypes[56] == DbTypeIDs<V57>::ID() );
    assert( _colTypes[57] == DbTypeIDs<V58>::ID() );
    assert( _colTypes[58] == DbTypeIDs<V59>::ID() );
    assert( _colTypes[59] == DbTypeIDs<V60>::ID() );
    assert( _colTypes[60] == DbTypeIDs<V61>::ID() );
    assert( _colTypes[61] == DbTypeIDs<V62>::ID() );
    assert( _colTypes[62] == DbTypeIDs<V63>::ID() );
    assert( _colTypes[63] == DbTypeIDs<V64>::ID() );
    assert( _colTypes[64] == DbTypeIDs<V65>::ID() );
    assert( _colTypes[65] == DbTypeIDs<V66>::ID() );
    assert( _colTypes[66] == DbTypeIDs<V67>::ID() );
    assert( _colTypes[67] == DbTypeIDs<V68>::ID() );
    assert( _colTypes[68] == DbTypeIDs<V69>::ID() );
    assert( _colTypes[69] == DbTypeIDs<V70>::ID() );
    assert( _colTypes[70] == DbTypeIDs<V71>::ID() );
    assert( _colTypes[71] == DbTypeIDs<V72>::ID() );
    assert( _colTypes[72] == DbTypeIDs<V73>::ID() );
    assert( _colTypes[73] == DbTypeIDs<V74>::ID() );
    assert( _colTypes[74] == DbTypeIDs<V75>::ID() );
    assert( _colTypes[75] == DbTypeIDs<V76>::ID() );
    assert( _colTypes[76] == DbTypeIDs<V77>::ID() );
    assert( _colTypes[77] == DbTypeIDs<V78>::ID() );
    assert( _colTypes[78] == DbTypeIDs<V79>::ID() );
    assert( _colTypes[79] == DbTypeIDs<V80>::ID() );
    assert( _colTypes[80] == DbTypeIDs<V81>::ID() );
    assert( _colTypes[81] == DbTypeIDs<V82>::ID() );
    assert( _colTypes[82] == DbTypeIDs<V83>::ID() );
    assert( _colTypes[83] == DbTypeIDs<V84>::ID() );
    assert( _colTypes[84] == DbTypeIDs<V85>::ID() );
    ((List<V1>*)_colDatas[0])->Add(v1);
    ((List<V2>*)_colDatas[1])->Add(v2);
    ((List<V3>*)_colDatas[2])->Add(v3);
    ((List<V4>*)_colDatas[3])->Add(v4);
    ((List<V5>*)_colDatas[4])->Add(v5);
    ((List<V6>*)_colDatas[5])->Add(v6);
    ((List<V7>*)_colDatas[6])->Add(v7);
    ((List<V8>*)_colDatas[7])->Add(v8);
    ((List<V9>*)_colDatas[8])->Add(v9);
    ((List<V10>*)_colDatas[9])->Add(v10);
    ((List<V11>*)_colDatas[10])->Add(v11);
    ((List<V12>*)_colDatas[11])->Add(v12);
    ((List<V13>*)_colDatas[12])->Add(v13);
    ((List<V14>*)_colDatas[13])->Add(v14);
    ((List<V15>*)_colDatas[14])->Add(v15);
    ((List<V16>*)_colDatas[15])->Add(v16);
    ((List<V17>*)_colDatas[16])->Add(v17);
    ((List<V18>*)_colDatas[17])->Add(v18);
    ((List<V19>*)_colDatas[18])->Add(v19);
    ((List<V20>*)_colDatas[19])->Add(v20);
    ((List<V21>*)_colDatas[20])->Add(v21);
    ((List<V22>*)_colDatas[21])->Add(v22);
    ((List<V23>*)_colDatas[22])->Add(v23);
    ((List<V24>*)_colDatas[23])->Add(v24);
    ((List<V25>*)_colDatas[24])->Add(v25);
    ((List<V26>*)_colDatas[25])->Add(v26);
    ((List<V27>*)_colDatas[26])->Add(v27);
    ((List<V28>*)_colDatas[27])->Add(v28);
    ((List<V29>*)_colDatas[28])->Add(v29);
    ((List<V30>*)_colDatas[29])->Add(v30);
    ((List<V31>*)_colDatas[30])->Add(v31);
    ((List<V32>*)_colDatas[31])->Add(v32);
    ((List<V33>*)_colDatas[32])->Add(v33);
    ((List<V34>*)_colDatas[33])->Add(v34);
    ((List<V35>*)_colDatas[34])->Add(v35);
    ((List<V36>*)_colDatas[35])->Add(v36);
    ((List<V37>*)_colDatas[36])->Add(v37);
    ((List<V38>*)_colDatas[37])->Add(v38);
    ((List<V39>*)_colDatas[38])->Add(v39);
    ((List<V40>*)_colDatas[39])->Add(v40);
    ((List<V41>*)_colDatas[40])->Add(v41);
    ((List<V42>*)_colDatas[41])->Add(v42);
    ((List<V43>*)_colDatas[42])->Add(v43);
    ((List<V44>*)_colDatas[43])->Add(v44);
    ((List<V45>*)_colDatas[44])->Add(v45);
    ((List<V46>*)_colDatas[45])->Add(v46);
    ((List<V47>*)_colDatas[46])->Add(v47);
    ((List<V48>*)_colDatas[47])->Add(v48);
    ((List<V49>*)_colDatas[48])->Add(v49);
    ((List<V50>*)_colDatas[49])->Add(v50);
    ((List<V51>*)_colDatas[50])->Add(v51);
    ((List<V52>*)_colDatas[51])->Add(v52);
    ((List<V53>*)_colDatas[52])->Add(v53);
    ((List<V54>*)_colDatas[53])->Add(v54);
    ((List<V55>*)_colDatas[54])->Add(v55);
    ((List<V56>*)_colDatas[55])->Add(v56);
    ((List<V57>*)_colDatas[56])->Add(v57);
    ((List<V58>*)_colDatas[57])->Add(v58);
    ((List<V59>*)_colDatas[58])->Add(v59);
    ((List<V60>*)_colDatas[59])->Add(v60);
    ((List<V61>*)_colDatas[60])->Add(v61);
    ((List<V62>*)_colDatas[61])->Add(v62);
    ((List<V63>*)_colDatas[62])->Add(v63);
    ((List<V64>*)_colDatas[63])->Add(v64);
    ((List<V65>*)_colDatas[64])->Add(v65);
    ((List<V66>*)_colDatas[65])->Add(v66);
    ((List<V67>*)_colDatas[66])->Add(v67);
    ((List<V68>*)_colDatas[67])->Add(v68);
    ((List<V69>*)_colDatas[68])->Add(v69);
    ((List<V70>*)_colDatas[69])->Add(v70);
    ((List<V71>*)_colDatas[70])->Add(v71);
    ((List<V72>*)_colDatas[71])->Add(v72);
    ((List<V73>*)_colDatas[72])->Add(v73);
    ((List<V74>*)_colDatas[73])->Add(v74);
    ((List<V75>*)_colDatas[74])->Add(v75);
    ((List<V76>*)_colDatas[75])->Add(v76);
    ((List<V77>*)_colDatas[76])->Add(v77);
    ((List<V78>*)_colDatas[77])->Add(v78);
    ((List<V79>*)_colDatas[78])->Add(v79);
    ((List<V80>*)_colDatas[79])->Add(v80);
    ((List<V81>*)_colDatas[80])->Add(v81);
    ((List<V82>*)_colDatas[81])->Add(v82);
    ((List<V83>*)_colDatas[82])->Add(v83);
    ((List<V84>*)_colDatas[83])->Add(v84);
    ((List<V85>*)_colDatas[84])->Add(v85);
    ++_rowCount;
    return *this;
}
template<typename V1, typename V2, typename V3, typename V4, typename V5, typename V6, typename V7, typename V8, typename V9, typename V10, typename V11, typename V12, typename V13, typename V14, typename V15, typename V16, typename V17, typename V18, typename V19, typename V20, typename V21, typename V22, typename V23, typename V24, typename V25, typename V26, typename V27, typename V28, typename V29, typename V30, typename V31, typename V32, typename V33, typename V34, typename V35, typename V36, typename V37, typename V38, typename V39, typename V40, typename V41, typename V42, typename V43, typename V44, typename V45, typename V46, typename V47, typename V48, typename V49, typename V50, typename V51, typename V52, typename V53, typename V54, typename V55, typename V56, typename V57, typename V58, typename V59, typename V60, typename V61, typename V62, typename V63, typename V64, typename V65, typename V66, typename V67, typename V68, typename V69, typename V70, typename V71, typename V72, typename V73, typename V74, typename V75, typename V76, typename V77, typename V78, typename V79, typename V80, typename V81, typename V82, typename V83, typename V84, typename V85, typename V86>
DbTable & DbTable::AddRow(V1 const &v1, V2 const &v2, V3 const &v3, V4 const &v4, V5 const &v5, V6 const &v6, V7 const &v7, V8 const &v8, V9 const &v9, V10 const &v10, V11 const &v11, V12 const &v12, V13 const &v13, V14 const &v14, V15 const &v15, V16 const &v16, V17 const &v17, V18 const &v18, V19 const &v19, V20 const &v20, V21 const &v21, V22 const &v22, V23 const &v23, V24 const &v24, V25 const &v25, V26 const &v26, V27 const &v27, V28 const &v28, V29 const &v29, V30 const &v30, V31 const &v31, V32 const &v32, V33 const &v33, V34 const &v34, V35 const &v35, V36 const &v36, V37 const &v37, V38 const &v38, V39 const &v39, V40 const &v40, V41 const &v41, V42 const &v42, V43 const &v43, V44 const &v44, V45 const &v45, V46 const &v46, V47 const &v47, V48 const &v48, V49 const &v49, V50 const &v50, V51 const &v51, V52 const &v52, V53 const &v53, V54 const &v54, V55 const &v55, V56 const &v56, V57 const &v57, V58 const &v58, V59 const &v59, V60 const &v60, V61 const &v61, V62 const &v62, V63 const &v63, V64 const &v64, V65 const &v65, V66 const &v66, V67 const &v67, V68 const &v68, V69 const &v69, V70 const &v70, V71 const &v71, V72 const &v72, V73 const &v73, V74 const &v74, V75 const &v75, V76 const &v76, V77 const &v77, V78 const &v78, V79 const &v79, V80 const &v80, V81 const &v81, V82 const &v82, V83 const &v83, V84 const &v84, V85 const &v85, V86 const &v86) {
    assert( _colNames.Length() == 86 );
    assert( _colTypes[0] == DbTypeIDs<V1>::ID() );
    assert( _colTypes[1] == DbTypeIDs<V2>::ID() );
    assert( _colTypes[2] == DbTypeIDs<V3>::ID() );
    assert( _colTypes[3] == DbTypeIDs<V4>::ID() );
    assert( _colTypes[4] == DbTypeIDs<V5>::ID() );
    assert( _colTypes[5] == DbTypeIDs<V6>::ID() );
    assert( _colTypes[6] == DbTypeIDs<V7>::ID() );
    assert( _colTypes[7] == DbTypeIDs<V8>::ID() );
    assert( _colTypes[8] == DbTypeIDs<V9>::ID() );
    assert( _colTypes[9] == DbTypeIDs<V10>::ID() );
    assert( _colTypes[10] == DbTypeIDs<V11>::ID() );
    assert( _colTypes[11] == DbTypeIDs<V12>::ID() );
    assert( _colTypes[12] == DbTypeIDs<V13>::ID() );
    assert( _colTypes[13] == DbTypeIDs<V14>::ID() );
    assert( _colTypes[14] == DbTypeIDs<V15>::ID() );
    assert( _colTypes[15] == DbTypeIDs<V16>::ID() );
    assert( _colTypes[16] == DbTypeIDs<V17>::ID() );
    assert( _colTypes[17] == DbTypeIDs<V18>::ID() );
    assert( _colTypes[18] == DbTypeIDs<V19>::ID() );
    assert( _colTypes[19] == DbTypeIDs<V20>::ID() );
    assert( _colTypes[20] == DbTypeIDs<V21>::ID() );
    assert( _colTypes[21] == DbTypeIDs<V22>::ID() );
    assert( _colTypes[22] == DbTypeIDs<V23>::ID() );
    assert( _colTypes[23] == DbTypeIDs<V24>::ID() );
    assert( _colTypes[24] == DbTypeIDs<V25>::ID() );
    assert( _colTypes[25] == DbTypeIDs<V26>::ID() );
    assert( _colTypes[26] == DbTypeIDs<V27>::ID() );
    assert( _colTypes[27] == DbTypeIDs<V28>::ID() );
    assert( _colTypes[28] == DbTypeIDs<V29>::ID() );
    assert( _colTypes[29] == DbTypeIDs<V30>::ID() );
    assert( _colTypes[30] == DbTypeIDs<V31>::ID() );
    assert( _colTypes[31] == DbTypeIDs<V32>::ID() );
    assert( _colTypes[32] == DbTypeIDs<V33>::ID() );
    assert( _colTypes[33] == DbTypeIDs<V34>::ID() );
    assert( _colTypes[34] == DbTypeIDs<V35>::ID() );
    assert( _colTypes[35] == DbTypeIDs<V36>::ID() );
    assert( _colTypes[36] == DbTypeIDs<V37>::ID() );
    assert( _colTypes[37] == DbTypeIDs<V38>::ID() );
    assert( _colTypes[38] == DbTypeIDs<V39>::ID() );
    assert( _colTypes[39] == DbTypeIDs<V40>::ID() );
    assert( _colTypes[40] == DbTypeIDs<V41>::ID() );
    assert( _colTypes[41] == DbTypeIDs<V42>::ID() );
    assert( _colTypes[42] == DbTypeIDs<V43>::ID() );
    assert( _colTypes[43] == DbTypeIDs<V44>::ID() );
    assert( _colTypes[44] == DbTypeIDs<V45>::ID() );
    assert( _colTypes[45] == DbTypeIDs<V46>::ID() );
    assert( _colTypes[46] == DbTypeIDs<V47>::ID() );
    assert( _colTypes[47] == DbTypeIDs<V48>::ID() );
    assert( _colTypes[48] == DbTypeIDs<V49>::ID() );
    assert( _colTypes[49] == DbTypeIDs<V50>::ID() );
    assert( _colTypes[50] == DbTypeIDs<V51>::ID() );
    assert( _colTypes[51] == DbTypeIDs<V52>::ID() );
    assert( _colTypes[52] == DbTypeIDs<V53>::ID() );
    assert( _colTypes[53] == DbTypeIDs<V54>::ID() );
    assert( _colTypes[54] == DbTypeIDs<V55>::ID() );
    assert( _colTypes[55] == DbTypeIDs<V56>::ID() );
    assert( _colTypes[56] == DbTypeIDs<V57>::ID() );
    assert( _colTypes[57] == DbTypeIDs<V58>::ID() );
    assert( _colTypes[58] == DbTypeIDs<V59>::ID() );
    assert( _colTypes[59] == DbTypeIDs<V60>::ID() );
    assert( _colTypes[60] == DbTypeIDs<V61>::ID() );
    assert( _colTypes[61] == DbTypeIDs<V62>::ID() );
    assert( _colTypes[62] == DbTypeIDs<V63>::ID() );
    assert( _colTypes[63] == DbTypeIDs<V64>::ID() );
    assert( _colTypes[64] == DbTypeIDs<V65>::ID() );
    assert( _colTypes[65] == DbTypeIDs<V66>::ID() );
    assert( _colTypes[66] == DbTypeIDs<V67>::ID() );
    assert( _colTypes[67] == DbTypeIDs<V68>::ID() );
    assert( _colTypes[68] == DbTypeIDs<V69>::ID() );
    assert( _colTypes[69] == DbTypeIDs<V70>::ID() );
    assert( _colTypes[70] == DbTypeIDs<V71>::ID() );
    assert( _colTypes[71] == DbTypeIDs<V72>::ID() );
    assert( _colTypes[72] == DbTypeIDs<V73>::ID() );
    assert( _colTypes[73] == DbTypeIDs<V74>::ID() );
    assert( _colTypes[74] == DbTypeIDs<V75>::ID() );
    assert( _colTypes[75] == DbTypeIDs<V76>::ID() );
    assert( _colTypes[76] == DbTypeIDs<V77>::ID() );
    assert( _colTypes[77] == DbTypeIDs<V78>::ID() );
    assert( _colTypes[78] == DbTypeIDs<V79>::ID() );
    assert( _colTypes[79] == DbTypeIDs<V80>::ID() );
    assert( _colTypes[80] == DbTypeIDs<V81>::ID() );
    assert( _colTypes[81] == DbTypeIDs<V82>::ID() );
    assert( _colTypes[82] == DbTypeIDs<V83>::ID() );
    assert( _colTypes[83] == DbTypeIDs<V84>::ID() );
    assert( _colTypes[84] == DbTypeIDs<V85>::ID() );
    assert( _colTypes[85] == DbTypeIDs<V86>::ID() );
    ((List<V1>*)_colDatas[0])->Add(v1);
    ((List<V2>*)_colDatas[1])->Add(v2);
    ((List<V3>*)_colDatas[2])->Add(v3);
    ((List<V4>*)_colDatas[3])->Add(v4);
    ((List<V5>*)_colDatas[4])->Add(v5);
    ((List<V6>*)_colDatas[5])->Add(v6);
    ((List<V7>*)_colDatas[6])->Add(v7);
    ((List<V8>*)_colDatas[7])->Add(v8);
    ((List<V9>*)_colDatas[8])->Add(v9);
    ((List<V10>*)_colDatas[9])->Add(v10);
    ((List<V11>*)_colDatas[10])->Add(v11);
    ((List<V12>*)_colDatas[11])->Add(v12);
    ((List<V13>*)_colDatas[12])->Add(v13);
    ((List<V14>*)_colDatas[13])->Add(v14);
    ((List<V15>*)_colDatas[14])->Add(v15);
    ((List<V16>*)_colDatas[15])->Add(v16);
    ((List<V17>*)_colDatas[16])->Add(v17);
    ((List<V18>*)_colDatas[17])->Add(v18);
    ((List<V19>*)_colDatas[18])->Add(v19);
    ((List<V20>*)_colDatas[19])->Add(v20);
    ((List<V21>*)_colDatas[20])->Add(v21);
    ((List<V22>*)_colDatas[21])->Add(v22);
    ((List<V23>*)_colDatas[22])->Add(v23);
    ((List<V24>*)_colDatas[23])->Add(v24);
    ((List<V25>*)_colDatas[24])->Add(v25);
    ((List<V26>*)_colDatas[25])->Add(v26);
    ((List<V27>*)_colDatas[26])->Add(v27);
    ((List<V28>*)_colDatas[27])->Add(v28);
    ((List<V29>*)_colDatas[28])->Add(v29);
    ((List<V30>*)_colDatas[29])->Add(v30);
    ((List<V31>*)_colDatas[30])->Add(v31);
    ((List<V32>*)_colDatas[31])->Add(v32);
    ((List<V33>*)_colDatas[32])->Add(v33);
    ((List<V34>*)_colDatas[33])->Add(v34);
    ((List<V35>*)_colDatas[34])->Add(v35);
    ((List<V36>*)_colDatas[35])->Add(v36);
    ((List<V37>*)_colDatas[36])->Add(v37);
    ((List<V38>*)_colDatas[37])->Add(v38);
    ((List<V39>*)_colDatas[38])->Add(v39);
    ((List<V40>*)_colDatas[39])->Add(v40);
    ((List<V41>*)_colDatas[40])->Add(v41);
    ((List<V42>*)_colDatas[41])->Add(v42);
    ((List<V43>*)_colDatas[42])->Add(v43);
    ((List<V44>*)_colDatas[43])->Add(v44);
    ((List<V45>*)_colDatas[44])->Add(v45);
    ((List<V46>*)_colDatas[45])->Add(v46);
    ((List<V47>*)_colDatas[46])->Add(v47);
    ((List<V48>*)_colDatas[47])->Add(v48);
    ((List<V49>*)_colDatas[48])->Add(v49);
    ((List<V50>*)_colDatas[49])->Add(v50);
    ((List<V51>*)_colDatas[50])->Add(v51);
    ((List<V52>*)_colDatas[51])->Add(v52);
    ((List<V53>*)_colDatas[52])->Add(v53);
    ((List<V54>*)_colDatas[53])->Add(v54);
    ((List<V55>*)_colDatas[54])->Add(v55);
    ((List<V56>*)_colDatas[55])->Add(v56);
    ((List<V57>*)_colDatas[56])->Add(v57);
    ((List<V58>*)_colDatas[57])->Add(v58);
    ((List<V59>*)_colDatas[58])->Add(v59);
    ((List<V60>*)_colDatas[59])->Add(v60);
    ((List<V61>*)_colDatas[60])->Add(v61);
    ((List<V62>*)_colDatas[61])->Add(v62);
    ((List<V63>*)_colDatas[62])->Add(v63);
    ((List<V64>*)_colDatas[63])->Add(v64);
    ((List<V65>*)_colDatas[64])->Add(v65);
    ((List<V66>*)_colDatas[65])->Add(v66);
    ((List<V67>*)_colDatas[66])->Add(v67);
    ((List<V68>*)_colDatas[67])->Add(v68);
    ((List<V69>*)_colDatas[68])->Add(v69);
    ((List<V70>*)_colDatas[69])->Add(v70);
    ((List<V71>*)_colDatas[70])->Add(v71);
    ((List<V72>*)_colDatas[71])->Add(v72);
    ((List<V73>*)_colDatas[72])->Add(v73);
    ((List<V74>*)_colDatas[73])->Add(v74);
    ((List<V75>*)_colDatas[74])->Add(v75);
    ((List<V76>*)_colDatas[75])->Add(v76);
    ((List<V77>*)_colDatas[76])->Add(v77);
    ((List<V78>*)_colDatas[77])->Add(v78);
    ((List<V79>*)_colDatas[78])->Add(v79);
    ((List<V80>*)_colDatas[79])->Add(v80);
    ((List<V81>*)_colDatas[80])->Add(v81);
    ((List<V82>*)_colDatas[81])->Add(v82);
    ((List<V83>*)_colDatas[82])->Add(v83);
    ((List<V84>*)_colDatas[83])->Add(v84);
    ((List<V85>*)_colDatas[84])->Add(v85);
    ((List<V86>*)_colDatas[85])->Add(v86);
    ++_rowCount;
    return *this;
}
template<typename V1, typename V2, typename V3, typename V4, typename V5, typename V6, typename V7, typename V8, typename V9, typename V10, typename V11, typename V12, typename V13, typename V14, typename V15, typename V16, typename V17, typename V18, typename V19, typename V20, typename V21, typename V22, typename V23, typename V24, typename V25, typename V26, typename V27, typename V28, typename V29, typename V30, typename V31, typename V32, typename V33, typename V34, typename V35, typename V36, typename V37, typename V38, typename V39, typename V40, typename V41, typename V42, typename V43, typename V44, typename V45, typename V46, typename V47, typename V48, typename V49, typename V50, typename V51, typename V52, typename V53, typename V54, typename V55, typename V56, typename V57, typename V58, typename V59, typename V60, typename V61, typename V62, typename V63, typename V64, typename V65, typename V66, typename V67, typename V68, typename V69, typename V70, typename V71, typename V72, typename V73, typename V74, typename V75, typename V76, typename V77, typename V78, typename V79, typename V80, typename V81, typename V82, typename V83, typename V84, typename V85, typename V86, typename V87>
DbTable & DbTable::AddRow(V1 const &v1, V2 const &v2, V3 const &v3, V4 const &v4, V5 const &v5, V6 const &v6, V7 const &v7, V8 const &v8, V9 const &v9, V10 const &v10, V11 const &v11, V12 const &v12, V13 const &v13, V14 const &v14, V15 const &v15, V16 const &v16, V17 const &v17, V18 const &v18, V19 const &v19, V20 const &v20, V21 const &v21, V22 const &v22, V23 const &v23, V24 const &v24, V25 const &v25, V26 const &v26, V27 const &v27, V28 const &v28, V29 const &v29, V30 const &v30, V31 const &v31, V32 const &v32, V33 const &v33, V34 const &v34, V35 const &v35, V36 const &v36, V37 const &v37, V38 const &v38, V39 const &v39, V40 const &v40, V41 const &v41, V42 const &v42, V43 const &v43, V44 const &v44, V45 const &v45, V46 const &v46, V47 const &v47, V48 const &v48, V49 const &v49, V50 const &v50, V51 const &v51, V52 const &v52, V53 const &v53, V54 const &v54, V55 const &v55, V56 const &v56, V57 const &v57, V58 const &v58, V59 const &v59, V60 const &v60, V61 const &v61, V62 const &v62, V63 const &v63, V64 const &v64, V65 const &v65, V66 const &v66, V67 const &v67, V68 const &v68, V69 const &v69, V70 const &v70, V71 const &v71, V72 const &v72, V73 const &v73, V74 const &v74, V75 const &v75, V76 const &v76, V77 const &v77, V78 const &v78, V79 const &v79, V80 const &v80, V81 const &v81, V82 const &v82, V83 const &v83, V84 const &v84, V85 const &v85, V86 const &v86, V87 const &v87) {
    assert( _colNames.Length() == 87 );
    assert( _colTypes[0] == DbTypeIDs<V1>::ID() );
    assert( _colTypes[1] == DbTypeIDs<V2>::ID() );
    assert( _colTypes[2] == DbTypeIDs<V3>::ID() );
    assert( _colTypes[3] == DbTypeIDs<V4>::ID() );
    assert( _colTypes[4] == DbTypeIDs<V5>::ID() );
    assert( _colTypes[5] == DbTypeIDs<V6>::ID() );
    assert( _colTypes[6] == DbTypeIDs<V7>::ID() );
    assert( _colTypes[7] == DbTypeIDs<V8>::ID() );
    assert( _colTypes[8] == DbTypeIDs<V9>::ID() );
    assert( _colTypes[9] == DbTypeIDs<V10>::ID() );
    assert( _colTypes[10] == DbTypeIDs<V11>::ID() );
    assert( _colTypes[11] == DbTypeIDs<V12>::ID() );
    assert( _colTypes[12] == DbTypeIDs<V13>::ID() );
    assert( _colTypes[13] == DbTypeIDs<V14>::ID() );
    assert( _colTypes[14] == DbTypeIDs<V15>::ID() );
    assert( _colTypes[15] == DbTypeIDs<V16>::ID() );
    assert( _colTypes[16] == DbTypeIDs<V17>::ID() );
    assert( _colTypes[17] == DbTypeIDs<V18>::ID() );
    assert( _colTypes[18] == DbTypeIDs<V19>::ID() );
    assert( _colTypes[19] == DbTypeIDs<V20>::ID() );
    assert( _colTypes[20] == DbTypeIDs<V21>::ID() );
    assert( _colTypes[21] == DbTypeIDs<V22>::ID() );
    assert( _colTypes[22] == DbTypeIDs<V23>::ID() );
    assert( _colTypes[23] == DbTypeIDs<V24>::ID() );
    assert( _colTypes[24] == DbTypeIDs<V25>::ID() );
    assert( _colTypes[25] == DbTypeIDs<V26>::ID() );
    assert( _colTypes[26] == DbTypeIDs<V27>::ID() );
    assert( _colTypes[27] == DbTypeIDs<V28>::ID() );
    assert( _colTypes[28] == DbTypeIDs<V29>::ID() );
    assert( _colTypes[29] == DbTypeIDs<V30>::ID() );
    assert( _colTypes[30] == DbTypeIDs<V31>::ID() );
    assert( _colTypes[31] == DbTypeIDs<V32>::ID() );
    assert( _colTypes[32] == DbTypeIDs<V33>::ID() );
    assert( _colTypes[33] == DbTypeIDs<V34>::ID() );
    assert( _colTypes[34] == DbTypeIDs<V35>::ID() );
    assert( _colTypes[35] == DbTypeIDs<V36>::ID() );
    assert( _colTypes[36] == DbTypeIDs<V37>::ID() );
    assert( _colTypes[37] == DbTypeIDs<V38>::ID() );
    assert( _colTypes[38] == DbTypeIDs<V39>::ID() );
    assert( _colTypes[39] == DbTypeIDs<V40>::ID() );
    assert( _colTypes[40] == DbTypeIDs<V41>::ID() );
    assert( _colTypes[41] == DbTypeIDs<V42>::ID() );
    assert( _colTypes[42] == DbTypeIDs<V43>::ID() );
    assert( _colTypes[43] == DbTypeIDs<V44>::ID() );
    assert( _colTypes[44] == DbTypeIDs<V45>::ID() );
    assert( _colTypes[45] == DbTypeIDs<V46>::ID() );
    assert( _colTypes[46] == DbTypeIDs<V47>::ID() );
    assert( _colTypes[47] == DbTypeIDs<V48>::ID() );
    assert( _colTypes[48] == DbTypeIDs<V49>::ID() );
    assert( _colTypes[49] == DbTypeIDs<V50>::ID() );
    assert( _colTypes[50] == DbTypeIDs<V51>::ID() );
    assert( _colTypes[51] == DbTypeIDs<V52>::ID() );
    assert( _colTypes[52] == DbTypeIDs<V53>::ID() );
    assert( _colTypes[53] == DbTypeIDs<V54>::ID() );
    assert( _colTypes[54] == DbTypeIDs<V55>::ID() );
    assert( _colTypes[55] == DbTypeIDs<V56>::ID() );
    assert( _colTypes[56] == DbTypeIDs<V57>::ID() );
    assert( _colTypes[57] == DbTypeIDs<V58>::ID() );
    assert( _colTypes[58] == DbTypeIDs<V59>::ID() );
    assert( _colTypes[59] == DbTypeIDs<V60>::ID() );
    assert( _colTypes[60] == DbTypeIDs<V61>::ID() );
    assert( _colTypes[61] == DbTypeIDs<V62>::ID() );
    assert( _colTypes[62] == DbTypeIDs<V63>::ID() );
    assert( _colTypes[63] == DbTypeIDs<V64>::ID() );
    assert( _colTypes[64] == DbTypeIDs<V65>::ID() );
    assert( _colTypes[65] == DbTypeIDs<V66>::ID() );
    assert( _colTypes[66] == DbTypeIDs<V67>::ID() );
    assert( _colTypes[67] == DbTypeIDs<V68>::ID() );
    assert( _colTypes[68] == DbTypeIDs<V69>::ID() );
    assert( _colTypes[69] == DbTypeIDs<V70>::ID() );
    assert( _colTypes[70] == DbTypeIDs<V71>::ID() );
    assert( _colTypes[71] == DbTypeIDs<V72>::ID() );
    assert( _colTypes[72] == DbTypeIDs<V73>::ID() );
    assert( _colTypes[73] == DbTypeIDs<V74>::ID() );
    assert( _colTypes[74] == DbTypeIDs<V75>::ID() );
    assert( _colTypes[75] == DbTypeIDs<V76>::ID() );
    assert( _colTypes[76] == DbTypeIDs<V77>::ID() );
    assert( _colTypes[77] == DbTypeIDs<V78>::ID() );
    assert( _colTypes[78] == DbTypeIDs<V79>::ID() );
    assert( _colTypes[79] == DbTypeIDs<V80>::ID() );
    assert( _colTypes[80] == DbTypeIDs<V81>::ID() );
    assert( _colTypes[81] == DbTypeIDs<V82>::ID() );
    assert( _colTypes[82] == DbTypeIDs<V83>::ID() );
    assert( _colTypes[83] == DbTypeIDs<V84>::ID() );
    assert( _colTypes[84] == DbTypeIDs<V85>::ID() );
    assert( _colTypes[85] == DbTypeIDs<V86>::ID() );
    assert( _colTypes[86] == DbTypeIDs<V87>::ID() );
    ((List<V1>*)_colDatas[0])->Add(v1);
    ((List<V2>*)_colDatas[1])->Add(v2);
    ((List<V3>*)_colDatas[2])->Add(v3);
    ((List<V4>*)_colDatas[3])->Add(v4);
    ((List<V5>*)_colDatas[4])->Add(v5);
    ((List<V6>*)_colDatas[5])->Add(v6);
    ((List<V7>*)_colDatas[6])->Add(v7);
    ((List<V8>*)_colDatas[7])->Add(v8);
    ((List<V9>*)_colDatas[8])->Add(v9);
    ((List<V10>*)_colDatas[9])->Add(v10);
    ((List<V11>*)_colDatas[10])->Add(v11);
    ((List<V12>*)_colDatas[11])->Add(v12);
    ((List<V13>*)_colDatas[12])->Add(v13);
    ((List<V14>*)_colDatas[13])->Add(v14);
    ((List<V15>*)_colDatas[14])->Add(v15);
    ((List<V16>*)_colDatas[15])->Add(v16);
    ((List<V17>*)_colDatas[16])->Add(v17);
    ((List<V18>*)_colDatas[17])->Add(v18);
    ((List<V19>*)_colDatas[18])->Add(v19);
    ((List<V20>*)_colDatas[19])->Add(v20);
    ((List<V21>*)_colDatas[20])->Add(v21);
    ((List<V22>*)_colDatas[21])->Add(v22);
    ((List<V23>*)_colDatas[22])->Add(v23);
    ((List<V24>*)_colDatas[23])->Add(v24);
    ((List<V25>*)_colDatas[24])->Add(v25);
    ((List<V26>*)_colDatas[25])->Add(v26);
    ((List<V27>*)_colDatas[26])->Add(v27);
    ((List<V28>*)_colDatas[27])->Add(v28);
    ((List<V29>*)_colDatas[28])->Add(v29);
    ((List<V30>*)_colDatas[29])->Add(v30);
    ((List<V31>*)_colDatas[30])->Add(v31);
    ((List<V32>*)_colDatas[31])->Add(v32);
    ((List<V33>*)_colDatas[32])->Add(v33);
    ((List<V34>*)_colDatas[33])->Add(v34);
    ((List<V35>*)_colDatas[34])->Add(v35);
    ((List<V36>*)_colDatas[35])->Add(v36);
    ((List<V37>*)_colDatas[36])->Add(v37);
    ((List<V38>*)_colDatas[37])->Add(v38);
    ((List<V39>*)_colDatas[38])->Add(v39);
    ((List<V40>*)_colDatas[39])->Add(v40);
    ((List<V41>*)_colDatas[40])->Add(v41);
    ((List<V42>*)_colDatas[41])->Add(v42);
    ((List<V43>*)_colDatas[42])->Add(v43);
    ((List<V44>*)_colDatas[43])->Add(v44);
    ((List<V45>*)_colDatas[44])->Add(v45);
    ((List<V46>*)_colDatas[45])->Add(v46);
    ((List<V47>*)_colDatas[46])->Add(v47);
    ((List<V48>*)_colDatas[47])->Add(v48);
    ((List<V49>*)_colDatas[48])->Add(v49);
    ((List<V50>*)_colDatas[49])->Add(v50);
    ((List<V51>*)_colDatas[50])->Add(v51);
    ((List<V52>*)_colDatas[51])->Add(v52);
    ((List<V53>*)_colDatas[52])->Add(v53);
    ((List<V54>*)_colDatas[53])->Add(v54);
    ((List<V55>*)_colDatas[54])->Add(v55);
    ((List<V56>*)_colDatas[55])->Add(v56);
    ((List<V57>*)_colDatas[56])->Add(v57);
    ((List<V58>*)_colDatas[57])->Add(v58);
    ((List<V59>*)_colDatas[58])->Add(v59);
    ((List<V60>*)_colDatas[59])->Add(v60);
    ((List<V61>*)_colDatas[60])->Add(v61);
    ((List<V62>*)_colDatas[61])->Add(v62);
    ((List<V63>*)_colDatas[62])->Add(v63);
    ((List<V64>*)_colDatas[63])->Add(v64);
    ((List<V65>*)_colDatas[64])->Add(v65);
    ((List<V66>*)_colDatas[65])->Add(v66);
    ((List<V67>*)_colDatas[66])->Add(v67);
    ((List<V68>*)_colDatas[67])->Add(v68);
    ((List<V69>*)_colDatas[68])->Add(v69);
    ((List<V70>*)_colDatas[69])->Add(v70);
    ((List<V71>*)_colDatas[70])->Add(v71);
    ((List<V72>*)_colDatas[71])->Add(v72);
    ((List<V73>*)_colDatas[72])->Add(v73);
    ((List<V74>*)_colDatas[73])->Add(v74);
    ((List<V75>*)_colDatas[74])->Add(v75);
    ((List<V76>*)_colDatas[75])->Add(v76);
    ((List<V77>*)_colDatas[76])->Add(v77);
    ((List<V78>*)_colDatas[77])->Add(v78);
    ((List<V79>*)_colDatas[78])->Add(v79);
    ((List<V80>*)_colDatas[79])->Add(v80);
    ((List<V81>*)_colDatas[80])->Add(v81);
    ((List<V82>*)_colDatas[81])->Add(v82);
    ((List<V83>*)_colDatas[82])->Add(v83);
    ((List<V84>*)_colDatas[83])->Add(v84);
    ((List<V85>*)_colDatas[84])->Add(v85);
    ((List<V86>*)_colDatas[85])->Add(v86);
    ((List<V87>*)_colDatas[86])->Add(v87);
    ++_rowCount;
    return *this;
}
template<typename V1, typename V2, typename V3, typename V4, typename V5, typename V6, typename V7, typename V8, typename V9, typename V10, typename V11, typename V12, typename V13, typename V14, typename V15, typename V16, typename V17, typename V18, typename V19, typename V20, typename V21, typename V22, typename V23, typename V24, typename V25, typename V26, typename V27, typename V28, typename V29, typename V30, typename V31, typename V32, typename V33, typename V34, typename V35, typename V36, typename V37, typename V38, typename V39, typename V40, typename V41, typename V42, typename V43, typename V44, typename V45, typename V46, typename V47, typename V48, typename V49, typename V50, typename V51, typename V52, typename V53, typename V54, typename V55, typename V56, typename V57, typename V58, typename V59, typename V60, typename V61, typename V62, typename V63, typename V64, typename V65, typename V66, typename V67, typename V68, typename V69, typename V70, typename V71, typename V72, typename V73, typename V74, typename V75, typename V76, typename V77, typename V78, typename V79, typename V80, typename V81, typename V82, typename V83, typename V84, typename V85, typename V86, typename V87, typename V88>
DbTable & DbTable::AddRow(V1 const &v1, V2 const &v2, V3 const &v3, V4 const &v4, V5 const &v5, V6 const &v6, V7 const &v7, V8 const &v8, V9 const &v9, V10 const &v10, V11 const &v11, V12 const &v12, V13 const &v13, V14 const &v14, V15 const &v15, V16 const &v16, V17 const &v17, V18 const &v18, V19 const &v19, V20 const &v20, V21 const &v21, V22 const &v22, V23 const &v23, V24 const &v24, V25 const &v25, V26 const &v26, V27 const &v27, V28 const &v28, V29 const &v29, V30 const &v30, V31 const &v31, V32 const &v32, V33 const &v33, V34 const &v34, V35 const &v35, V36 const &v36, V37 const &v37, V38 const &v38, V39 const &v39, V40 const &v40, V41 const &v41, V42 const &v42, V43 const &v43, V44 const &v44, V45 const &v45, V46 const &v46, V47 const &v47, V48 const &v48, V49 const &v49, V50 const &v50, V51 const &v51, V52 const &v52, V53 const &v53, V54 const &v54, V55 const &v55, V56 const &v56, V57 const &v57, V58 const &v58, V59 const &v59, V60 const &v60, V61 const &v61, V62 const &v62, V63 const &v63, V64 const &v64, V65 const &v65, V66 const &v66, V67 const &v67, V68 const &v68, V69 const &v69, V70 const &v70, V71 const &v71, V72 const &v72, V73 const &v73, V74 const &v74, V75 const &v75, V76 const &v76, V77 const &v77, V78 const &v78, V79 const &v79, V80 const &v80, V81 const &v81, V82 const &v82, V83 const &v83, V84 const &v84, V85 const &v85, V86 const &v86, V87 const &v87, V88 const &v88) {
    assert( _colNames.Length() == 88 );
    assert( _colTypes[0] == DbTypeIDs<V1>::ID() );
    assert( _colTypes[1] == DbTypeIDs<V2>::ID() );
    assert( _colTypes[2] == DbTypeIDs<V3>::ID() );
    assert( _colTypes[3] == DbTypeIDs<V4>::ID() );
    assert( _colTypes[4] == DbTypeIDs<V5>::ID() );
    assert( _colTypes[5] == DbTypeIDs<V6>::ID() );
    assert( _colTypes[6] == DbTypeIDs<V7>::ID() );
    assert( _colTypes[7] == DbTypeIDs<V8>::ID() );
    assert( _colTypes[8] == DbTypeIDs<V9>::ID() );
    assert( _colTypes[9] == DbTypeIDs<V10>::ID() );
    assert( _colTypes[10] == DbTypeIDs<V11>::ID() );
    assert( _colTypes[11] == DbTypeIDs<V12>::ID() );
    assert( _colTypes[12] == DbTypeIDs<V13>::ID() );
    assert( _colTypes[13] == DbTypeIDs<V14>::ID() );
    assert( _colTypes[14] == DbTypeIDs<V15>::ID() );
    assert( _colTypes[15] == DbTypeIDs<V16>::ID() );
    assert( _colTypes[16] == DbTypeIDs<V17>::ID() );
    assert( _colTypes[17] == DbTypeIDs<V18>::ID() );
    assert( _colTypes[18] == DbTypeIDs<V19>::ID() );
    assert( _colTypes[19] == DbTypeIDs<V20>::ID() );
    assert( _colTypes[20] == DbTypeIDs<V21>::ID() );
    assert( _colTypes[21] == DbTypeIDs<V22>::ID() );
    assert( _colTypes[22] == DbTypeIDs<V23>::ID() );
    assert( _colTypes[23] == DbTypeIDs<V24>::ID() );
    assert( _colTypes[24] == DbTypeIDs<V25>::ID() );
    assert( _colTypes[25] == DbTypeIDs<V26>::ID() );
    assert( _colTypes[26] == DbTypeIDs<V27>::ID() );
    assert( _colTypes[27] == DbTypeIDs<V28>::ID() );
    assert( _colTypes[28] == DbTypeIDs<V29>::ID() );
    assert( _colTypes[29] == DbTypeIDs<V30>::ID() );
    assert( _colTypes[30] == DbTypeIDs<V31>::ID() );
    assert( _colTypes[31] == DbTypeIDs<V32>::ID() );
    assert( _colTypes[32] == DbTypeIDs<V33>::ID() );
    assert( _colTypes[33] == DbTypeIDs<V34>::ID() );
    assert( _colTypes[34] == DbTypeIDs<V35>::ID() );
    assert( _colTypes[35] == DbTypeIDs<V36>::ID() );
    assert( _colTypes[36] == DbTypeIDs<V37>::ID() );
    assert( _colTypes[37] == DbTypeIDs<V38>::ID() );
    assert( _colTypes[38] == DbTypeIDs<V39>::ID() );
    assert( _colTypes[39] == DbTypeIDs<V40>::ID() );
    assert( _colTypes[40] == DbTypeIDs<V41>::ID() );
    assert( _colTypes[41] == DbTypeIDs<V42>::ID() );
    assert( _colTypes[42] == DbTypeIDs<V43>::ID() );
    assert( _colTypes[43] == DbTypeIDs<V44>::ID() );
    assert( _colTypes[44] == DbTypeIDs<V45>::ID() );
    assert( _colTypes[45] == DbTypeIDs<V46>::ID() );
    assert( _colTypes[46] == DbTypeIDs<V47>::ID() );
    assert( _colTypes[47] == DbTypeIDs<V48>::ID() );
    assert( _colTypes[48] == DbTypeIDs<V49>::ID() );
    assert( _colTypes[49] == DbTypeIDs<V50>::ID() );
    assert( _colTypes[50] == DbTypeIDs<V51>::ID() );
    assert( _colTypes[51] == DbTypeIDs<V52>::ID() );
    assert( _colTypes[52] == DbTypeIDs<V53>::ID() );
    assert( _colTypes[53] == DbTypeIDs<V54>::ID() );
    assert( _colTypes[54] == DbTypeIDs<V55>::ID() );
    assert( _colTypes[55] == DbTypeIDs<V56>::ID() );
    assert( _colTypes[56] == DbTypeIDs<V57>::ID() );
    assert( _colTypes[57] == DbTypeIDs<V58>::ID() );
    assert( _colTypes[58] == DbTypeIDs<V59>::ID() );
    assert( _colTypes[59] == DbTypeIDs<V60>::ID() );
    assert( _colTypes[60] == DbTypeIDs<V61>::ID() );
    assert( _colTypes[61] == DbTypeIDs<V62>::ID() );
    assert( _colTypes[62] == DbTypeIDs<V63>::ID() );
    assert( _colTypes[63] == DbTypeIDs<V64>::ID() );
    assert( _colTypes[64] == DbTypeIDs<V65>::ID() );
    assert( _colTypes[65] == DbTypeIDs<V66>::ID() );
    assert( _colTypes[66] == DbTypeIDs<V67>::ID() );
    assert( _colTypes[67] == DbTypeIDs<V68>::ID() );
    assert( _colTypes[68] == DbTypeIDs<V69>::ID() );
    assert( _colTypes[69] == DbTypeIDs<V70>::ID() );
    assert( _colTypes[70] == DbTypeIDs<V71>::ID() );
    assert( _colTypes[71] == DbTypeIDs<V72>::ID() );
    assert( _colTypes[72] == DbTypeIDs<V73>::ID() );
    assert( _colTypes[73] == DbTypeIDs<V74>::ID() );
    assert( _colTypes[74] == DbTypeIDs<V75>::ID() );
    assert( _colTypes[75] == DbTypeIDs<V76>::ID() );
    assert( _colTypes[76] == DbTypeIDs<V77>::ID() );
    assert( _colTypes[77] == DbTypeIDs<V78>::ID() );
    assert( _colTypes[78] == DbTypeIDs<V79>::ID() );
    assert( _colTypes[79] == DbTypeIDs<V80>::ID() );
    assert( _colTypes[80] == DbTypeIDs<V81>::ID() );
    assert( _colTypes[81] == DbTypeIDs<V82>::ID() );
    assert( _colTypes[82] == DbTypeIDs<V83>::ID() );
    assert( _colTypes[83] == DbTypeIDs<V84>::ID() );
    assert( _colTypes[84] == DbTypeIDs<V85>::ID() );
    assert( _colTypes[85] == DbTypeIDs<V86>::ID() );
    assert( _colTypes[86] == DbTypeIDs<V87>::ID() );
    assert( _colTypes[87] == DbTypeIDs<V88>::ID() );
    ((List<V1>*)_colDatas[0])->Add(v1);
    ((List<V2>*)_colDatas[1])->Add(v2);
    ((List<V3>*)_colDatas[2])->Add(v3);
    ((List<V4>*)_colDatas[3])->Add(v4);
    ((List<V5>*)_colDatas[4])->Add(v5);
    ((List<V6>*)_colDatas[5])->Add(v6);
    ((List<V7>*)_colDatas[6])->Add(v7);
    ((List<V8>*)_colDatas[7])->Add(v8);
    ((List<V9>*)_colDatas[8])->Add(v9);
    ((List<V10>*)_colDatas[9])->Add(v10);
    ((List<V11>*)_colDatas[10])->Add(v11);
    ((List<V12>*)_colDatas[11])->Add(v12);
    ((List<V13>*)_colDatas[12])->Add(v13);
    ((List<V14>*)_colDatas[13])->Add(v14);
    ((List<V15>*)_colDatas[14])->Add(v15);
    ((List<V16>*)_colDatas[15])->Add(v16);
    ((List<V17>*)_colDatas[16])->Add(v17);
    ((List<V18>*)_colDatas[17])->Add(v18);
    ((List<V19>*)_colDatas[18])->Add(v19);
    ((List<V20>*)_colDatas[19])->Add(v20);
    ((List<V21>*)_colDatas[20])->Add(v21);
    ((List<V22>*)_colDatas[21])->Add(v22);
    ((List<V23>*)_colDatas[22])->Add(v23);
    ((List<V24>*)_colDatas[23])->Add(v24);
    ((List<V25>*)_colDatas[24])->Add(v25);
    ((List<V26>*)_colDatas[25])->Add(v26);
    ((List<V27>*)_colDatas[26])->Add(v27);
    ((List<V28>*)_colDatas[27])->Add(v28);
    ((List<V29>*)_colDatas[28])->Add(v29);
    ((List<V30>*)_colDatas[29])->Add(v30);
    ((List<V31>*)_colDatas[30])->Add(v31);
    ((List<V32>*)_colDatas[31])->Add(v32);
    ((List<V33>*)_colDatas[32])->Add(v33);
    ((List<V34>*)_colDatas[33])->Add(v34);
    ((List<V35>*)_colDatas[34])->Add(v35);
    ((List<V36>*)_colDatas[35])->Add(v36);
    ((List<V37>*)_colDatas[36])->Add(v37);
    ((List<V38>*)_colDatas[37])->Add(v38);
    ((List<V39>*)_colDatas[38])->Add(v39);
    ((List<V40>*)_colDatas[39])->Add(v40);
    ((List<V41>*)_colDatas[40])->Add(v41);
    ((List<V42>*)_colDatas[41])->Add(v42);
    ((List<V43>*)_colDatas[42])->Add(v43);
    ((List<V44>*)_colDatas[43])->Add(v44);
    ((List<V45>*)_colDatas[44])->Add(v45);
    ((List<V46>*)_colDatas[45])->Add(v46);
    ((List<V47>*)_colDatas[46])->Add(v47);
    ((List<V48>*)_colDatas[47])->Add(v48);
    ((List<V49>*)_colDatas[48])->Add(v49);
    ((List<V50>*)_colDatas[49])->Add(v50);
    ((List<V51>*)_colDatas[50])->Add(v51);
    ((List<V52>*)_colDatas[51])->Add(v52);
    ((List<V53>*)_colDatas[52])->Add(v53);
    ((List<V54>*)_colDatas[53])->Add(v54);
    ((List<V55>*)_colDatas[54])->Add(v55);
    ((List<V56>*)_colDatas[55])->Add(v56);
    ((List<V57>*)_colDatas[56])->Add(v57);
    ((List<V58>*)_colDatas[57])->Add(v58);
    ((List<V59>*)_colDatas[58])->Add(v59);
    ((List<V60>*)_colDatas[59])->Add(v60);
    ((List<V61>*)_colDatas[60])->Add(v61);
    ((List<V62>*)_colDatas[61])->Add(v62);
    ((List<V63>*)_colDatas[62])->Add(v63);
    ((List<V64>*)_colDatas[63])->Add(v64);
    ((List<V65>*)_colDatas[64])->Add(v65);
    ((List<V66>*)_colDatas[65])->Add(v66);
    ((List<V67>*)_colDatas[66])->Add(v67);
    ((List<V68>*)_colDatas[67])->Add(v68);
    ((List<V69>*)_colDatas[68])->Add(v69);
    ((List<V70>*)_colDatas[69])->Add(v70);
    ((List<V71>*)_colDatas[70])->Add(v71);
    ((List<V72>*)_colDatas[71])->Add(v72);
    ((List<V73>*)_colDatas[72])->Add(v73);
    ((List<V74>*)_colDatas[73])->Add(v74);
    ((List<V75>*)_colDatas[74])->Add(v75);
    ((List<V76>*)_colDatas[75])->Add(v76);
    ((List<V77>*)_colDatas[76])->Add(v77);
    ((List<V78>*)_colDatas[77])->Add(v78);
    ((List<V79>*)_colDatas[78])->Add(v79);
    ((List<V80>*)_colDatas[79])->Add(v80);
    ((List<V81>*)_colDatas[80])->Add(v81);
    ((List<V82>*)_colDatas[81])->Add(v82);
    ((List<V83>*)_colDatas[82])->Add(v83);
    ((List<V84>*)_colDatas[83])->Add(v84);
    ((List<V85>*)_colDatas[84])->Add(v85);
    ((List<V86>*)_colDatas[85])->Add(v86);
    ((List<V87>*)_colDatas[86])->Add(v87);
    ((List<V88>*)_colDatas[87])->Add(v88);
    ++_rowCount;
    return *this;
}
template<typename V1, typename V2, typename V3, typename V4, typename V5, typename V6, typename V7, typename V8, typename V9, typename V10, typename V11, typename V12, typename V13, typename V14, typename V15, typename V16, typename V17, typename V18, typename V19, typename V20, typename V21, typename V22, typename V23, typename V24, typename V25, typename V26, typename V27, typename V28, typename V29, typename V30, typename V31, typename V32, typename V33, typename V34, typename V35, typename V36, typename V37, typename V38, typename V39, typename V40, typename V41, typename V42, typename V43, typename V44, typename V45, typename V46, typename V47, typename V48, typename V49, typename V50, typename V51, typename V52, typename V53, typename V54, typename V55, typename V56, typename V57, typename V58, typename V59, typename V60, typename V61, typename V62, typename V63, typename V64, typename V65, typename V66, typename V67, typename V68, typename V69, typename V70, typename V71, typename V72, typename V73, typename V74, typename V75, typename V76, typename V77, typename V78, typename V79, typename V80, typename V81, typename V82, typename V83, typename V84, typename V85, typename V86, typename V87, typename V88, typename V89>
DbTable & DbTable::AddRow(V1 const &v1, V2 const &v2, V3 const &v3, V4 const &v4, V5 const &v5, V6 const &v6, V7 const &v7, V8 const &v8, V9 const &v9, V10 const &v10, V11 const &v11, V12 const &v12, V13 const &v13, V14 const &v14, V15 const &v15, V16 const &v16, V17 const &v17, V18 const &v18, V19 const &v19, V20 const &v20, V21 const &v21, V22 const &v22, V23 const &v23, V24 const &v24, V25 const &v25, V26 const &v26, V27 const &v27, V28 const &v28, V29 const &v29, V30 const &v30, V31 const &v31, V32 const &v32, V33 const &v33, V34 const &v34, V35 const &v35, V36 const &v36, V37 const &v37, V38 const &v38, V39 const &v39, V40 const &v40, V41 const &v41, V42 const &v42, V43 const &v43, V44 const &v44, V45 const &v45, V46 const &v46, V47 const &v47, V48 const &v48, V49 const &v49, V50 const &v50, V51 const &v51, V52 const &v52, V53 const &v53, V54 const &v54, V55 const &v55, V56 const &v56, V57 const &v57, V58 const &v58, V59 const &v59, V60 const &v60, V61 const &v61, V62 const &v62, V63 const &v63, V64 const &v64, V65 const &v65, V66 const &v66, V67 const &v67, V68 const &v68, V69 const &v69, V70 const &v70, V71 const &v71, V72 const &v72, V73 const &v73, V74 const &v74, V75 const &v75, V76 const &v76, V77 const &v77, V78 const &v78, V79 const &v79, V80 const &v80, V81 const &v81, V82 const &v82, V83 const &v83, V84 const &v84, V85 const &v85, V86 const &v86, V87 const &v87, V88 const &v88, V89 const &v89) {
    assert( _colNames.Length() == 89 );
    assert( _colTypes[0] == DbTypeIDs<V1>::ID() );
    assert( _colTypes[1] == DbTypeIDs<V2>::ID() );
    assert( _colTypes[2] == DbTypeIDs<V3>::ID() );
    assert( _colTypes[3] == DbTypeIDs<V4>::ID() );
    assert( _colTypes[4] == DbTypeIDs<V5>::ID() );
    assert( _colTypes[5] == DbTypeIDs<V6>::ID() );
    assert( _colTypes[6] == DbTypeIDs<V7>::ID() );
    assert( _colTypes[7] == DbTypeIDs<V8>::ID() );
    assert( _colTypes[8] == DbTypeIDs<V9>::ID() );
    assert( _colTypes[9] == DbTypeIDs<V10>::ID() );
    assert( _colTypes[10] == DbTypeIDs<V11>::ID() );
    assert( _colTypes[11] == DbTypeIDs<V12>::ID() );
    assert( _colTypes[12] == DbTypeIDs<V13>::ID() );
    assert( _colTypes[13] == DbTypeIDs<V14>::ID() );
    assert( _colTypes[14] == DbTypeIDs<V15>::ID() );
    assert( _colTypes[15] == DbTypeIDs<V16>::ID() );
    assert( _colTypes[16] == DbTypeIDs<V17>::ID() );
    assert( _colTypes[17] == DbTypeIDs<V18>::ID() );
    assert( _colTypes[18] == DbTypeIDs<V19>::ID() );
    assert( _colTypes[19] == DbTypeIDs<V20>::ID() );
    assert( _colTypes[20] == DbTypeIDs<V21>::ID() );
    assert( _colTypes[21] == DbTypeIDs<V22>::ID() );
    assert( _colTypes[22] == DbTypeIDs<V23>::ID() );
    assert( _colTypes[23] == DbTypeIDs<V24>::ID() );
    assert( _colTypes[24] == DbTypeIDs<V25>::ID() );
    assert( _colTypes[25] == DbTypeIDs<V26>::ID() );
    assert( _colTypes[26] == DbTypeIDs<V27>::ID() );
    assert( _colTypes[27] == DbTypeIDs<V28>::ID() );
    assert( _colTypes[28] == DbTypeIDs<V29>::ID() );
    assert( _colTypes[29] == DbTypeIDs<V30>::ID() );
    assert( _colTypes[30] == DbTypeIDs<V31>::ID() );
    assert( _colTypes[31] == DbTypeIDs<V32>::ID() );
    assert( _colTypes[32] == DbTypeIDs<V33>::ID() );
    assert( _colTypes[33] == DbTypeIDs<V34>::ID() );
    assert( _colTypes[34] == DbTypeIDs<V35>::ID() );
    assert( _colTypes[35] == DbTypeIDs<V36>::ID() );
    assert( _colTypes[36] == DbTypeIDs<V37>::ID() );
    assert( _colTypes[37] == DbTypeIDs<V38>::ID() );
    assert( _colTypes[38] == DbTypeIDs<V39>::ID() );
    assert( _colTypes[39] == DbTypeIDs<V40>::ID() );
    assert( _colTypes[40] == DbTypeIDs<V41>::ID() );
    assert( _colTypes[41] == DbTypeIDs<V42>::ID() );
    assert( _colTypes[42] == DbTypeIDs<V43>::ID() );
    assert( _colTypes[43] == DbTypeIDs<V44>::ID() );
    assert( _colTypes[44] == DbTypeIDs<V45>::ID() );
    assert( _colTypes[45] == DbTypeIDs<V46>::ID() );
    assert( _colTypes[46] == DbTypeIDs<V47>::ID() );
    assert( _colTypes[47] == DbTypeIDs<V48>::ID() );
    assert( _colTypes[48] == DbTypeIDs<V49>::ID() );
    assert( _colTypes[49] == DbTypeIDs<V50>::ID() );
    assert( _colTypes[50] == DbTypeIDs<V51>::ID() );
    assert( _colTypes[51] == DbTypeIDs<V52>::ID() );
    assert( _colTypes[52] == DbTypeIDs<V53>::ID() );
    assert( _colTypes[53] == DbTypeIDs<V54>::ID() );
    assert( _colTypes[54] == DbTypeIDs<V55>::ID() );
    assert( _colTypes[55] == DbTypeIDs<V56>::ID() );
    assert( _colTypes[56] == DbTypeIDs<V57>::ID() );
    assert( _colTypes[57] == DbTypeIDs<V58>::ID() );
    assert( _colTypes[58] == DbTypeIDs<V59>::ID() );
    assert( _colTypes[59] == DbTypeIDs<V60>::ID() );
    assert( _colTypes[60] == DbTypeIDs<V61>::ID() );
    assert( _colTypes[61] == DbTypeIDs<V62>::ID() );
    assert( _colTypes[62] == DbTypeIDs<V63>::ID() );
    assert( _colTypes[63] == DbTypeIDs<V64>::ID() );
    assert( _colTypes[64] == DbTypeIDs<V65>::ID() );
    assert( _colTypes[65] == DbTypeIDs<V66>::ID() );
    assert( _colTypes[66] == DbTypeIDs<V67>::ID() );
    assert( _colTypes[67] == DbTypeIDs<V68>::ID() );
    assert( _colTypes[68] == DbTypeIDs<V69>::ID() );
    assert( _colTypes[69] == DbTypeIDs<V70>::ID() );
    assert( _colTypes[70] == DbTypeIDs<V71>::ID() );
    assert( _colTypes[71] == DbTypeIDs<V72>::ID() );
    assert( _colTypes[72] == DbTypeIDs<V73>::ID() );
    assert( _colTypes[73] == DbTypeIDs<V74>::ID() );
    assert( _colTypes[74] == DbTypeIDs<V75>::ID() );
    assert( _colTypes[75] == DbTypeIDs<V76>::ID() );
    assert( _colTypes[76] == DbTypeIDs<V77>::ID() );
    assert( _colTypes[77] == DbTypeIDs<V78>::ID() );
    assert( _colTypes[78] == DbTypeIDs<V79>::ID() );
    assert( _colTypes[79] == DbTypeIDs<V80>::ID() );
    assert( _colTypes[80] == DbTypeIDs<V81>::ID() );
    assert( _colTypes[81] == DbTypeIDs<V82>::ID() );
    assert( _colTypes[82] == DbTypeIDs<V83>::ID() );
    assert( _colTypes[83] == DbTypeIDs<V84>::ID() );
    assert( _colTypes[84] == DbTypeIDs<V85>::ID() );
    assert( _colTypes[85] == DbTypeIDs<V86>::ID() );
    assert( _colTypes[86] == DbTypeIDs<V87>::ID() );
    assert( _colTypes[87] == DbTypeIDs<V88>::ID() );
    assert( _colTypes[88] == DbTypeIDs<V89>::ID() );
    ((List<V1>*)_colDatas[0])->Add(v1);
    ((List<V2>*)_colDatas[1])->Add(v2);
    ((List<V3>*)_colDatas[2])->Add(v3);
    ((List<V4>*)_colDatas[3])->Add(v4);
    ((List<V5>*)_colDatas[4])->Add(v5);
    ((List<V6>*)_colDatas[5])->Add(v6);
    ((List<V7>*)_colDatas[6])->Add(v7);
    ((List<V8>*)_colDatas[7])->Add(v8);
    ((List<V9>*)_colDatas[8])->Add(v9);
    ((List<V10>*)_colDatas[9])->Add(v10);
    ((List<V11>*)_colDatas[10])->Add(v11);
    ((List<V12>*)_colDatas[11])->Add(v12);
    ((List<V13>*)_colDatas[12])->Add(v13);
    ((List<V14>*)_colDatas[13])->Add(v14);
    ((List<V15>*)_colDatas[14])->Add(v15);
    ((List<V16>*)_colDatas[15])->Add(v16);
    ((List<V17>*)_colDatas[16])->Add(v17);
    ((List<V18>*)_colDatas[17])->Add(v18);
    ((List<V19>*)_colDatas[18])->Add(v19);
    ((List<V20>*)_colDatas[19])->Add(v20);
    ((List<V21>*)_colDatas[20])->Add(v21);
    ((List<V22>*)_colDatas[21])->Add(v22);
    ((List<V23>*)_colDatas[22])->Add(v23);
    ((List<V24>*)_colDatas[23])->Add(v24);
    ((List<V25>*)_colDatas[24])->Add(v25);
    ((List<V26>*)_colDatas[25])->Add(v26);
    ((List<V27>*)_colDatas[26])->Add(v27);
    ((List<V28>*)_colDatas[27])->Add(v28);
    ((List<V29>*)_colDatas[28])->Add(v29);
    ((List<V30>*)_colDatas[29])->Add(v30);
    ((List<V31>*)_colDatas[30])->Add(v31);
    ((List<V32>*)_colDatas[31])->Add(v32);
    ((List<V33>*)_colDatas[32])->Add(v33);
    ((List<V34>*)_colDatas[33])->Add(v34);
    ((List<V35>*)_colDatas[34])->Add(v35);
    ((List<V36>*)_colDatas[35])->Add(v36);
    ((List<V37>*)_colDatas[36])->Add(v37);
    ((List<V38>*)_colDatas[37])->Add(v38);
    ((List<V39>*)_colDatas[38])->Add(v39);
    ((List<V40>*)_colDatas[39])->Add(v40);
    ((List<V41>*)_colDatas[40])->Add(v41);
    ((List<V42>*)_colDatas[41])->Add(v42);
    ((List<V43>*)_colDatas[42])->Add(v43);
    ((List<V44>*)_colDatas[43])->Add(v44);
    ((List<V45>*)_colDatas[44])->Add(v45);
    ((List<V46>*)_colDatas[45])->Add(v46);
    ((List<V47>*)_colDatas[46])->Add(v47);
    ((List<V48>*)_colDatas[47])->Add(v48);
    ((List<V49>*)_colDatas[48])->Add(v49);
    ((List<V50>*)_colDatas[49])->Add(v50);
    ((List<V51>*)_colDatas[50])->Add(v51);
    ((List<V52>*)_colDatas[51])->Add(v52);
    ((List<V53>*)_colDatas[52])->Add(v53);
    ((List<V54>*)_colDatas[53])->Add(v54);
    ((List<V55>*)_colDatas[54])->Add(v55);
    ((List<V56>*)_colDatas[55])->Add(v56);
    ((List<V57>*)_colDatas[56])->Add(v57);
    ((List<V58>*)_colDatas[57])->Add(v58);
    ((List<V59>*)_colDatas[58])->Add(v59);
    ((List<V60>*)_colDatas[59])->Add(v60);
    ((List<V61>*)_colDatas[60])->Add(v61);
    ((List<V62>*)_colDatas[61])->Add(v62);
    ((List<V63>*)_colDatas[62])->Add(v63);
    ((List<V64>*)_colDatas[63])->Add(v64);
    ((List<V65>*)_colDatas[64])->Add(v65);
    ((List<V66>*)_colDatas[65])->Add(v66);
    ((List<V67>*)_colDatas[66])->Add(v67);
    ((List<V68>*)_colDatas[67])->Add(v68);
    ((List<V69>*)_colDatas[68])->Add(v69);
    ((List<V70>*)_colDatas[69])->Add(v70);
    ((List<V71>*)_colDatas[70])->Add(v71);
    ((List<V72>*)_colDatas[71])->Add(v72);
    ((List<V73>*)_colDatas[72])->Add(v73);
    ((List<V74>*)_colDatas[73])->Add(v74);
    ((List<V75>*)_colDatas[74])->Add(v75);
    ((List<V76>*)_colDatas[75])->Add(v76);
    ((List<V77>*)_colDatas[76])->Add(v77);
    ((List<V78>*)_colDatas[77])->Add(v78);
    ((List<V79>*)_colDatas[78])->Add(v79);
    ((List<V80>*)_colDatas[79])->Add(v80);
    ((List<V81>*)_colDatas[80])->Add(v81);
    ((List<V82>*)_colDatas[81])->Add(v82);
    ((List<V83>*)_colDatas[82])->Add(v83);
    ((List<V84>*)_colDatas[83])->Add(v84);
    ((List<V85>*)_colDatas[84])->Add(v85);
    ((List<V86>*)_colDatas[85])->Add(v86);
    ((List<V87>*)_colDatas[86])->Add(v87);
    ((List<V88>*)_colDatas[87])->Add(v88);
    ((List<V89>*)_colDatas[88])->Add(v89);
    ++_rowCount;
    return *this;
}
template<typename V1, typename V2, typename V3, typename V4, typename V5, typename V6, typename V7, typename V8, typename V9, typename V10, typename V11, typename V12, typename V13, typename V14, typename V15, typename V16, typename V17, typename V18, typename V19, typename V20, typename V21, typename V22, typename V23, typename V24, typename V25, typename V26, typename V27, typename V28, typename V29, typename V30, typename V31, typename V32, typename V33, typename V34, typename V35, typename V36, typename V37, typename V38, typename V39, typename V40, typename V41, typename V42, typename V43, typename V44, typename V45, typename V46, typename V47, typename V48, typename V49, typename V50, typename V51, typename V52, typename V53, typename V54, typename V55, typename V56, typename V57, typename V58, typename V59, typename V60, typename V61, typename V62, typename V63, typename V64, typename V65, typename V66, typename V67, typename V68, typename V69, typename V70, typename V71, typename V72, typename V73, typename V74, typename V75, typename V76, typename V77, typename V78, typename V79, typename V80, typename V81, typename V82, typename V83, typename V84, typename V85, typename V86, typename V87, typename V88, typename V89, typename V90>
DbTable & DbTable::AddRow(V1 const &v1, V2 const &v2, V3 const &v3, V4 const &v4, V5 const &v5, V6 const &v6, V7 const &v7, V8 const &v8, V9 const &v9, V10 const &v10, V11 const &v11, V12 const &v12, V13 const &v13, V14 const &v14, V15 const &v15, V16 const &v16, V17 const &v17, V18 const &v18, V19 const &v19, V20 const &v20, V21 const &v21, V22 const &v22, V23 const &v23, V24 const &v24, V25 const &v25, V26 const &v26, V27 const &v27, V28 const &v28, V29 const &v29, V30 const &v30, V31 const &v31, V32 const &v32, V33 const &v33, V34 const &v34, V35 const &v35, V36 const &v36, V37 const &v37, V38 const &v38, V39 const &v39, V40 const &v40, V41 const &v41, V42 const &v42, V43 const &v43, V44 const &v44, V45 const &v45, V46 const &v46, V47 const &v47, V48 const &v48, V49 const &v49, V50 const &v50, V51 const &v51, V52 const &v52, V53 const &v53, V54 const &v54, V55 const &v55, V56 const &v56, V57 const &v57, V58 const &v58, V59 const &v59, V60 const &v60, V61 const &v61, V62 const &v62, V63 const &v63, V64 const &v64, V65 const &v65, V66 const &v66, V67 const &v67, V68 const &v68, V69 const &v69, V70 const &v70, V71 const &v71, V72 const &v72, V73 const &v73, V74 const &v74, V75 const &v75, V76 const &v76, V77 const &v77, V78 const &v78, V79 const &v79, V80 const &v80, V81 const &v81, V82 const &v82, V83 const &v83, V84 const &v84, V85 const &v85, V86 const &v86, V87 const &v87, V88 const &v88, V89 const &v89, V90 const &v90) {
    assert( _colNames.Length() == 90 );
    assert( _colTypes[0] == DbTypeIDs<V1>::ID() );
    assert( _colTypes[1] == DbTypeIDs<V2>::ID() );
    assert( _colTypes[2] == DbTypeIDs<V3>::ID() );
    assert( _colTypes[3] == DbTypeIDs<V4>::ID() );
    assert( _colTypes[4] == DbTypeIDs<V5>::ID() );
    assert( _colTypes[5] == DbTypeIDs<V6>::ID() );
    assert( _colTypes[6] == DbTypeIDs<V7>::ID() );
    assert( _colTypes[7] == DbTypeIDs<V8>::ID() );
    assert( _colTypes[8] == DbTypeIDs<V9>::ID() );
    assert( _colTypes[9] == DbTypeIDs<V10>::ID() );
    assert( _colTypes[10] == DbTypeIDs<V11>::ID() );
    assert( _colTypes[11] == DbTypeIDs<V12>::ID() );
    assert( _colTypes[12] == DbTypeIDs<V13>::ID() );
    assert( _colTypes[13] == DbTypeIDs<V14>::ID() );
    assert( _colTypes[14] == DbTypeIDs<V15>::ID() );
    assert( _colTypes[15] == DbTypeIDs<V16>::ID() );
    assert( _colTypes[16] == DbTypeIDs<V17>::ID() );
    assert( _colTypes[17] == DbTypeIDs<V18>::ID() );
    assert( _colTypes[18] == DbTypeIDs<V19>::ID() );
    assert( _colTypes[19] == DbTypeIDs<V20>::ID() );
    assert( _colTypes[20] == DbTypeIDs<V21>::ID() );
    assert( _colTypes[21] == DbTypeIDs<V22>::ID() );
    assert( _colTypes[22] == DbTypeIDs<V23>::ID() );
    assert( _colTypes[23] == DbTypeIDs<V24>::ID() );
    assert( _colTypes[24] == DbTypeIDs<V25>::ID() );
    assert( _colTypes[25] == DbTypeIDs<V26>::ID() );
    assert( _colTypes[26] == DbTypeIDs<V27>::ID() );
    assert( _colTypes[27] == DbTypeIDs<V28>::ID() );
    assert( _colTypes[28] == DbTypeIDs<V29>::ID() );
    assert( _colTypes[29] == DbTypeIDs<V30>::ID() );
    assert( _colTypes[30] == DbTypeIDs<V31>::ID() );
    assert( _colTypes[31] == DbTypeIDs<V32>::ID() );
    assert( _colTypes[32] == DbTypeIDs<V33>::ID() );
    assert( _colTypes[33] == DbTypeIDs<V34>::ID() );
    assert( _colTypes[34] == DbTypeIDs<V35>::ID() );
    assert( _colTypes[35] == DbTypeIDs<V36>::ID() );
    assert( _colTypes[36] == DbTypeIDs<V37>::ID() );
    assert( _colTypes[37] == DbTypeIDs<V38>::ID() );
    assert( _colTypes[38] == DbTypeIDs<V39>::ID() );
    assert( _colTypes[39] == DbTypeIDs<V40>::ID() );
    assert( _colTypes[40] == DbTypeIDs<V41>::ID() );
    assert( _colTypes[41] == DbTypeIDs<V42>::ID() );
    assert( _colTypes[42] == DbTypeIDs<V43>::ID() );
    assert( _colTypes[43] == DbTypeIDs<V44>::ID() );
    assert( _colTypes[44] == DbTypeIDs<V45>::ID() );
    assert( _colTypes[45] == DbTypeIDs<V46>::ID() );
    assert( _colTypes[46] == DbTypeIDs<V47>::ID() );
    assert( _colTypes[47] == DbTypeIDs<V48>::ID() );
    assert( _colTypes[48] == DbTypeIDs<V49>::ID() );
    assert( _colTypes[49] == DbTypeIDs<V50>::ID() );
    assert( _colTypes[50] == DbTypeIDs<V51>::ID() );
    assert( _colTypes[51] == DbTypeIDs<V52>::ID() );
    assert( _colTypes[52] == DbTypeIDs<V53>::ID() );
    assert( _colTypes[53] == DbTypeIDs<V54>::ID() );
    assert( _colTypes[54] == DbTypeIDs<V55>::ID() );
    assert( _colTypes[55] == DbTypeIDs<V56>::ID() );
    assert( _colTypes[56] == DbTypeIDs<V57>::ID() );
    assert( _colTypes[57] == DbTypeIDs<V58>::ID() );
    assert( _colTypes[58] == DbTypeIDs<V59>::ID() );
    assert( _colTypes[59] == DbTypeIDs<V60>::ID() );
    assert( _colTypes[60] == DbTypeIDs<V61>::ID() );
    assert( _colTypes[61] == DbTypeIDs<V62>::ID() );
    assert( _colTypes[62] == DbTypeIDs<V63>::ID() );
    assert( _colTypes[63] == DbTypeIDs<V64>::ID() );
    assert( _colTypes[64] == DbTypeIDs<V65>::ID() );
    assert( _colTypes[65] == DbTypeIDs<V66>::ID() );
    assert( _colTypes[66] == DbTypeIDs<V67>::ID() );
    assert( _colTypes[67] == DbTypeIDs<V68>::ID() );
    assert( _colTypes[68] == DbTypeIDs<V69>::ID() );
    assert( _colTypes[69] == DbTypeIDs<V70>::ID() );
    assert( _colTypes[70] == DbTypeIDs<V71>::ID() );
    assert( _colTypes[71] == DbTypeIDs<V72>::ID() );
    assert( _colTypes[72] == DbTypeIDs<V73>::ID() );
    assert( _colTypes[73] == DbTypeIDs<V74>::ID() );
    assert( _colTypes[74] == DbTypeIDs<V75>::ID() );
    assert( _colTypes[75] == DbTypeIDs<V76>::ID() );
    assert( _colTypes[76] == DbTypeIDs<V77>::ID() );
    assert( _colTypes[77] == DbTypeIDs<V78>::ID() );
    assert( _colTypes[78] == DbTypeIDs<V79>::ID() );
    assert( _colTypes[79] == DbTypeIDs<V80>::ID() );
    assert( _colTypes[80] == DbTypeIDs<V81>::ID() );
    assert( _colTypes[81] == DbTypeIDs<V82>::ID() );
    assert( _colTypes[82] == DbTypeIDs<V83>::ID() );
    assert( _colTypes[83] == DbTypeIDs<V84>::ID() );
    assert( _colTypes[84] == DbTypeIDs<V85>::ID() );
    assert( _colTypes[85] == DbTypeIDs<V86>::ID() );
    assert( _colTypes[86] == DbTypeIDs<V87>::ID() );
    assert( _colTypes[87] == DbTypeIDs<V88>::ID() );
    assert( _colTypes[88] == DbTypeIDs<V89>::ID() );
    assert( _colTypes[89] == DbTypeIDs<V90>::ID() );
    ((List<V1>*)_colDatas[0])->Add(v1);
    ((List<V2>*)_colDatas[1])->Add(v2);
    ((List<V3>*)_colDatas[2])->Add(v3);
    ((List<V4>*)_colDatas[3])->Add(v4);
    ((List<V5>*)_colDatas[4])->Add(v5);
    ((List<V6>*)_colDatas[5])->Add(v6);
    ((List<V7>*)_colDatas[6])->Add(v7);
    ((List<V8>*)_colDatas[7])->Add(v8);
    ((List<V9>*)_colDatas[8])->Add(v9);
    ((List<V10>*)_colDatas[9])->Add(v10);
    ((List<V11>*)_colDatas[10])->Add(v11);
    ((List<V12>*)_colDatas[11])->Add(v12);
    ((List<V13>*)_colDatas[12])->Add(v13);
    ((List<V14>*)_colDatas[13])->Add(v14);
    ((List<V15>*)_colDatas[14])->Add(v15);
    ((List<V16>*)_colDatas[15])->Add(v16);
    ((List<V17>*)_colDatas[16])->Add(v17);
    ((List<V18>*)_colDatas[17])->Add(v18);
    ((List<V19>*)_colDatas[18])->Add(v19);
    ((List<V20>*)_colDatas[19])->Add(v20);
    ((List<V21>*)_colDatas[20])->Add(v21);
    ((List<V22>*)_colDatas[21])->Add(v22);
    ((List<V23>*)_colDatas[22])->Add(v23);
    ((List<V24>*)_colDatas[23])->Add(v24);
    ((List<V25>*)_colDatas[24])->Add(v25);
    ((List<V26>*)_colDatas[25])->Add(v26);
    ((List<V27>*)_colDatas[26])->Add(v27);
    ((List<V28>*)_colDatas[27])->Add(v28);
    ((List<V29>*)_colDatas[28])->Add(v29);
    ((List<V30>*)_colDatas[29])->Add(v30);
    ((List<V31>*)_colDatas[30])->Add(v31);
    ((List<V32>*)_colDatas[31])->Add(v32);
    ((List<V33>*)_colDatas[32])->Add(v33);
    ((List<V34>*)_colDatas[33])->Add(v34);
    ((List<V35>*)_colDatas[34])->Add(v35);
    ((List<V36>*)_colDatas[35])->Add(v36);
    ((List<V37>*)_colDatas[36])->Add(v37);
    ((List<V38>*)_colDatas[37])->Add(v38);
    ((List<V39>*)_colDatas[38])->Add(v39);
    ((List<V40>*)_colDatas[39])->Add(v40);
    ((List<V41>*)_colDatas[40])->Add(v41);
    ((List<V42>*)_colDatas[41])->Add(v42);
    ((List<V43>*)_colDatas[42])->Add(v43);
    ((List<V44>*)_colDatas[43])->Add(v44);
    ((List<V45>*)_colDatas[44])->Add(v45);
    ((List<V46>*)_colDatas[45])->Add(v46);
    ((List<V47>*)_colDatas[46])->Add(v47);
    ((List<V48>*)_colDatas[47])->Add(v48);
    ((List<V49>*)_colDatas[48])->Add(v49);
    ((List<V50>*)_colDatas[49])->Add(v50);
    ((List<V51>*)_colDatas[50])->Add(v51);
    ((List<V52>*)_colDatas[51])->Add(v52);
    ((List<V53>*)_colDatas[52])->Add(v53);
    ((List<V54>*)_colDatas[53])->Add(v54);
    ((List<V55>*)_colDatas[54])->Add(v55);
    ((List<V56>*)_colDatas[55])->Add(v56);
    ((List<V57>*)_colDatas[56])->Add(v57);
    ((List<V58>*)_colDatas[57])->Add(v58);
    ((List<V59>*)_colDatas[58])->Add(v59);
    ((List<V60>*)_colDatas[59])->Add(v60);
    ((List<V61>*)_colDatas[60])->Add(v61);
    ((List<V62>*)_colDatas[61])->Add(v62);
    ((List<V63>*)_colDatas[62])->Add(v63);
    ((List<V64>*)_colDatas[63])->Add(v64);
    ((List<V65>*)_colDatas[64])->Add(v65);
    ((List<V66>*)_colDatas[65])->Add(v66);
    ((List<V67>*)_colDatas[66])->Add(v67);
    ((List<V68>*)_colDatas[67])->Add(v68);
    ((List<V69>*)_colDatas[68])->Add(v69);
    ((List<V70>*)_colDatas[69])->Add(v70);
    ((List<V71>*)_colDatas[70])->Add(v71);
    ((List<V72>*)_colDatas[71])->Add(v72);
    ((List<V73>*)_colDatas[72])->Add(v73);
    ((List<V74>*)_colDatas[73])->Add(v74);
    ((List<V75>*)_colDatas[74])->Add(v75);
    ((List<V76>*)_colDatas[75])->Add(v76);
    ((List<V77>*)_colDatas[76])->Add(v77);
    ((List<V78>*)_colDatas[77])->Add(v78);
    ((List<V79>*)_colDatas[78])->Add(v79);
    ((List<V80>*)_colDatas[79])->Add(v80);
    ((List<V81>*)_colDatas[80])->Add(v81);
    ((List<V82>*)_colDatas[81])->Add(v82);
    ((List<V83>*)_colDatas[82])->Add(v83);
    ((List<V84>*)_colDatas[83])->Add(v84);
    ((List<V85>*)_colDatas[84])->Add(v85);
    ((List<V86>*)_colDatas[85])->Add(v86);
    ((List<V87>*)_colDatas[86])->Add(v87);
    ((List<V88>*)_colDatas[87])->Add(v88);
    ((List<V89>*)_colDatas[88])->Add(v89);
    ((List<V90>*)_colDatas[89])->Add(v90);
    ++_rowCount;
    return *this;
}
template<typename V1, typename V2, typename V3, typename V4, typename V5, typename V6, typename V7, typename V8, typename V9, typename V10, typename V11, typename V12, typename V13, typename V14, typename V15, typename V16, typename V17, typename V18, typename V19, typename V20, typename V21, typename V22, typename V23, typename V24, typename V25, typename V26, typename V27, typename V28, typename V29, typename V30, typename V31, typename V32, typename V33, typename V34, typename V35, typename V36, typename V37, typename V38, typename V39, typename V40, typename V41, typename V42, typename V43, typename V44, typename V45, typename V46, typename V47, typename V48, typename V49, typename V50, typename V51, typename V52, typename V53, typename V54, typename V55, typename V56, typename V57, typename V58, typename V59, typename V60, typename V61, typename V62, typename V63, typename V64, typename V65, typename V66, typename V67, typename V68, typename V69, typename V70, typename V71, typename V72, typename V73, typename V74, typename V75, typename V76, typename V77, typename V78, typename V79, typename V80, typename V81, typename V82, typename V83, typename V84, typename V85, typename V86, typename V87, typename V88, typename V89, typename V90, typename V91>
DbTable & DbTable::AddRow(V1 const &v1, V2 const &v2, V3 const &v3, V4 const &v4, V5 const &v5, V6 const &v6, V7 const &v7, V8 const &v8, V9 const &v9, V10 const &v10, V11 const &v11, V12 const &v12, V13 const &v13, V14 const &v14, V15 const &v15, V16 const &v16, V17 const &v17, V18 const &v18, V19 const &v19, V20 const &v20, V21 const &v21, V22 const &v22, V23 const &v23, V24 const &v24, V25 const &v25, V26 const &v26, V27 const &v27, V28 const &v28, V29 const &v29, V30 const &v30, V31 const &v31, V32 const &v32, V33 const &v33, V34 const &v34, V35 const &v35, V36 const &v36, V37 const &v37, V38 const &v38, V39 const &v39, V40 const &v40, V41 const &v41, V42 const &v42, V43 const &v43, V44 const &v44, V45 const &v45, V46 const &v46, V47 const &v47, V48 const &v48, V49 const &v49, V50 const &v50, V51 const &v51, V52 const &v52, V53 const &v53, V54 const &v54, V55 const &v55, V56 const &v56, V57 const &v57, V58 const &v58, V59 const &v59, V60 const &v60, V61 const &v61, V62 const &v62, V63 const &v63, V64 const &v64, V65 const &v65, V66 const &v66, V67 const &v67, V68 const &v68, V69 const &v69, V70 const &v70, V71 const &v71, V72 const &v72, V73 const &v73, V74 const &v74, V75 const &v75, V76 const &v76, V77 const &v77, V78 const &v78, V79 const &v79, V80 const &v80, V81 const &v81, V82 const &v82, V83 const &v83, V84 const &v84, V85 const &v85, V86 const &v86, V87 const &v87, V88 const &v88, V89 const &v89, V90 const &v90, V91 const &v91) {
    assert( _colNames.Length() == 91 );
    assert( _colTypes[0] == DbTypeIDs<V1>::ID() );
    assert( _colTypes[1] == DbTypeIDs<V2>::ID() );
    assert( _colTypes[2] == DbTypeIDs<V3>::ID() );
    assert( _colTypes[3] == DbTypeIDs<V4>::ID() );
    assert( _colTypes[4] == DbTypeIDs<V5>::ID() );
    assert( _colTypes[5] == DbTypeIDs<V6>::ID() );
    assert( _colTypes[6] == DbTypeIDs<V7>::ID() );
    assert( _colTypes[7] == DbTypeIDs<V8>::ID() );
    assert( _colTypes[8] == DbTypeIDs<V9>::ID() );
    assert( _colTypes[9] == DbTypeIDs<V10>::ID() );
    assert( _colTypes[10] == DbTypeIDs<V11>::ID() );
    assert( _colTypes[11] == DbTypeIDs<V12>::ID() );
    assert( _colTypes[12] == DbTypeIDs<V13>::ID() );
    assert( _colTypes[13] == DbTypeIDs<V14>::ID() );
    assert( _colTypes[14] == DbTypeIDs<V15>::ID() );
    assert( _colTypes[15] == DbTypeIDs<V16>::ID() );
    assert( _colTypes[16] == DbTypeIDs<V17>::ID() );
    assert( _colTypes[17] == DbTypeIDs<V18>::ID() );
    assert( _colTypes[18] == DbTypeIDs<V19>::ID() );
    assert( _colTypes[19] == DbTypeIDs<V20>::ID() );
    assert( _colTypes[20] == DbTypeIDs<V21>::ID() );
    assert( _colTypes[21] == DbTypeIDs<V22>::ID() );
    assert( _colTypes[22] == DbTypeIDs<V23>::ID() );
    assert( _colTypes[23] == DbTypeIDs<V24>::ID() );
    assert( _colTypes[24] == DbTypeIDs<V25>::ID() );
    assert( _colTypes[25] == DbTypeIDs<V26>::ID() );
    assert( _colTypes[26] == DbTypeIDs<V27>::ID() );
    assert( _colTypes[27] == DbTypeIDs<V28>::ID() );
    assert( _colTypes[28] == DbTypeIDs<V29>::ID() );
    assert( _colTypes[29] == DbTypeIDs<V30>::ID() );
    assert( _colTypes[30] == DbTypeIDs<V31>::ID() );
    assert( _colTypes[31] == DbTypeIDs<V32>::ID() );
    assert( _colTypes[32] == DbTypeIDs<V33>::ID() );
    assert( _colTypes[33] == DbTypeIDs<V34>::ID() );
    assert( _colTypes[34] == DbTypeIDs<V35>::ID() );
    assert( _colTypes[35] == DbTypeIDs<V36>::ID() );
    assert( _colTypes[36] == DbTypeIDs<V37>::ID() );
    assert( _colTypes[37] == DbTypeIDs<V38>::ID() );
    assert( _colTypes[38] == DbTypeIDs<V39>::ID() );
    assert( _colTypes[39] == DbTypeIDs<V40>::ID() );
    assert( _colTypes[40] == DbTypeIDs<V41>::ID() );
    assert( _colTypes[41] == DbTypeIDs<V42>::ID() );
    assert( _colTypes[42] == DbTypeIDs<V43>::ID() );
    assert( _colTypes[43] == DbTypeIDs<V44>::ID() );
    assert( _colTypes[44] == DbTypeIDs<V45>::ID() );
    assert( _colTypes[45] == DbTypeIDs<V46>::ID() );
    assert( _colTypes[46] == DbTypeIDs<V47>::ID() );
    assert( _colTypes[47] == DbTypeIDs<V48>::ID() );
    assert( _colTypes[48] == DbTypeIDs<V49>::ID() );
    assert( _colTypes[49] == DbTypeIDs<V50>::ID() );
    assert( _colTypes[50] == DbTypeIDs<V51>::ID() );
    assert( _colTypes[51] == DbTypeIDs<V52>::ID() );
    assert( _colTypes[52] == DbTypeIDs<V53>::ID() );
    assert( _colTypes[53] == DbTypeIDs<V54>::ID() );
    assert( _colTypes[54] == DbTypeIDs<V55>::ID() );
    assert( _colTypes[55] == DbTypeIDs<V56>::ID() );
    assert( _colTypes[56] == DbTypeIDs<V57>::ID() );
    assert( _colTypes[57] == DbTypeIDs<V58>::ID() );
    assert( _colTypes[58] == DbTypeIDs<V59>::ID() );
    assert( _colTypes[59] == DbTypeIDs<V60>::ID() );
    assert( _colTypes[60] == DbTypeIDs<V61>::ID() );
    assert( _colTypes[61] == DbTypeIDs<V62>::ID() );
    assert( _colTypes[62] == DbTypeIDs<V63>::ID() );
    assert( _colTypes[63] == DbTypeIDs<V64>::ID() );
    assert( _colTypes[64] == DbTypeIDs<V65>::ID() );
    assert( _colTypes[65] == DbTypeIDs<V66>::ID() );
    assert( _colTypes[66] == DbTypeIDs<V67>::ID() );
    assert( _colTypes[67] == DbTypeIDs<V68>::ID() );
    assert( _colTypes[68] == DbTypeIDs<V69>::ID() );
    assert( _colTypes[69] == DbTypeIDs<V70>::ID() );
    assert( _colTypes[70] == DbTypeIDs<V71>::ID() );
    assert( _colTypes[71] == DbTypeIDs<V72>::ID() );
    assert( _colTypes[72] == DbTypeIDs<V73>::ID() );
    assert( _colTypes[73] == DbTypeIDs<V74>::ID() );
    assert( _colTypes[74] == DbTypeIDs<V75>::ID() );
    assert( _colTypes[75] == DbTypeIDs<V76>::ID() );
    assert( _colTypes[76] == DbTypeIDs<V77>::ID() );
    assert( _colTypes[77] == DbTypeIDs<V78>::ID() );
    assert( _colTypes[78] == DbTypeIDs<V79>::ID() );
    assert( _colTypes[79] == DbTypeIDs<V80>::ID() );
    assert( _colTypes[80] == DbTypeIDs<V81>::ID() );
    assert( _colTypes[81] == DbTypeIDs<V82>::ID() );
    assert( _colTypes[82] == DbTypeIDs<V83>::ID() );
    assert( _colTypes[83] == DbTypeIDs<V84>::ID() );
    assert( _colTypes[84] == DbTypeIDs<V85>::ID() );
    assert( _colTypes[85] == DbTypeIDs<V86>::ID() );
    assert( _colTypes[86] == DbTypeIDs<V87>::ID() );
    assert( _colTypes[87] == DbTypeIDs<V88>::ID() );
    assert( _colTypes[88] == DbTypeIDs<V89>::ID() );
    assert( _colTypes[89] == DbTypeIDs<V90>::ID() );
    assert( _colTypes[90] == DbTypeIDs<V91>::ID() );
    ((List<V1>*)_colDatas[0])->Add(v1);
    ((List<V2>*)_colDatas[1])->Add(v2);
    ((List<V3>*)_colDatas[2])->Add(v3);
    ((List<V4>*)_colDatas[3])->Add(v4);
    ((List<V5>*)_colDatas[4])->Add(v5);
    ((List<V6>*)_colDatas[5])->Add(v6);
    ((List<V7>*)_colDatas[6])->Add(v7);
    ((List<V8>*)_colDatas[7])->Add(v8);
    ((List<V9>*)_colDatas[8])->Add(v9);
    ((List<V10>*)_colDatas[9])->Add(v10);
    ((List<V11>*)_colDatas[10])->Add(v11);
    ((List<V12>*)_colDatas[11])->Add(v12);
    ((List<V13>*)_colDatas[12])->Add(v13);
    ((List<V14>*)_colDatas[13])->Add(v14);
    ((List<V15>*)_colDatas[14])->Add(v15);
    ((List<V16>*)_colDatas[15])->Add(v16);
    ((List<V17>*)_colDatas[16])->Add(v17);
    ((List<V18>*)_colDatas[17])->Add(v18);
    ((List<V19>*)_colDatas[18])->Add(v19);
    ((List<V20>*)_colDatas[19])->Add(v20);
    ((List<V21>*)_colDatas[20])->Add(v21);
    ((List<V22>*)_colDatas[21])->Add(v22);
    ((List<V23>*)_colDatas[22])->Add(v23);
    ((List<V24>*)_colDatas[23])->Add(v24);
    ((List<V25>*)_colDatas[24])->Add(v25);
    ((List<V26>*)_colDatas[25])->Add(v26);
    ((List<V27>*)_colDatas[26])->Add(v27);
    ((List<V28>*)_colDatas[27])->Add(v28);
    ((List<V29>*)_colDatas[28])->Add(v29);
    ((List<V30>*)_colDatas[29])->Add(v30);
    ((List<V31>*)_colDatas[30])->Add(v31);
    ((List<V32>*)_colDatas[31])->Add(v32);
    ((List<V33>*)_colDatas[32])->Add(v33);
    ((List<V34>*)_colDatas[33])->Add(v34);
    ((List<V35>*)_colDatas[34])->Add(v35);
    ((List<V36>*)_colDatas[35])->Add(v36);
    ((List<V37>*)_colDatas[36])->Add(v37);
    ((List<V38>*)_colDatas[37])->Add(v38);
    ((List<V39>*)_colDatas[38])->Add(v39);
    ((List<V40>*)_colDatas[39])->Add(v40);
    ((List<V41>*)_colDatas[40])->Add(v41);
    ((List<V42>*)_colDatas[41])->Add(v42);
    ((List<V43>*)_colDatas[42])->Add(v43);
    ((List<V44>*)_colDatas[43])->Add(v44);
    ((List<V45>*)_colDatas[44])->Add(v45);
    ((List<V46>*)_colDatas[45])->Add(v46);
    ((List<V47>*)_colDatas[46])->Add(v47);
    ((List<V48>*)_colDatas[47])->Add(v48);
    ((List<V49>*)_colDatas[48])->Add(v49);
    ((List<V50>*)_colDatas[49])->Add(v50);
    ((List<V51>*)_colDatas[50])->Add(v51);
    ((List<V52>*)_colDatas[51])->Add(v52);
    ((List<V53>*)_colDatas[52])->Add(v53);
    ((List<V54>*)_colDatas[53])->Add(v54);
    ((List<V55>*)_colDatas[54])->Add(v55);
    ((List<V56>*)_colDatas[55])->Add(v56);
    ((List<V57>*)_colDatas[56])->Add(v57);
    ((List<V58>*)_colDatas[57])->Add(v58);
    ((List<V59>*)_colDatas[58])->Add(v59);
    ((List<V60>*)_colDatas[59])->Add(v60);
    ((List<V61>*)_colDatas[60])->Add(v61);
    ((List<V62>*)_colDatas[61])->Add(v62);
    ((List<V63>*)_colDatas[62])->Add(v63);
    ((List<V64>*)_colDatas[63])->Add(v64);
    ((List<V65>*)_colDatas[64])->Add(v65);
    ((List<V66>*)_colDatas[65])->Add(v66);
    ((List<V67>*)_colDatas[66])->Add(v67);
    ((List<V68>*)_colDatas[67])->Add(v68);
    ((List<V69>*)_colDatas[68])->Add(v69);
    ((List<V70>*)_colDatas[69])->Add(v70);
    ((List<V71>*)_colDatas[70])->Add(v71);
    ((List<V72>*)_colDatas[71])->Add(v72);
    ((List<V73>*)_colDatas[72])->Add(v73);
    ((List<V74>*)_colDatas[73])->Add(v74);
    ((List<V75>*)_colDatas[74])->Add(v75);
    ((List<V76>*)_colDatas[75])->Add(v76);
    ((List<V77>*)_colDatas[76])->Add(v77);
    ((List<V78>*)_colDatas[77])->Add(v78);
    ((List<V79>*)_colDatas[78])->Add(v79);
    ((List<V80>*)_colDatas[79])->Add(v80);
    ((List<V81>*)_colDatas[80])->Add(v81);
    ((List<V82>*)_colDatas[81])->Add(v82);
    ((List<V83>*)_colDatas[82])->Add(v83);
    ((List<V84>*)_colDatas[83])->Add(v84);
    ((List<V85>*)_colDatas[84])->Add(v85);
    ((List<V86>*)_colDatas[85])->Add(v86);
    ((List<V87>*)_colDatas[86])->Add(v87);
    ((List<V88>*)_colDatas[87])->Add(v88);
    ((List<V89>*)_colDatas[88])->Add(v89);
    ((List<V90>*)_colDatas[89])->Add(v90);
    ((List<V91>*)_colDatas[90])->Add(v91);
    ++_rowCount;
    return *this;
}
template<typename V1, typename V2, typename V3, typename V4, typename V5, typename V6, typename V7, typename V8, typename V9, typename V10, typename V11, typename V12, typename V13, typename V14, typename V15, typename V16, typename V17, typename V18, typename V19, typename V20, typename V21, typename V22, typename V23, typename V24, typename V25, typename V26, typename V27, typename V28, typename V29, typename V30, typename V31, typename V32, typename V33, typename V34, typename V35, typename V36, typename V37, typename V38, typename V39, typename V40, typename V41, typename V42, typename V43, typename V44, typename V45, typename V46, typename V47, typename V48, typename V49, typename V50, typename V51, typename V52, typename V53, typename V54, typename V55, typename V56, typename V57, typename V58, typename V59, typename V60, typename V61, typename V62, typename V63, typename V64, typename V65, typename V66, typename V67, typename V68, typename V69, typename V70, typename V71, typename V72, typename V73, typename V74, typename V75, typename V76, typename V77, typename V78, typename V79, typename V80, typename V81, typename V82, typename V83, typename V84, typename V85, typename V86, typename V87, typename V88, typename V89, typename V90, typename V91, typename V92>
DbTable & DbTable::AddRow(V1 const &v1, V2 const &v2, V3 const &v3, V4 const &v4, V5 const &v5, V6 const &v6, V7 const &v7, V8 const &v8, V9 const &v9, V10 const &v10, V11 const &v11, V12 const &v12, V13 const &v13, V14 const &v14, V15 const &v15, V16 const &v16, V17 const &v17, V18 const &v18, V19 const &v19, V20 const &v20, V21 const &v21, V22 const &v22, V23 const &v23, V24 const &v24, V25 const &v25, V26 const &v26, V27 const &v27, V28 const &v28, V29 const &v29, V30 const &v30, V31 const &v31, V32 const &v32, V33 const &v33, V34 const &v34, V35 const &v35, V36 const &v36, V37 const &v37, V38 const &v38, V39 const &v39, V40 const &v40, V41 const &v41, V42 const &v42, V43 const &v43, V44 const &v44, V45 const &v45, V46 const &v46, V47 const &v47, V48 const &v48, V49 const &v49, V50 const &v50, V51 const &v51, V52 const &v52, V53 const &v53, V54 const &v54, V55 const &v55, V56 const &v56, V57 const &v57, V58 const &v58, V59 const &v59, V60 const &v60, V61 const &v61, V62 const &v62, V63 const &v63, V64 const &v64, V65 const &v65, V66 const &v66, V67 const &v67, V68 const &v68, V69 const &v69, V70 const &v70, V71 const &v71, V72 const &v72, V73 const &v73, V74 const &v74, V75 const &v75, V76 const &v76, V77 const &v77, V78 const &v78, V79 const &v79, V80 const &v80, V81 const &v81, V82 const &v82, V83 const &v83, V84 const &v84, V85 const &v85, V86 const &v86, V87 const &v87, V88 const &v88, V89 const &v89, V90 const &v90, V91 const &v91, V92 const &v92) {
    assert( _colNames.Length() == 92 );
    assert( _colTypes[0] == DbTypeIDs<V1>::ID() );
    assert( _colTypes[1] == DbTypeIDs<V2>::ID() );
    assert( _colTypes[2] == DbTypeIDs<V3>::ID() );
    assert( _colTypes[3] == DbTypeIDs<V4>::ID() );
    assert( _colTypes[4] == DbTypeIDs<V5>::ID() );
    assert( _colTypes[5] == DbTypeIDs<V6>::ID() );
    assert( _colTypes[6] == DbTypeIDs<V7>::ID() );
    assert( _colTypes[7] == DbTypeIDs<V8>::ID() );
    assert( _colTypes[8] == DbTypeIDs<V9>::ID() );
    assert( _colTypes[9] == DbTypeIDs<V10>::ID() );
    assert( _colTypes[10] == DbTypeIDs<V11>::ID() );
    assert( _colTypes[11] == DbTypeIDs<V12>::ID() );
    assert( _colTypes[12] == DbTypeIDs<V13>::ID() );
    assert( _colTypes[13] == DbTypeIDs<V14>::ID() );
    assert( _colTypes[14] == DbTypeIDs<V15>::ID() );
    assert( _colTypes[15] == DbTypeIDs<V16>::ID() );
    assert( _colTypes[16] == DbTypeIDs<V17>::ID() );
    assert( _colTypes[17] == DbTypeIDs<V18>::ID() );
    assert( _colTypes[18] == DbTypeIDs<V19>::ID() );
    assert( _colTypes[19] == DbTypeIDs<V20>::ID() );
    assert( _colTypes[20] == DbTypeIDs<V21>::ID() );
    assert( _colTypes[21] == DbTypeIDs<V22>::ID() );
    assert( _colTypes[22] == DbTypeIDs<V23>::ID() );
    assert( _colTypes[23] == DbTypeIDs<V24>::ID() );
    assert( _colTypes[24] == DbTypeIDs<V25>::ID() );
    assert( _colTypes[25] == DbTypeIDs<V26>::ID() );
    assert( _colTypes[26] == DbTypeIDs<V27>::ID() );
    assert( _colTypes[27] == DbTypeIDs<V28>::ID() );
    assert( _colTypes[28] == DbTypeIDs<V29>::ID() );
    assert( _colTypes[29] == DbTypeIDs<V30>::ID() );
    assert( _colTypes[30] == DbTypeIDs<V31>::ID() );
    assert( _colTypes[31] == DbTypeIDs<V32>::ID() );
    assert( _colTypes[32] == DbTypeIDs<V33>::ID() );
    assert( _colTypes[33] == DbTypeIDs<V34>::ID() );
    assert( _colTypes[34] == DbTypeIDs<V35>::ID() );
    assert( _colTypes[35] == DbTypeIDs<V36>::ID() );
    assert( _colTypes[36] == DbTypeIDs<V37>::ID() );
    assert( _colTypes[37] == DbTypeIDs<V38>::ID() );
    assert( _colTypes[38] == DbTypeIDs<V39>::ID() );
    assert( _colTypes[39] == DbTypeIDs<V40>::ID() );
    assert( _colTypes[40] == DbTypeIDs<V41>::ID() );
    assert( _colTypes[41] == DbTypeIDs<V42>::ID() );
    assert( _colTypes[42] == DbTypeIDs<V43>::ID() );
    assert( _colTypes[43] == DbTypeIDs<V44>::ID() );
    assert( _colTypes[44] == DbTypeIDs<V45>::ID() );
    assert( _colTypes[45] == DbTypeIDs<V46>::ID() );
    assert( _colTypes[46] == DbTypeIDs<V47>::ID() );
    assert( _colTypes[47] == DbTypeIDs<V48>::ID() );
    assert( _colTypes[48] == DbTypeIDs<V49>::ID() );
    assert( _colTypes[49] == DbTypeIDs<V50>::ID() );
    assert( _colTypes[50] == DbTypeIDs<V51>::ID() );
    assert( _colTypes[51] == DbTypeIDs<V52>::ID() );
    assert( _colTypes[52] == DbTypeIDs<V53>::ID() );
    assert( _colTypes[53] == DbTypeIDs<V54>::ID() );
    assert( _colTypes[54] == DbTypeIDs<V55>::ID() );
    assert( _colTypes[55] == DbTypeIDs<V56>::ID() );
    assert( _colTypes[56] == DbTypeIDs<V57>::ID() );
    assert( _colTypes[57] == DbTypeIDs<V58>::ID() );
    assert( _colTypes[58] == DbTypeIDs<V59>::ID() );
    assert( _colTypes[59] == DbTypeIDs<V60>::ID() );
    assert( _colTypes[60] == DbTypeIDs<V61>::ID() );
    assert( _colTypes[61] == DbTypeIDs<V62>::ID() );
    assert( _colTypes[62] == DbTypeIDs<V63>::ID() );
    assert( _colTypes[63] == DbTypeIDs<V64>::ID() );
    assert( _colTypes[64] == DbTypeIDs<V65>::ID() );
    assert( _colTypes[65] == DbTypeIDs<V66>::ID() );
    assert( _colTypes[66] == DbTypeIDs<V67>::ID() );
    assert( _colTypes[67] == DbTypeIDs<V68>::ID() );
    assert( _colTypes[68] == DbTypeIDs<V69>::ID() );
    assert( _colTypes[69] == DbTypeIDs<V70>::ID() );
    assert( _colTypes[70] == DbTypeIDs<V71>::ID() );
    assert( _colTypes[71] == DbTypeIDs<V72>::ID() );
    assert( _colTypes[72] == DbTypeIDs<V73>::ID() );
    assert( _colTypes[73] == DbTypeIDs<V74>::ID() );
    assert( _colTypes[74] == DbTypeIDs<V75>::ID() );
    assert( _colTypes[75] == DbTypeIDs<V76>::ID() );
    assert( _colTypes[76] == DbTypeIDs<V77>::ID() );
    assert( _colTypes[77] == DbTypeIDs<V78>::ID() );
    assert( _colTypes[78] == DbTypeIDs<V79>::ID() );
    assert( _colTypes[79] == DbTypeIDs<V80>::ID() );
    assert( _colTypes[80] == DbTypeIDs<V81>::ID() );
    assert( _colTypes[81] == DbTypeIDs<V82>::ID() );
    assert( _colTypes[82] == DbTypeIDs<V83>::ID() );
    assert( _colTypes[83] == DbTypeIDs<V84>::ID() );
    assert( _colTypes[84] == DbTypeIDs<V85>::ID() );
    assert( _colTypes[85] == DbTypeIDs<V86>::ID() );
    assert( _colTypes[86] == DbTypeIDs<V87>::ID() );
    assert( _colTypes[87] == DbTypeIDs<V88>::ID() );
    assert( _colTypes[88] == DbTypeIDs<V89>::ID() );
    assert( _colTypes[89] == DbTypeIDs<V90>::ID() );
    assert( _colTypes[90] == DbTypeIDs<V91>::ID() );
    assert( _colTypes[91] == DbTypeIDs<V92>::ID() );
    ((List<V1>*)_colDatas[0])->Add(v1);
    ((List<V2>*)_colDatas[1])->Add(v2);
    ((List<V3>*)_colDatas[2])->Add(v3);
    ((List<V4>*)_colDatas[3])->Add(v4);
    ((List<V5>*)_colDatas[4])->Add(v5);
    ((List<V6>*)_colDatas[5])->Add(v6);
    ((List<V7>*)_colDatas[6])->Add(v7);
    ((List<V8>*)_colDatas[7])->Add(v8);
    ((List<V9>*)_colDatas[8])->Add(v9);
    ((List<V10>*)_colDatas[9])->Add(v10);
    ((List<V11>*)_colDatas[10])->Add(v11);
    ((List<V12>*)_colDatas[11])->Add(v12);
    ((List<V13>*)_colDatas[12])->Add(v13);
    ((List<V14>*)_colDatas[13])->Add(v14);
    ((List<V15>*)_colDatas[14])->Add(v15);
    ((List<V16>*)_colDatas[15])->Add(v16);
    ((List<V17>*)_colDatas[16])->Add(v17);
    ((List<V18>*)_colDatas[17])->Add(v18);
    ((List<V19>*)_colDatas[18])->Add(v19);
    ((List<V20>*)_colDatas[19])->Add(v20);
    ((List<V21>*)_colDatas[20])->Add(v21);
    ((List<V22>*)_colDatas[21])->Add(v22);
    ((List<V23>*)_colDatas[22])->Add(v23);
    ((List<V24>*)_colDatas[23])->Add(v24);
    ((List<V25>*)_colDatas[24])->Add(v25);
    ((List<V26>*)_colDatas[25])->Add(v26);
    ((List<V27>*)_colDatas[26])->Add(v27);
    ((List<V28>*)_colDatas[27])->Add(v28);
    ((List<V29>*)_colDatas[28])->Add(v29);
    ((List<V30>*)_colDatas[29])->Add(v30);
    ((List<V31>*)_colDatas[30])->Add(v31);
    ((List<V32>*)_colDatas[31])->Add(v32);
    ((List<V33>*)_colDatas[32])->Add(v33);
    ((List<V34>*)_colDatas[33])->Add(v34);
    ((List<V35>*)_colDatas[34])->Add(v35);
    ((List<V36>*)_colDatas[35])->Add(v36);
    ((List<V37>*)_colDatas[36])->Add(v37);
    ((List<V38>*)_colDatas[37])->Add(v38);
    ((List<V39>*)_colDatas[38])->Add(v39);
    ((List<V40>*)_colDatas[39])->Add(v40);
    ((List<V41>*)_colDatas[40])->Add(v41);
    ((List<V42>*)_colDatas[41])->Add(v42);
    ((List<V43>*)_colDatas[42])->Add(v43);
    ((List<V44>*)_colDatas[43])->Add(v44);
    ((List<V45>*)_colDatas[44])->Add(v45);
    ((List<V46>*)_colDatas[45])->Add(v46);
    ((List<V47>*)_colDatas[46])->Add(v47);
    ((List<V48>*)_colDatas[47])->Add(v48);
    ((List<V49>*)_colDatas[48])->Add(v49);
    ((List<V50>*)_colDatas[49])->Add(v50);
    ((List<V51>*)_colDatas[50])->Add(v51);
    ((List<V52>*)_colDatas[51])->Add(v52);
    ((List<V53>*)_colDatas[52])->Add(v53);
    ((List<V54>*)_colDatas[53])->Add(v54);
    ((List<V55>*)_colDatas[54])->Add(v55);
    ((List<V56>*)_colDatas[55])->Add(v56);
    ((List<V57>*)_colDatas[56])->Add(v57);
    ((List<V58>*)_colDatas[57])->Add(v58);
    ((List<V59>*)_colDatas[58])->Add(v59);
    ((List<V60>*)_colDatas[59])->Add(v60);
    ((List<V61>*)_colDatas[60])->Add(v61);
    ((List<V62>*)_colDatas[61])->Add(v62);
    ((List<V63>*)_colDatas[62])->Add(v63);
    ((List<V64>*)_colDatas[63])->Add(v64);
    ((List<V65>*)_colDatas[64])->Add(v65);
    ((List<V66>*)_colDatas[65])->Add(v66);
    ((List<V67>*)_colDatas[66])->Add(v67);
    ((List<V68>*)_colDatas[67])->Add(v68);
    ((List<V69>*)_colDatas[68])->Add(v69);
    ((List<V70>*)_colDatas[69])->Add(v70);
    ((List<V71>*)_colDatas[70])->Add(v71);
    ((List<V72>*)_colDatas[71])->Add(v72);
    ((List<V73>*)_colDatas[72])->Add(v73);
    ((List<V74>*)_colDatas[73])->Add(v74);
    ((List<V75>*)_colDatas[74])->Add(v75);
    ((List<V76>*)_colDatas[75])->Add(v76);
    ((List<V77>*)_colDatas[76])->Add(v77);
    ((List<V78>*)_colDatas[77])->Add(v78);
    ((List<V79>*)_colDatas[78])->Add(v79);
    ((List<V80>*)_colDatas[79])->Add(v80);
    ((List<V81>*)_colDatas[80])->Add(v81);
    ((List<V82>*)_colDatas[81])->Add(v82);
    ((List<V83>*)_colDatas[82])->Add(v83);
    ((List<V84>*)_colDatas[83])->Add(v84);
    ((List<V85>*)_colDatas[84])->Add(v85);
    ((List<V86>*)_colDatas[85])->Add(v86);
    ((List<V87>*)_colDatas[86])->Add(v87);
    ((List<V88>*)_colDatas[87])->Add(v88);
    ((List<V89>*)_colDatas[88])->Add(v89);
    ((List<V90>*)_colDatas[89])->Add(v90);
    ((List<V91>*)_colDatas[90])->Add(v91);
    ((List<V92>*)_colDatas[91])->Add(v92);
    ++_rowCount;
    return *this;
}
template<typename V1, typename V2, typename V3, typename V4, typename V5, typename V6, typename V7, typename V8, typename V9, typename V10, typename V11, typename V12, typename V13, typename V14, typename V15, typename V16, typename V17, typename V18, typename V19, typename V20, typename V21, typename V22, typename V23, typename V24, typename V25, typename V26, typename V27, typename V28, typename V29, typename V30, typename V31, typename V32, typename V33, typename V34, typename V35, typename V36, typename V37, typename V38, typename V39, typename V40, typename V41, typename V42, typename V43, typename V44, typename V45, typename V46, typename V47, typename V48, typename V49, typename V50, typename V51, typename V52, typename V53, typename V54, typename V55, typename V56, typename V57, typename V58, typename V59, typename V60, typename V61, typename V62, typename V63, typename V64, typename V65, typename V66, typename V67, typename V68, typename V69, typename V70, typename V71, typename V72, typename V73, typename V74, typename V75, typename V76, typename V77, typename V78, typename V79, typename V80, typename V81, typename V82, typename V83, typename V84, typename V85, typename V86, typename V87, typename V88, typename V89, typename V90, typename V91, typename V92, typename V93>
DbTable & DbTable::AddRow(V1 const &v1, V2 const &v2, V3 const &v3, V4 const &v4, V5 const &v5, V6 const &v6, V7 const &v7, V8 const &v8, V9 const &v9, V10 const &v10, V11 const &v11, V12 const &v12, V13 const &v13, V14 const &v14, V15 const &v15, V16 const &v16, V17 const &v17, V18 const &v18, V19 const &v19, V20 const &v20, V21 const &v21, V22 const &v22, V23 const &v23, V24 const &v24, V25 const &v25, V26 const &v26, V27 const &v27, V28 const &v28, V29 const &v29, V30 const &v30, V31 const &v31, V32 const &v32, V33 const &v33, V34 const &v34, V35 const &v35, V36 const &v36, V37 const &v37, V38 const &v38, V39 const &v39, V40 const &v40, V41 const &v41, V42 const &v42, V43 const &v43, V44 const &v44, V45 const &v45, V46 const &v46, V47 const &v47, V48 const &v48, V49 const &v49, V50 const &v50, V51 const &v51, V52 const &v52, V53 const &v53, V54 const &v54, V55 const &v55, V56 const &v56, V57 const &v57, V58 const &v58, V59 const &v59, V60 const &v60, V61 const &v61, V62 const &v62, V63 const &v63, V64 const &v64, V65 const &v65, V66 const &v66, V67 const &v67, V68 const &v68, V69 const &v69, V70 const &v70, V71 const &v71, V72 const &v72, V73 const &v73, V74 const &v74, V75 const &v75, V76 const &v76, V77 const &v77, V78 const &v78, V79 const &v79, V80 const &v80, V81 const &v81, V82 const &v82, V83 const &v83, V84 const &v84, V85 const &v85, V86 const &v86, V87 const &v87, V88 const &v88, V89 const &v89, V90 const &v90, V91 const &v91, V92 const &v92, V93 const &v93) {
    assert( _colNames.Length() == 93 );
    assert( _colTypes[0] == DbTypeIDs<V1>::ID() );
    assert( _colTypes[1] == DbTypeIDs<V2>::ID() );
    assert( _colTypes[2] == DbTypeIDs<V3>::ID() );
    assert( _colTypes[3] == DbTypeIDs<V4>::ID() );
    assert( _colTypes[4] == DbTypeIDs<V5>::ID() );
    assert( _colTypes[5] == DbTypeIDs<V6>::ID() );
    assert( _colTypes[6] == DbTypeIDs<V7>::ID() );
    assert( _colTypes[7] == DbTypeIDs<V8>::ID() );
    assert( _colTypes[8] == DbTypeIDs<V9>::ID() );
    assert( _colTypes[9] == DbTypeIDs<V10>::ID() );
    assert( _colTypes[10] == DbTypeIDs<V11>::ID() );
    assert( _colTypes[11] == DbTypeIDs<V12>::ID() );
    assert( _colTypes[12] == DbTypeIDs<V13>::ID() );
    assert( _colTypes[13] == DbTypeIDs<V14>::ID() );
    assert( _colTypes[14] == DbTypeIDs<V15>::ID() );
    assert( _colTypes[15] == DbTypeIDs<V16>::ID() );
    assert( _colTypes[16] == DbTypeIDs<V17>::ID() );
    assert( _colTypes[17] == DbTypeIDs<V18>::ID() );
    assert( _colTypes[18] == DbTypeIDs<V19>::ID() );
    assert( _colTypes[19] == DbTypeIDs<V20>::ID() );
    assert( _colTypes[20] == DbTypeIDs<V21>::ID() );
    assert( _colTypes[21] == DbTypeIDs<V22>::ID() );
    assert( _colTypes[22] == DbTypeIDs<V23>::ID() );
    assert( _colTypes[23] == DbTypeIDs<V24>::ID() );
    assert( _colTypes[24] == DbTypeIDs<V25>::ID() );
    assert( _colTypes[25] == DbTypeIDs<V26>::ID() );
    assert( _colTypes[26] == DbTypeIDs<V27>::ID() );
    assert( _colTypes[27] == DbTypeIDs<V28>::ID() );
    assert( _colTypes[28] == DbTypeIDs<V29>::ID() );
    assert( _colTypes[29] == DbTypeIDs<V30>::ID() );
    assert( _colTypes[30] == DbTypeIDs<V31>::ID() );
    assert( _colTypes[31] == DbTypeIDs<V32>::ID() );
    assert( _colTypes[32] == DbTypeIDs<V33>::ID() );
    assert( _colTypes[33] == DbTypeIDs<V34>::ID() );
    assert( _colTypes[34] == DbTypeIDs<V35>::ID() );
    assert( _colTypes[35] == DbTypeIDs<V36>::ID() );
    assert( _colTypes[36] == DbTypeIDs<V37>::ID() );
    assert( _colTypes[37] == DbTypeIDs<V38>::ID() );
    assert( _colTypes[38] == DbTypeIDs<V39>::ID() );
    assert( _colTypes[39] == DbTypeIDs<V40>::ID() );
    assert( _colTypes[40] == DbTypeIDs<V41>::ID() );
    assert( _colTypes[41] == DbTypeIDs<V42>::ID() );
    assert( _colTypes[42] == DbTypeIDs<V43>::ID() );
    assert( _colTypes[43] == DbTypeIDs<V44>::ID() );
    assert( _colTypes[44] == DbTypeIDs<V45>::ID() );
    assert( _colTypes[45] == DbTypeIDs<V46>::ID() );
    assert( _colTypes[46] == DbTypeIDs<V47>::ID() );
    assert( _colTypes[47] == DbTypeIDs<V48>::ID() );
    assert( _colTypes[48] == DbTypeIDs<V49>::ID() );
    assert( _colTypes[49] == DbTypeIDs<V50>::ID() );
    assert( _colTypes[50] == DbTypeIDs<V51>::ID() );
    assert( _colTypes[51] == DbTypeIDs<V52>::ID() );
    assert( _colTypes[52] == DbTypeIDs<V53>::ID() );
    assert( _colTypes[53] == DbTypeIDs<V54>::ID() );
    assert( _colTypes[54] == DbTypeIDs<V55>::ID() );
    assert( _colTypes[55] == DbTypeIDs<V56>::ID() );
    assert( _colTypes[56] == DbTypeIDs<V57>::ID() );
    assert( _colTypes[57] == DbTypeIDs<V58>::ID() );
    assert( _colTypes[58] == DbTypeIDs<V59>::ID() );
    assert( _colTypes[59] == DbTypeIDs<V60>::ID() );
    assert( _colTypes[60] == DbTypeIDs<V61>::ID() );
    assert( _colTypes[61] == DbTypeIDs<V62>::ID() );
    assert( _colTypes[62] == DbTypeIDs<V63>::ID() );
    assert( _colTypes[63] == DbTypeIDs<V64>::ID() );
    assert( _colTypes[64] == DbTypeIDs<V65>::ID() );
    assert( _colTypes[65] == DbTypeIDs<V66>::ID() );
    assert( _colTypes[66] == DbTypeIDs<V67>::ID() );
    assert( _colTypes[67] == DbTypeIDs<V68>::ID() );
    assert( _colTypes[68] == DbTypeIDs<V69>::ID() );
    assert( _colTypes[69] == DbTypeIDs<V70>::ID() );
    assert( _colTypes[70] == DbTypeIDs<V71>::ID() );
    assert( _colTypes[71] == DbTypeIDs<V72>::ID() );
    assert( _colTypes[72] == DbTypeIDs<V73>::ID() );
    assert( _colTypes[73] == DbTypeIDs<V74>::ID() );
    assert( _colTypes[74] == DbTypeIDs<V75>::ID() );
    assert( _colTypes[75] == DbTypeIDs<V76>::ID() );
    assert( _colTypes[76] == DbTypeIDs<V77>::ID() );
    assert( _colTypes[77] == DbTypeIDs<V78>::ID() );
    assert( _colTypes[78] == DbTypeIDs<V79>::ID() );
    assert( _colTypes[79] == DbTypeIDs<V80>::ID() );
    assert( _colTypes[80] == DbTypeIDs<V81>::ID() );
    assert( _colTypes[81] == DbTypeIDs<V82>::ID() );
    assert( _colTypes[82] == DbTypeIDs<V83>::ID() );
    assert( _colTypes[83] == DbTypeIDs<V84>::ID() );
    assert( _colTypes[84] == DbTypeIDs<V85>::ID() );
    assert( _colTypes[85] == DbTypeIDs<V86>::ID() );
    assert( _colTypes[86] == DbTypeIDs<V87>::ID() );
    assert( _colTypes[87] == DbTypeIDs<V88>::ID() );
    assert( _colTypes[88] == DbTypeIDs<V89>::ID() );
    assert( _colTypes[89] == DbTypeIDs<V90>::ID() );
    assert( _colTypes[90] == DbTypeIDs<V91>::ID() );
    assert( _colTypes[91] == DbTypeIDs<V92>::ID() );
    assert( _colTypes[92] == DbTypeIDs<V93>::ID() );
    ((List<V1>*)_colDatas[0])->Add(v1);
    ((List<V2>*)_colDatas[1])->Add(v2);
    ((List<V3>*)_colDatas[2])->Add(v3);
    ((List<V4>*)_colDatas[3])->Add(v4);
    ((List<V5>*)_colDatas[4])->Add(v5);
    ((List<V6>*)_colDatas[5])->Add(v6);
    ((List<V7>*)_colDatas[6])->Add(v7);
    ((List<V8>*)_colDatas[7])->Add(v8);
    ((List<V9>*)_colDatas[8])->Add(v9);
    ((List<V10>*)_colDatas[9])->Add(v10);
    ((List<V11>*)_colDatas[10])->Add(v11);
    ((List<V12>*)_colDatas[11])->Add(v12);
    ((List<V13>*)_colDatas[12])->Add(v13);
    ((List<V14>*)_colDatas[13])->Add(v14);
    ((List<V15>*)_colDatas[14])->Add(v15);
    ((List<V16>*)_colDatas[15])->Add(v16);
    ((List<V17>*)_colDatas[16])->Add(v17);
    ((List<V18>*)_colDatas[17])->Add(v18);
    ((List<V19>*)_colDatas[18])->Add(v19);
    ((List<V20>*)_colDatas[19])->Add(v20);
    ((List<V21>*)_colDatas[20])->Add(v21);
    ((List<V22>*)_colDatas[21])->Add(v22);
    ((List<V23>*)_colDatas[22])->Add(v23);
    ((List<V24>*)_colDatas[23])->Add(v24);
    ((List<V25>*)_colDatas[24])->Add(v25);
    ((List<V26>*)_colDatas[25])->Add(v26);
    ((List<V27>*)_colDatas[26])->Add(v27);
    ((List<V28>*)_colDatas[27])->Add(v28);
    ((List<V29>*)_colDatas[28])->Add(v29);
    ((List<V30>*)_colDatas[29])->Add(v30);
    ((List<V31>*)_colDatas[30])->Add(v31);
    ((List<V32>*)_colDatas[31])->Add(v32);
    ((List<V33>*)_colDatas[32])->Add(v33);
    ((List<V34>*)_colDatas[33])->Add(v34);
    ((List<V35>*)_colDatas[34])->Add(v35);
    ((List<V36>*)_colDatas[35])->Add(v36);
    ((List<V37>*)_colDatas[36])->Add(v37);
    ((List<V38>*)_colDatas[37])->Add(v38);
    ((List<V39>*)_colDatas[38])->Add(v39);
    ((List<V40>*)_colDatas[39])->Add(v40);
    ((List<V41>*)_colDatas[40])->Add(v41);
    ((List<V42>*)_colDatas[41])->Add(v42);
    ((List<V43>*)_colDatas[42])->Add(v43);
    ((List<V44>*)_colDatas[43])->Add(v44);
    ((List<V45>*)_colDatas[44])->Add(v45);
    ((List<V46>*)_colDatas[45])->Add(v46);
    ((List<V47>*)_colDatas[46])->Add(v47);
    ((List<V48>*)_colDatas[47])->Add(v48);
    ((List<V49>*)_colDatas[48])->Add(v49);
    ((List<V50>*)_colDatas[49])->Add(v50);
    ((List<V51>*)_colDatas[50])->Add(v51);
    ((List<V52>*)_colDatas[51])->Add(v52);
    ((List<V53>*)_colDatas[52])->Add(v53);
    ((List<V54>*)_colDatas[53])->Add(v54);
    ((List<V55>*)_colDatas[54])->Add(v55);
    ((List<V56>*)_colDatas[55])->Add(v56);
    ((List<V57>*)_colDatas[56])->Add(v57);
    ((List<V58>*)_colDatas[57])->Add(v58);
    ((List<V59>*)_colDatas[58])->Add(v59);
    ((List<V60>*)_colDatas[59])->Add(v60);
    ((List<V61>*)_colDatas[60])->Add(v61);
    ((List<V62>*)_colDatas[61])->Add(v62);
    ((List<V63>*)_colDatas[62])->Add(v63);
    ((List<V64>*)_colDatas[63])->Add(v64);
    ((List<V65>*)_colDatas[64])->Add(v65);
    ((List<V66>*)_colDatas[65])->Add(v66);
    ((List<V67>*)_colDatas[66])->Add(v67);
    ((List<V68>*)_colDatas[67])->Add(v68);
    ((List<V69>*)_colDatas[68])->Add(v69);
    ((List<V70>*)_colDatas[69])->Add(v70);
    ((List<V71>*)_colDatas[70])->Add(v71);
    ((List<V72>*)_colDatas[71])->Add(v72);
    ((List<V73>*)_colDatas[72])->Add(v73);
    ((List<V74>*)_colDatas[73])->Add(v74);
    ((List<V75>*)_colDatas[74])->Add(v75);
    ((List<V76>*)_colDatas[75])->Add(v76);
    ((List<V77>*)_colDatas[76])->Add(v77);
    ((List<V78>*)_colDatas[77])->Add(v78);
    ((List<V79>*)_colDatas[78])->Add(v79);
    ((List<V80>*)_colDatas[79])->Add(v80);
    ((List<V81>*)_colDatas[80])->Add(v81);
    ((List<V82>*)_colDatas[81])->Add(v82);
    ((List<V83>*)_colDatas[82])->Add(v83);
    ((List<V84>*)_colDatas[83])->Add(v84);
    ((List<V85>*)_colDatas[84])->Add(v85);
    ((List<V86>*)_colDatas[85])->Add(v86);
    ((List<V87>*)_colDatas[86])->Add(v87);
    ((List<V88>*)_colDatas[87])->Add(v88);
    ((List<V89>*)_colDatas[88])->Add(v89);
    ((List<V90>*)_colDatas[89])->Add(v90);
    ((List<V91>*)_colDatas[90])->Add(v91);
    ((List<V92>*)_colDatas[91])->Add(v92);
    ((List<V93>*)_colDatas[92])->Add(v93);
    ++_rowCount;
    return *this;
}
template<typename V1, typename V2, typename V3, typename V4, typename V5, typename V6, typename V7, typename V8, typename V9, typename V10, typename V11, typename V12, typename V13, typename V14, typename V15, typename V16, typename V17, typename V18, typename V19, typename V20, typename V21, typename V22, typename V23, typename V24, typename V25, typename V26, typename V27, typename V28, typename V29, typename V30, typename V31, typename V32, typename V33, typename V34, typename V35, typename V36, typename V37, typename V38, typename V39, typename V40, typename V41, typename V42, typename V43, typename V44, typename V45, typename V46, typename V47, typename V48, typename V49, typename V50, typename V51, typename V52, typename V53, typename V54, typename V55, typename V56, typename V57, typename V58, typename V59, typename V60, typename V61, typename V62, typename V63, typename V64, typename V65, typename V66, typename V67, typename V68, typename V69, typename V70, typename V71, typename V72, typename V73, typename V74, typename V75, typename V76, typename V77, typename V78, typename V79, typename V80, typename V81, typename V82, typename V83, typename V84, typename V85, typename V86, typename V87, typename V88, typename V89, typename V90, typename V91, typename V92, typename V93, typename V94>
DbTable & DbTable::AddRow(V1 const &v1, V2 const &v2, V3 const &v3, V4 const &v4, V5 const &v5, V6 const &v6, V7 const &v7, V8 const &v8, V9 const &v9, V10 const &v10, V11 const &v11, V12 const &v12, V13 const &v13, V14 const &v14, V15 const &v15, V16 const &v16, V17 const &v17, V18 const &v18, V19 const &v19, V20 const &v20, V21 const &v21, V22 const &v22, V23 const &v23, V24 const &v24, V25 const &v25, V26 const &v26, V27 const &v27, V28 const &v28, V29 const &v29, V30 const &v30, V31 const &v31, V32 const &v32, V33 const &v33, V34 const &v34, V35 const &v35, V36 const &v36, V37 const &v37, V38 const &v38, V39 const &v39, V40 const &v40, V41 const &v41, V42 const &v42, V43 const &v43, V44 const &v44, V45 const &v45, V46 const &v46, V47 const &v47, V48 const &v48, V49 const &v49, V50 const &v50, V51 const &v51, V52 const &v52, V53 const &v53, V54 const &v54, V55 const &v55, V56 const &v56, V57 const &v57, V58 const &v58, V59 const &v59, V60 const &v60, V61 const &v61, V62 const &v62, V63 const &v63, V64 const &v64, V65 const &v65, V66 const &v66, V67 const &v67, V68 const &v68, V69 const &v69, V70 const &v70, V71 const &v71, V72 const &v72, V73 const &v73, V74 const &v74, V75 const &v75, V76 const &v76, V77 const &v77, V78 const &v78, V79 const &v79, V80 const &v80, V81 const &v81, V82 const &v82, V83 const &v83, V84 const &v84, V85 const &v85, V86 const &v86, V87 const &v87, V88 const &v88, V89 const &v89, V90 const &v90, V91 const &v91, V92 const &v92, V93 const &v93, V94 const &v94) {
    assert( _colNames.Length() == 94 );
    assert( _colTypes[0] == DbTypeIDs<V1>::ID() );
    assert( _colTypes[1] == DbTypeIDs<V2>::ID() );
    assert( _colTypes[2] == DbTypeIDs<V3>::ID() );
    assert( _colTypes[3] == DbTypeIDs<V4>::ID() );
    assert( _colTypes[4] == DbTypeIDs<V5>::ID() );
    assert( _colTypes[5] == DbTypeIDs<V6>::ID() );
    assert( _colTypes[6] == DbTypeIDs<V7>::ID() );
    assert( _colTypes[7] == DbTypeIDs<V8>::ID() );
    assert( _colTypes[8] == DbTypeIDs<V9>::ID() );
    assert( _colTypes[9] == DbTypeIDs<V10>::ID() );
    assert( _colTypes[10] == DbTypeIDs<V11>::ID() );
    assert( _colTypes[11] == DbTypeIDs<V12>::ID() );
    assert( _colTypes[12] == DbTypeIDs<V13>::ID() );
    assert( _colTypes[13] == DbTypeIDs<V14>::ID() );
    assert( _colTypes[14] == DbTypeIDs<V15>::ID() );
    assert( _colTypes[15] == DbTypeIDs<V16>::ID() );
    assert( _colTypes[16] == DbTypeIDs<V17>::ID() );
    assert( _colTypes[17] == DbTypeIDs<V18>::ID() );
    assert( _colTypes[18] == DbTypeIDs<V19>::ID() );
    assert( _colTypes[19] == DbTypeIDs<V20>::ID() );
    assert( _colTypes[20] == DbTypeIDs<V21>::ID() );
    assert( _colTypes[21] == DbTypeIDs<V22>::ID() );
    assert( _colTypes[22] == DbTypeIDs<V23>::ID() );
    assert( _colTypes[23] == DbTypeIDs<V24>::ID() );
    assert( _colTypes[24] == DbTypeIDs<V25>::ID() );
    assert( _colTypes[25] == DbTypeIDs<V26>::ID() );
    assert( _colTypes[26] == DbTypeIDs<V27>::ID() );
    assert( _colTypes[27] == DbTypeIDs<V28>::ID() );
    assert( _colTypes[28] == DbTypeIDs<V29>::ID() );
    assert( _colTypes[29] == DbTypeIDs<V30>::ID() );
    assert( _colTypes[30] == DbTypeIDs<V31>::ID() );
    assert( _colTypes[31] == DbTypeIDs<V32>::ID() );
    assert( _colTypes[32] == DbTypeIDs<V33>::ID() );
    assert( _colTypes[33] == DbTypeIDs<V34>::ID() );
    assert( _colTypes[34] == DbTypeIDs<V35>::ID() );
    assert( _colTypes[35] == DbTypeIDs<V36>::ID() );
    assert( _colTypes[36] == DbTypeIDs<V37>::ID() );
    assert( _colTypes[37] == DbTypeIDs<V38>::ID() );
    assert( _colTypes[38] == DbTypeIDs<V39>::ID() );
    assert( _colTypes[39] == DbTypeIDs<V40>::ID() );
    assert( _colTypes[40] == DbTypeIDs<V41>::ID() );
    assert( _colTypes[41] == DbTypeIDs<V42>::ID() );
    assert( _colTypes[42] == DbTypeIDs<V43>::ID() );
    assert( _colTypes[43] == DbTypeIDs<V44>::ID() );
    assert( _colTypes[44] == DbTypeIDs<V45>::ID() );
    assert( _colTypes[45] == DbTypeIDs<V46>::ID() );
    assert( _colTypes[46] == DbTypeIDs<V47>::ID() );
    assert( _colTypes[47] == DbTypeIDs<V48>::ID() );
    assert( _colTypes[48] == DbTypeIDs<V49>::ID() );
    assert( _colTypes[49] == DbTypeIDs<V50>::ID() );
    assert( _colTypes[50] == DbTypeIDs<V51>::ID() );
    assert( _colTypes[51] == DbTypeIDs<V52>::ID() );
    assert( _colTypes[52] == DbTypeIDs<V53>::ID() );
    assert( _colTypes[53] == DbTypeIDs<V54>::ID() );
    assert( _colTypes[54] == DbTypeIDs<V55>::ID() );
    assert( _colTypes[55] == DbTypeIDs<V56>::ID() );
    assert( _colTypes[56] == DbTypeIDs<V57>::ID() );
    assert( _colTypes[57] == DbTypeIDs<V58>::ID() );
    assert( _colTypes[58] == DbTypeIDs<V59>::ID() );
    assert( _colTypes[59] == DbTypeIDs<V60>::ID() );
    assert( _colTypes[60] == DbTypeIDs<V61>::ID() );
    assert( _colTypes[61] == DbTypeIDs<V62>::ID() );
    assert( _colTypes[62] == DbTypeIDs<V63>::ID() );
    assert( _colTypes[63] == DbTypeIDs<V64>::ID() );
    assert( _colTypes[64] == DbTypeIDs<V65>::ID() );
    assert( _colTypes[65] == DbTypeIDs<V66>::ID() );
    assert( _colTypes[66] == DbTypeIDs<V67>::ID() );
    assert( _colTypes[67] == DbTypeIDs<V68>::ID() );
    assert( _colTypes[68] == DbTypeIDs<V69>::ID() );
    assert( _colTypes[69] == DbTypeIDs<V70>::ID() );
    assert( _colTypes[70] == DbTypeIDs<V71>::ID() );
    assert( _colTypes[71] == DbTypeIDs<V72>::ID() );
    assert( _colTypes[72] == DbTypeIDs<V73>::ID() );
    assert( _colTypes[73] == DbTypeIDs<V74>::ID() );
    assert( _colTypes[74] == DbTypeIDs<V75>::ID() );
    assert( _colTypes[75] == DbTypeIDs<V76>::ID() );
    assert( _colTypes[76] == DbTypeIDs<V77>::ID() );
    assert( _colTypes[77] == DbTypeIDs<V78>::ID() );
    assert( _colTypes[78] == DbTypeIDs<V79>::ID() );
    assert( _colTypes[79] == DbTypeIDs<V80>::ID() );
    assert( _colTypes[80] == DbTypeIDs<V81>::ID() );
    assert( _colTypes[81] == DbTypeIDs<V82>::ID() );
    assert( _colTypes[82] == DbTypeIDs<V83>::ID() );
    assert( _colTypes[83] == DbTypeIDs<V84>::ID() );
    assert( _colTypes[84] == DbTypeIDs<V85>::ID() );
    assert( _colTypes[85] == DbTypeIDs<V86>::ID() );
    assert( _colTypes[86] == DbTypeIDs<V87>::ID() );
    assert( _colTypes[87] == DbTypeIDs<V88>::ID() );
    assert( _colTypes[88] == DbTypeIDs<V89>::ID() );
    assert( _colTypes[89] == DbTypeIDs<V90>::ID() );
    assert( _colTypes[90] == DbTypeIDs<V91>::ID() );
    assert( _colTypes[91] == DbTypeIDs<V92>::ID() );
    assert( _colTypes[92] == DbTypeIDs<V93>::ID() );
    assert( _colTypes[93] == DbTypeIDs<V94>::ID() );
    ((List<V1>*)_colDatas[0])->Add(v1);
    ((List<V2>*)_colDatas[1])->Add(v2);
    ((List<V3>*)_colDatas[2])->Add(v3);
    ((List<V4>*)_colDatas[3])->Add(v4);
    ((List<V5>*)_colDatas[4])->Add(v5);
    ((List<V6>*)_colDatas[5])->Add(v6);
    ((List<V7>*)_colDatas[6])->Add(v7);
    ((List<V8>*)_colDatas[7])->Add(v8);
    ((List<V9>*)_colDatas[8])->Add(v9);
    ((List<V10>*)_colDatas[9])->Add(v10);
    ((List<V11>*)_colDatas[10])->Add(v11);
    ((List<V12>*)_colDatas[11])->Add(v12);
    ((List<V13>*)_colDatas[12])->Add(v13);
    ((List<V14>*)_colDatas[13])->Add(v14);
    ((List<V15>*)_colDatas[14])->Add(v15);
    ((List<V16>*)_colDatas[15])->Add(v16);
    ((List<V17>*)_colDatas[16])->Add(v17);
    ((List<V18>*)_colDatas[17])->Add(v18);
    ((List<V19>*)_colDatas[18])->Add(v19);
    ((List<V20>*)_colDatas[19])->Add(v20);
    ((List<V21>*)_colDatas[20])->Add(v21);
    ((List<V22>*)_colDatas[21])->Add(v22);
    ((List<V23>*)_colDatas[22])->Add(v23);
    ((List<V24>*)_colDatas[23])->Add(v24);
    ((List<V25>*)_colDatas[24])->Add(v25);
    ((List<V26>*)_colDatas[25])->Add(v26);
    ((List<V27>*)_colDatas[26])->Add(v27);
    ((List<V28>*)_colDatas[27])->Add(v28);
    ((List<V29>*)_colDatas[28])->Add(v29);
    ((List<V30>*)_colDatas[29])->Add(v30);
    ((List<V31>*)_colDatas[30])->Add(v31);
    ((List<V32>*)_colDatas[31])->Add(v32);
    ((List<V33>*)_colDatas[32])->Add(v33);
    ((List<V34>*)_colDatas[33])->Add(v34);
    ((List<V35>*)_colDatas[34])->Add(v35);
    ((List<V36>*)_colDatas[35])->Add(v36);
    ((List<V37>*)_colDatas[36])->Add(v37);
    ((List<V38>*)_colDatas[37])->Add(v38);
    ((List<V39>*)_colDatas[38])->Add(v39);
    ((List<V40>*)_colDatas[39])->Add(v40);
    ((List<V41>*)_colDatas[40])->Add(v41);
    ((List<V42>*)_colDatas[41])->Add(v42);
    ((List<V43>*)_colDatas[42])->Add(v43);
    ((List<V44>*)_colDatas[43])->Add(v44);
    ((List<V45>*)_colDatas[44])->Add(v45);
    ((List<V46>*)_colDatas[45])->Add(v46);
    ((List<V47>*)_colDatas[46])->Add(v47);
    ((List<V48>*)_colDatas[47])->Add(v48);
    ((List<V49>*)_colDatas[48])->Add(v49);
    ((List<V50>*)_colDatas[49])->Add(v50);
    ((List<V51>*)_colDatas[50])->Add(v51);
    ((List<V52>*)_colDatas[51])->Add(v52);
    ((List<V53>*)_colDatas[52])->Add(v53);
    ((List<V54>*)_colDatas[53])->Add(v54);
    ((List<V55>*)_colDatas[54])->Add(v55);
    ((List<V56>*)_colDatas[55])->Add(v56);
    ((List<V57>*)_colDatas[56])->Add(v57);
    ((List<V58>*)_colDatas[57])->Add(v58);
    ((List<V59>*)_colDatas[58])->Add(v59);
    ((List<V60>*)_colDatas[59])->Add(v60);
    ((List<V61>*)_colDatas[60])->Add(v61);
    ((List<V62>*)_colDatas[61])->Add(v62);
    ((List<V63>*)_colDatas[62])->Add(v63);
    ((List<V64>*)_colDatas[63])->Add(v64);
    ((List<V65>*)_colDatas[64])->Add(v65);
    ((List<V66>*)_colDatas[65])->Add(v66);
    ((List<V67>*)_colDatas[66])->Add(v67);
    ((List<V68>*)_colDatas[67])->Add(v68);
    ((List<V69>*)_colDatas[68])->Add(v69);
    ((List<V70>*)_colDatas[69])->Add(v70);
    ((List<V71>*)_colDatas[70])->Add(v71);
    ((List<V72>*)_colDatas[71])->Add(v72);
    ((List<V73>*)_colDatas[72])->Add(v73);
    ((List<V74>*)_colDatas[73])->Add(v74);
    ((List<V75>*)_colDatas[74])->Add(v75);
    ((List<V76>*)_colDatas[75])->Add(v76);
    ((List<V77>*)_colDatas[76])->Add(v77);
    ((List<V78>*)_colDatas[77])->Add(v78);
    ((List<V79>*)_colDatas[78])->Add(v79);
    ((List<V80>*)_colDatas[79])->Add(v80);
    ((List<V81>*)_colDatas[80])->Add(v81);
    ((List<V82>*)_colDatas[81])->Add(v82);
    ((List<V83>*)_colDatas[82])->Add(v83);
    ((List<V84>*)_colDatas[83])->Add(v84);
    ((List<V85>*)_colDatas[84])->Add(v85);
    ((List<V86>*)_colDatas[85])->Add(v86);
    ((List<V87>*)_colDatas[86])->Add(v87);
    ((List<V88>*)_colDatas[87])->Add(v88);
    ((List<V89>*)_colDatas[88])->Add(v89);
    ((List<V90>*)_colDatas[89])->Add(v90);
    ((List<V91>*)_colDatas[90])->Add(v91);
    ((List<V92>*)_colDatas[91])->Add(v92);
    ((List<V93>*)_colDatas[92])->Add(v93);
    ((List<V94>*)_colDatas[93])->Add(v94);
    ++_rowCount;
    return *this;
}
template<typename V1, typename V2, typename V3, typename V4, typename V5, typename V6, typename V7, typename V8, typename V9, typename V10, typename V11, typename V12, typename V13, typename V14, typename V15, typename V16, typename V17, typename V18, typename V19, typename V20, typename V21, typename V22, typename V23, typename V24, typename V25, typename V26, typename V27, typename V28, typename V29, typename V30, typename V31, typename V32, typename V33, typename V34, typename V35, typename V36, typename V37, typename V38, typename V39, typename V40, typename V41, typename V42, typename V43, typename V44, typename V45, typename V46, typename V47, typename V48, typename V49, typename V50, typename V51, typename V52, typename V53, typename V54, typename V55, typename V56, typename V57, typename V58, typename V59, typename V60, typename V61, typename V62, typename V63, typename V64, typename V65, typename V66, typename V67, typename V68, typename V69, typename V70, typename V71, typename V72, typename V73, typename V74, typename V75, typename V76, typename V77, typename V78, typename V79, typename V80, typename V81, typename V82, typename V83, typename V84, typename V85, typename V86, typename V87, typename V88, typename V89, typename V90, typename V91, typename V92, typename V93, typename V94, typename V95>
DbTable & DbTable::AddRow(V1 const &v1, V2 const &v2, V3 const &v3, V4 const &v4, V5 const &v5, V6 const &v6, V7 const &v7, V8 const &v8, V9 const &v9, V10 const &v10, V11 const &v11, V12 const &v12, V13 const &v13, V14 const &v14, V15 const &v15, V16 const &v16, V17 const &v17, V18 const &v18, V19 const &v19, V20 const &v20, V21 const &v21, V22 const &v22, V23 const &v23, V24 const &v24, V25 const &v25, V26 const &v26, V27 const &v27, V28 const &v28, V29 const &v29, V30 const &v30, V31 const &v31, V32 const &v32, V33 const &v33, V34 const &v34, V35 const &v35, V36 const &v36, V37 const &v37, V38 const &v38, V39 const &v39, V40 const &v40, V41 const &v41, V42 const &v42, V43 const &v43, V44 const &v44, V45 const &v45, V46 const &v46, V47 const &v47, V48 const &v48, V49 const &v49, V50 const &v50, V51 const &v51, V52 const &v52, V53 const &v53, V54 const &v54, V55 const &v55, V56 const &v56, V57 const &v57, V58 const &v58, V59 const &v59, V60 const &v60, V61 const &v61, V62 const &v62, V63 const &v63, V64 const &v64, V65 const &v65, V66 const &v66, V67 const &v67, V68 const &v68, V69 const &v69, V70 const &v70, V71 const &v71, V72 const &v72, V73 const &v73, V74 const &v74, V75 const &v75, V76 const &v76, V77 const &v77, V78 const &v78, V79 const &v79, V80 const &v80, V81 const &v81, V82 const &v82, V83 const &v83, V84 const &v84, V85 const &v85, V86 const &v86, V87 const &v87, V88 const &v88, V89 const &v89, V90 const &v90, V91 const &v91, V92 const &v92, V93 const &v93, V94 const &v94, V95 const &v95) {
    assert( _colNames.Length() == 95 );
    assert( _colTypes[0] == DbTypeIDs<V1>::ID() );
    assert( _colTypes[1] == DbTypeIDs<V2>::ID() );
    assert( _colTypes[2] == DbTypeIDs<V3>::ID() );
    assert( _colTypes[3] == DbTypeIDs<V4>::ID() );
    assert( _colTypes[4] == DbTypeIDs<V5>::ID() );
    assert( _colTypes[5] == DbTypeIDs<V6>::ID() );
    assert( _colTypes[6] == DbTypeIDs<V7>::ID() );
    assert( _colTypes[7] == DbTypeIDs<V8>::ID() );
    assert( _colTypes[8] == DbTypeIDs<V9>::ID() );
    assert( _colTypes[9] == DbTypeIDs<V10>::ID() );
    assert( _colTypes[10] == DbTypeIDs<V11>::ID() );
    assert( _colTypes[11] == DbTypeIDs<V12>::ID() );
    assert( _colTypes[12] == DbTypeIDs<V13>::ID() );
    assert( _colTypes[13] == DbTypeIDs<V14>::ID() );
    assert( _colTypes[14] == DbTypeIDs<V15>::ID() );
    assert( _colTypes[15] == DbTypeIDs<V16>::ID() );
    assert( _colTypes[16] == DbTypeIDs<V17>::ID() );
    assert( _colTypes[17] == DbTypeIDs<V18>::ID() );
    assert( _colTypes[18] == DbTypeIDs<V19>::ID() );
    assert( _colTypes[19] == DbTypeIDs<V20>::ID() );
    assert( _colTypes[20] == DbTypeIDs<V21>::ID() );
    assert( _colTypes[21] == DbTypeIDs<V22>::ID() );
    assert( _colTypes[22] == DbTypeIDs<V23>::ID() );
    assert( _colTypes[23] == DbTypeIDs<V24>::ID() );
    assert( _colTypes[24] == DbTypeIDs<V25>::ID() );
    assert( _colTypes[25] == DbTypeIDs<V26>::ID() );
    assert( _colTypes[26] == DbTypeIDs<V27>::ID() );
    assert( _colTypes[27] == DbTypeIDs<V28>::ID() );
    assert( _colTypes[28] == DbTypeIDs<V29>::ID() );
    assert( _colTypes[29] == DbTypeIDs<V30>::ID() );
    assert( _colTypes[30] == DbTypeIDs<V31>::ID() );
    assert( _colTypes[31] == DbTypeIDs<V32>::ID() );
    assert( _colTypes[32] == DbTypeIDs<V33>::ID() );
    assert( _colTypes[33] == DbTypeIDs<V34>::ID() );
    assert( _colTypes[34] == DbTypeIDs<V35>::ID() );
    assert( _colTypes[35] == DbTypeIDs<V36>::ID() );
    assert( _colTypes[36] == DbTypeIDs<V37>::ID() );
    assert( _colTypes[37] == DbTypeIDs<V38>::ID() );
    assert( _colTypes[38] == DbTypeIDs<V39>::ID() );
    assert( _colTypes[39] == DbTypeIDs<V40>::ID() );
    assert( _colTypes[40] == DbTypeIDs<V41>::ID() );
    assert( _colTypes[41] == DbTypeIDs<V42>::ID() );
    assert( _colTypes[42] == DbTypeIDs<V43>::ID() );
    assert( _colTypes[43] == DbTypeIDs<V44>::ID() );
    assert( _colTypes[44] == DbTypeIDs<V45>::ID() );
    assert( _colTypes[45] == DbTypeIDs<V46>::ID() );
    assert( _colTypes[46] == DbTypeIDs<V47>::ID() );
    assert( _colTypes[47] == DbTypeIDs<V48>::ID() );
    assert( _colTypes[48] == DbTypeIDs<V49>::ID() );
    assert( _colTypes[49] == DbTypeIDs<V50>::ID() );
    assert( _colTypes[50] == DbTypeIDs<V51>::ID() );
    assert( _colTypes[51] == DbTypeIDs<V52>::ID() );
    assert( _colTypes[52] == DbTypeIDs<V53>::ID() );
    assert( _colTypes[53] == DbTypeIDs<V54>::ID() );
    assert( _colTypes[54] == DbTypeIDs<V55>::ID() );
    assert( _colTypes[55] == DbTypeIDs<V56>::ID() );
    assert( _colTypes[56] == DbTypeIDs<V57>::ID() );
    assert( _colTypes[57] == DbTypeIDs<V58>::ID() );
    assert( _colTypes[58] == DbTypeIDs<V59>::ID() );
    assert( _colTypes[59] == DbTypeIDs<V60>::ID() );
    assert( _colTypes[60] == DbTypeIDs<V61>::ID() );
    assert( _colTypes[61] == DbTypeIDs<V62>::ID() );
    assert( _colTypes[62] == DbTypeIDs<V63>::ID() );
    assert( _colTypes[63] == DbTypeIDs<V64>::ID() );
    assert( _colTypes[64] == DbTypeIDs<V65>::ID() );
    assert( _colTypes[65] == DbTypeIDs<V66>::ID() );
    assert( _colTypes[66] == DbTypeIDs<V67>::ID() );
    assert( _colTypes[67] == DbTypeIDs<V68>::ID() );
    assert( _colTypes[68] == DbTypeIDs<V69>::ID() );
    assert( _colTypes[69] == DbTypeIDs<V70>::ID() );
    assert( _colTypes[70] == DbTypeIDs<V71>::ID() );
    assert( _colTypes[71] == DbTypeIDs<V72>::ID() );
    assert( _colTypes[72] == DbTypeIDs<V73>::ID() );
    assert( _colTypes[73] == DbTypeIDs<V74>::ID() );
    assert( _colTypes[74] == DbTypeIDs<V75>::ID() );
    assert( _colTypes[75] == DbTypeIDs<V76>::ID() );
    assert( _colTypes[76] == DbTypeIDs<V77>::ID() );
    assert( _colTypes[77] == DbTypeIDs<V78>::ID() );
    assert( _colTypes[78] == DbTypeIDs<V79>::ID() );
    assert( _colTypes[79] == DbTypeIDs<V80>::ID() );
    assert( _colTypes[80] == DbTypeIDs<V81>::ID() );
    assert( _colTypes[81] == DbTypeIDs<V82>::ID() );
    assert( _colTypes[82] == DbTypeIDs<V83>::ID() );
    assert( _colTypes[83] == DbTypeIDs<V84>::ID() );
    assert( _colTypes[84] == DbTypeIDs<V85>::ID() );
    assert( _colTypes[85] == DbTypeIDs<V86>::ID() );
    assert( _colTypes[86] == DbTypeIDs<V87>::ID() );
    assert( _colTypes[87] == DbTypeIDs<V88>::ID() );
    assert( _colTypes[88] == DbTypeIDs<V89>::ID() );
    assert( _colTypes[89] == DbTypeIDs<V90>::ID() );
    assert( _colTypes[90] == DbTypeIDs<V91>::ID() );
    assert( _colTypes[91] == DbTypeIDs<V92>::ID() );
    assert( _colTypes[92] == DbTypeIDs<V93>::ID() );
    assert( _colTypes[93] == DbTypeIDs<V94>::ID() );
    assert( _colTypes[94] == DbTypeIDs<V95>::ID() );
    ((List<V1>*)_colDatas[0])->Add(v1);
    ((List<V2>*)_colDatas[1])->Add(v2);
    ((List<V3>*)_colDatas[2])->Add(v3);
    ((List<V4>*)_colDatas[3])->Add(v4);
    ((List<V5>*)_colDatas[4])->Add(v5);
    ((List<V6>*)_colDatas[5])->Add(v6);
    ((List<V7>*)_colDatas[6])->Add(v7);
    ((List<V8>*)_colDatas[7])->Add(v8);
    ((List<V9>*)_colDatas[8])->Add(v9);
    ((List<V10>*)_colDatas[9])->Add(v10);
    ((List<V11>*)_colDatas[10])->Add(v11);
    ((List<V12>*)_colDatas[11])->Add(v12);
    ((List<V13>*)_colDatas[12])->Add(v13);
    ((List<V14>*)_colDatas[13])->Add(v14);
    ((List<V15>*)_colDatas[14])->Add(v15);
    ((List<V16>*)_colDatas[15])->Add(v16);
    ((List<V17>*)_colDatas[16])->Add(v17);
    ((List<V18>*)_colDatas[17])->Add(v18);
    ((List<V19>*)_colDatas[18])->Add(v19);
    ((List<V20>*)_colDatas[19])->Add(v20);
    ((List<V21>*)_colDatas[20])->Add(v21);
    ((List<V22>*)_colDatas[21])->Add(v22);
    ((List<V23>*)_colDatas[22])->Add(v23);
    ((List<V24>*)_colDatas[23])->Add(v24);
    ((List<V25>*)_colDatas[24])->Add(v25);
    ((List<V26>*)_colDatas[25])->Add(v26);
    ((List<V27>*)_colDatas[26])->Add(v27);
    ((List<V28>*)_colDatas[27])->Add(v28);
    ((List<V29>*)_colDatas[28])->Add(v29);
    ((List<V30>*)_colDatas[29])->Add(v30);
    ((List<V31>*)_colDatas[30])->Add(v31);
    ((List<V32>*)_colDatas[31])->Add(v32);
    ((List<V33>*)_colDatas[32])->Add(v33);
    ((List<V34>*)_colDatas[33])->Add(v34);
    ((List<V35>*)_colDatas[34])->Add(v35);
    ((List<V36>*)_colDatas[35])->Add(v36);
    ((List<V37>*)_colDatas[36])->Add(v37);
    ((List<V38>*)_colDatas[37])->Add(v38);
    ((List<V39>*)_colDatas[38])->Add(v39);
    ((List<V40>*)_colDatas[39])->Add(v40);
    ((List<V41>*)_colDatas[40])->Add(v41);
    ((List<V42>*)_colDatas[41])->Add(v42);
    ((List<V43>*)_colDatas[42])->Add(v43);
    ((List<V44>*)_colDatas[43])->Add(v44);
    ((List<V45>*)_colDatas[44])->Add(v45);
    ((List<V46>*)_colDatas[45])->Add(v46);
    ((List<V47>*)_colDatas[46])->Add(v47);
    ((List<V48>*)_colDatas[47])->Add(v48);
    ((List<V49>*)_colDatas[48])->Add(v49);
    ((List<V50>*)_colDatas[49])->Add(v50);
    ((List<V51>*)_colDatas[50])->Add(v51);
    ((List<V52>*)_colDatas[51])->Add(v52);
    ((List<V53>*)_colDatas[52])->Add(v53);
    ((List<V54>*)_colDatas[53])->Add(v54);
    ((List<V55>*)_colDatas[54])->Add(v55);
    ((List<V56>*)_colDatas[55])->Add(v56);
    ((List<V57>*)_colDatas[56])->Add(v57);
    ((List<V58>*)_colDatas[57])->Add(v58);
    ((List<V59>*)_colDatas[58])->Add(v59);
    ((List<V60>*)_colDatas[59])->Add(v60);
    ((List<V61>*)_colDatas[60])->Add(v61);
    ((List<V62>*)_colDatas[61])->Add(v62);
    ((List<V63>*)_colDatas[62])->Add(v63);
    ((List<V64>*)_colDatas[63])->Add(v64);
    ((List<V65>*)_colDatas[64])->Add(v65);
    ((List<V66>*)_colDatas[65])->Add(v66);
    ((List<V67>*)_colDatas[66])->Add(v67);
    ((List<V68>*)_colDatas[67])->Add(v68);
    ((List<V69>*)_colDatas[68])->Add(v69);
    ((List<V70>*)_colDatas[69])->Add(v70);
    ((List<V71>*)_colDatas[70])->Add(v71);
    ((List<V72>*)_colDatas[71])->Add(v72);
    ((List<V73>*)_colDatas[72])->Add(v73);
    ((List<V74>*)_colDatas[73])->Add(v74);
    ((List<V75>*)_colDatas[74])->Add(v75);
    ((List<V76>*)_colDatas[75])->Add(v76);
    ((List<V77>*)_colDatas[76])->Add(v77);
    ((List<V78>*)_colDatas[77])->Add(v78);
    ((List<V79>*)_colDatas[78])->Add(v79);
    ((List<V80>*)_colDatas[79])->Add(v80);
    ((List<V81>*)_colDatas[80])->Add(v81);
    ((List<V82>*)_colDatas[81])->Add(v82);
    ((List<V83>*)_colDatas[82])->Add(v83);
    ((List<V84>*)_colDatas[83])->Add(v84);
    ((List<V85>*)_colDatas[84])->Add(v85);
    ((List<V86>*)_colDatas[85])->Add(v86);
    ((List<V87>*)_colDatas[86])->Add(v87);
    ((List<V88>*)_colDatas[87])->Add(v88);
    ((List<V89>*)_colDatas[88])->Add(v89);
    ((List<V90>*)_colDatas[89])->Add(v90);
    ((List<V91>*)_colDatas[90])->Add(v91);
    ((List<V92>*)_colDatas[91])->Add(v92);
    ((List<V93>*)_colDatas[92])->Add(v93);
    ((List<V94>*)_colDatas[93])->Add(v94);
    ((List<V95>*)_colDatas[94])->Add(v95);
    ++_rowCount;
    return *this;
}
template<typename V1, typename V2, typename V3, typename V4, typename V5, typename V6, typename V7, typename V8, typename V9, typename V10, typename V11, typename V12, typename V13, typename V14, typename V15, typename V16, typename V17, typename V18, typename V19, typename V20, typename V21, typename V22, typename V23, typename V24, typename V25, typename V26, typename V27, typename V28, typename V29, typename V30, typename V31, typename V32, typename V33, typename V34, typename V35, typename V36, typename V37, typename V38, typename V39, typename V40, typename V41, typename V42, typename V43, typename V44, typename V45, typename V46, typename V47, typename V48, typename V49, typename V50, typename V51, typename V52, typename V53, typename V54, typename V55, typename V56, typename V57, typename V58, typename V59, typename V60, typename V61, typename V62, typename V63, typename V64, typename V65, typename V66, typename V67, typename V68, typename V69, typename V70, typename V71, typename V72, typename V73, typename V74, typename V75, typename V76, typename V77, typename V78, typename V79, typename V80, typename V81, typename V82, typename V83, typename V84, typename V85, typename V86, typename V87, typename V88, typename V89, typename V90, typename V91, typename V92, typename V93, typename V94, typename V95, typename V96>
DbTable & DbTable::AddRow(V1 const &v1, V2 const &v2, V3 const &v3, V4 const &v4, V5 const &v5, V6 const &v6, V7 const &v7, V8 const &v8, V9 const &v9, V10 const &v10, V11 const &v11, V12 const &v12, V13 const &v13, V14 const &v14, V15 const &v15, V16 const &v16, V17 const &v17, V18 const &v18, V19 const &v19, V20 const &v20, V21 const &v21, V22 const &v22, V23 const &v23, V24 const &v24, V25 const &v25, V26 const &v26, V27 const &v27, V28 const &v28, V29 const &v29, V30 const &v30, V31 const &v31, V32 const &v32, V33 const &v33, V34 const &v34, V35 const &v35, V36 const &v36, V37 const &v37, V38 const &v38, V39 const &v39, V40 const &v40, V41 const &v41, V42 const &v42, V43 const &v43, V44 const &v44, V45 const &v45, V46 const &v46, V47 const &v47, V48 const &v48, V49 const &v49, V50 const &v50, V51 const &v51, V52 const &v52, V53 const &v53, V54 const &v54, V55 const &v55, V56 const &v56, V57 const &v57, V58 const &v58, V59 const &v59, V60 const &v60, V61 const &v61, V62 const &v62, V63 const &v63, V64 const &v64, V65 const &v65, V66 const &v66, V67 const &v67, V68 const &v68, V69 const &v69, V70 const &v70, V71 const &v71, V72 const &v72, V73 const &v73, V74 const &v74, V75 const &v75, V76 const &v76, V77 const &v77, V78 const &v78, V79 const &v79, V80 const &v80, V81 const &v81, V82 const &v82, V83 const &v83, V84 const &v84, V85 const &v85, V86 const &v86, V87 const &v87, V88 const &v88, V89 const &v89, V90 const &v90, V91 const &v91, V92 const &v92, V93 const &v93, V94 const &v94, V95 const &v95, V96 const &v96) {
    assert( _colNames.Length() == 96 );
    assert( _colTypes[0] == DbTypeIDs<V1>::ID() );
    assert( _colTypes[1] == DbTypeIDs<V2>::ID() );
    assert( _colTypes[2] == DbTypeIDs<V3>::ID() );
    assert( _colTypes[3] == DbTypeIDs<V4>::ID() );
    assert( _colTypes[4] == DbTypeIDs<V5>::ID() );
    assert( _colTypes[5] == DbTypeIDs<V6>::ID() );
    assert( _colTypes[6] == DbTypeIDs<V7>::ID() );
    assert( _colTypes[7] == DbTypeIDs<V8>::ID() );
    assert( _colTypes[8] == DbTypeIDs<V9>::ID() );
    assert( _colTypes[9] == DbTypeIDs<V10>::ID() );
    assert( _colTypes[10] == DbTypeIDs<V11>::ID() );
    assert( _colTypes[11] == DbTypeIDs<V12>::ID() );
    assert( _colTypes[12] == DbTypeIDs<V13>::ID() );
    assert( _colTypes[13] == DbTypeIDs<V14>::ID() );
    assert( _colTypes[14] == DbTypeIDs<V15>::ID() );
    assert( _colTypes[15] == DbTypeIDs<V16>::ID() );
    assert( _colTypes[16] == DbTypeIDs<V17>::ID() );
    assert( _colTypes[17] == DbTypeIDs<V18>::ID() );
    assert( _colTypes[18] == DbTypeIDs<V19>::ID() );
    assert( _colTypes[19] == DbTypeIDs<V20>::ID() );
    assert( _colTypes[20] == DbTypeIDs<V21>::ID() );
    assert( _colTypes[21] == DbTypeIDs<V22>::ID() );
    assert( _colTypes[22] == DbTypeIDs<V23>::ID() );
    assert( _colTypes[23] == DbTypeIDs<V24>::ID() );
    assert( _colTypes[24] == DbTypeIDs<V25>::ID() );
    assert( _colTypes[25] == DbTypeIDs<V26>::ID() );
    assert( _colTypes[26] == DbTypeIDs<V27>::ID() );
    assert( _colTypes[27] == DbTypeIDs<V28>::ID() );
    assert( _colTypes[28] == DbTypeIDs<V29>::ID() );
    assert( _colTypes[29] == DbTypeIDs<V30>::ID() );
    assert( _colTypes[30] == DbTypeIDs<V31>::ID() );
    assert( _colTypes[31] == DbTypeIDs<V32>::ID() );
    assert( _colTypes[32] == DbTypeIDs<V33>::ID() );
    assert( _colTypes[33] == DbTypeIDs<V34>::ID() );
    assert( _colTypes[34] == DbTypeIDs<V35>::ID() );
    assert( _colTypes[35] == DbTypeIDs<V36>::ID() );
    assert( _colTypes[36] == DbTypeIDs<V37>::ID() );
    assert( _colTypes[37] == DbTypeIDs<V38>::ID() );
    assert( _colTypes[38] == DbTypeIDs<V39>::ID() );
    assert( _colTypes[39] == DbTypeIDs<V40>::ID() );
    assert( _colTypes[40] == DbTypeIDs<V41>::ID() );
    assert( _colTypes[41] == DbTypeIDs<V42>::ID() );
    assert( _colTypes[42] == DbTypeIDs<V43>::ID() );
    assert( _colTypes[43] == DbTypeIDs<V44>::ID() );
    assert( _colTypes[44] == DbTypeIDs<V45>::ID() );
    assert( _colTypes[45] == DbTypeIDs<V46>::ID() );
    assert( _colTypes[46] == DbTypeIDs<V47>::ID() );
    assert( _colTypes[47] == DbTypeIDs<V48>::ID() );
    assert( _colTypes[48] == DbTypeIDs<V49>::ID() );
    assert( _colTypes[49] == DbTypeIDs<V50>::ID() );
    assert( _colTypes[50] == DbTypeIDs<V51>::ID() );
    assert( _colTypes[51] == DbTypeIDs<V52>::ID() );
    assert( _colTypes[52] == DbTypeIDs<V53>::ID() );
    assert( _colTypes[53] == DbTypeIDs<V54>::ID() );
    assert( _colTypes[54] == DbTypeIDs<V55>::ID() );
    assert( _colTypes[55] == DbTypeIDs<V56>::ID() );
    assert( _colTypes[56] == DbTypeIDs<V57>::ID() );
    assert( _colTypes[57] == DbTypeIDs<V58>::ID() );
    assert( _colTypes[58] == DbTypeIDs<V59>::ID() );
    assert( _colTypes[59] == DbTypeIDs<V60>::ID() );
    assert( _colTypes[60] == DbTypeIDs<V61>::ID() );
    assert( _colTypes[61] == DbTypeIDs<V62>::ID() );
    assert( _colTypes[62] == DbTypeIDs<V63>::ID() );
    assert( _colTypes[63] == DbTypeIDs<V64>::ID() );
    assert( _colTypes[64] == DbTypeIDs<V65>::ID() );
    assert( _colTypes[65] == DbTypeIDs<V66>::ID() );
    assert( _colTypes[66] == DbTypeIDs<V67>::ID() );
    assert( _colTypes[67] == DbTypeIDs<V68>::ID() );
    assert( _colTypes[68] == DbTypeIDs<V69>::ID() );
    assert( _colTypes[69] == DbTypeIDs<V70>::ID() );
    assert( _colTypes[70] == DbTypeIDs<V71>::ID() );
    assert( _colTypes[71] == DbTypeIDs<V72>::ID() );
    assert( _colTypes[72] == DbTypeIDs<V73>::ID() );
    assert( _colTypes[73] == DbTypeIDs<V74>::ID() );
    assert( _colTypes[74] == DbTypeIDs<V75>::ID() );
    assert( _colTypes[75] == DbTypeIDs<V76>::ID() );
    assert( _colTypes[76] == DbTypeIDs<V77>::ID() );
    assert( _colTypes[77] == DbTypeIDs<V78>::ID() );
    assert( _colTypes[78] == DbTypeIDs<V79>::ID() );
    assert( _colTypes[79] == DbTypeIDs<V80>::ID() );
    assert( _colTypes[80] == DbTypeIDs<V81>::ID() );
    assert( _colTypes[81] == DbTypeIDs<V82>::ID() );
    assert( _colTypes[82] == DbTypeIDs<V83>::ID() );
    assert( _colTypes[83] == DbTypeIDs<V84>::ID() );
    assert( _colTypes[84] == DbTypeIDs<V85>::ID() );
    assert( _colTypes[85] == DbTypeIDs<V86>::ID() );
    assert( _colTypes[86] == DbTypeIDs<V87>::ID() );
    assert( _colTypes[87] == DbTypeIDs<V88>::ID() );
    assert( _colTypes[88] == DbTypeIDs<V89>::ID() );
    assert( _colTypes[89] == DbTypeIDs<V90>::ID() );
    assert( _colTypes[90] == DbTypeIDs<V91>::ID() );
    assert( _colTypes[91] == DbTypeIDs<V92>::ID() );
    assert( _colTypes[92] == DbTypeIDs<V93>::ID() );
    assert( _colTypes[93] == DbTypeIDs<V94>::ID() );
    assert( _colTypes[94] == DbTypeIDs<V95>::ID() );
    assert( _colTypes[95] == DbTypeIDs<V96>::ID() );
    ((List<V1>*)_colDatas[0])->Add(v1);
    ((List<V2>*)_colDatas[1])->Add(v2);
    ((List<V3>*)_colDatas[2])->Add(v3);
    ((List<V4>*)_colDatas[3])->Add(v4);
    ((List<V5>*)_colDatas[4])->Add(v5);
    ((List<V6>*)_colDatas[5])->Add(v6);
    ((List<V7>*)_colDatas[6])->Add(v7);
    ((List<V8>*)_colDatas[7])->Add(v8);
    ((List<V9>*)_colDatas[8])->Add(v9);
    ((List<V10>*)_colDatas[9])->Add(v10);
    ((List<V11>*)_colDatas[10])->Add(v11);
    ((List<V12>*)_colDatas[11])->Add(v12);
    ((List<V13>*)_colDatas[12])->Add(v13);
    ((List<V14>*)_colDatas[13])->Add(v14);
    ((List<V15>*)_colDatas[14])->Add(v15);
    ((List<V16>*)_colDatas[15])->Add(v16);
    ((List<V17>*)_colDatas[16])->Add(v17);
    ((List<V18>*)_colDatas[17])->Add(v18);
    ((List<V19>*)_colDatas[18])->Add(v19);
    ((List<V20>*)_colDatas[19])->Add(v20);
    ((List<V21>*)_colDatas[20])->Add(v21);
    ((List<V22>*)_colDatas[21])->Add(v22);
    ((List<V23>*)_colDatas[22])->Add(v23);
    ((List<V24>*)_colDatas[23])->Add(v24);
    ((List<V25>*)_colDatas[24])->Add(v25);
    ((List<V26>*)_colDatas[25])->Add(v26);
    ((List<V27>*)_colDatas[26])->Add(v27);
    ((List<V28>*)_colDatas[27])->Add(v28);
    ((List<V29>*)_colDatas[28])->Add(v29);
    ((List<V30>*)_colDatas[29])->Add(v30);
    ((List<V31>*)_colDatas[30])->Add(v31);
    ((List<V32>*)_colDatas[31])->Add(v32);
    ((List<V33>*)_colDatas[32])->Add(v33);
    ((List<V34>*)_colDatas[33])->Add(v34);
    ((List<V35>*)_colDatas[34])->Add(v35);
    ((List<V36>*)_colDatas[35])->Add(v36);
    ((List<V37>*)_colDatas[36])->Add(v37);
    ((List<V38>*)_colDatas[37])->Add(v38);
    ((List<V39>*)_colDatas[38])->Add(v39);
    ((List<V40>*)_colDatas[39])->Add(v40);
    ((List<V41>*)_colDatas[40])->Add(v41);
    ((List<V42>*)_colDatas[41])->Add(v42);
    ((List<V43>*)_colDatas[42])->Add(v43);
    ((List<V44>*)_colDatas[43])->Add(v44);
    ((List<V45>*)_colDatas[44])->Add(v45);
    ((List<V46>*)_colDatas[45])->Add(v46);
    ((List<V47>*)_colDatas[46])->Add(v47);
    ((List<V48>*)_colDatas[47])->Add(v48);
    ((List<V49>*)_colDatas[48])->Add(v49);
    ((List<V50>*)_colDatas[49])->Add(v50);
    ((List<V51>*)_colDatas[50])->Add(v51);
    ((List<V52>*)_colDatas[51])->Add(v52);
    ((List<V53>*)_colDatas[52])->Add(v53);
    ((List<V54>*)_colDatas[53])->Add(v54);
    ((List<V55>*)_colDatas[54])->Add(v55);
    ((List<V56>*)_colDatas[55])->Add(v56);
    ((List<V57>*)_colDatas[56])->Add(v57);
    ((List<V58>*)_colDatas[57])->Add(v58);
    ((List<V59>*)_colDatas[58])->Add(v59);
    ((List<V60>*)_colDatas[59])->Add(v60);
    ((List<V61>*)_colDatas[60])->Add(v61);
    ((List<V62>*)_colDatas[61])->Add(v62);
    ((List<V63>*)_colDatas[62])->Add(v63);
    ((List<V64>*)_colDatas[63])->Add(v64);
    ((List<V65>*)_colDatas[64])->Add(v65);
    ((List<V66>*)_colDatas[65])->Add(v66);
    ((List<V67>*)_colDatas[66])->Add(v67);
    ((List<V68>*)_colDatas[67])->Add(v68);
    ((List<V69>*)_colDatas[68])->Add(v69);
    ((List<V70>*)_colDatas[69])->Add(v70);
    ((List<V71>*)_colDatas[70])->Add(v71);
    ((List<V72>*)_colDatas[71])->Add(v72);
    ((List<V73>*)_colDatas[72])->Add(v73);
    ((List<V74>*)_colDatas[73])->Add(v74);
    ((List<V75>*)_colDatas[74])->Add(v75);
    ((List<V76>*)_colDatas[75])->Add(v76);
    ((List<V77>*)_colDatas[76])->Add(v77);
    ((List<V78>*)_colDatas[77])->Add(v78);
    ((List<V79>*)_colDatas[78])->Add(v79);
    ((List<V80>*)_colDatas[79])->Add(v80);
    ((List<V81>*)_colDatas[80])->Add(v81);
    ((List<V82>*)_colDatas[81])->Add(v82);
    ((List<V83>*)_colDatas[82])->Add(v83);
    ((List<V84>*)_colDatas[83])->Add(v84);
    ((List<V85>*)_colDatas[84])->Add(v85);
    ((List<V86>*)_colDatas[85])->Add(v86);
    ((List<V87>*)_colDatas[86])->Add(v87);
    ((List<V88>*)_colDatas[87])->Add(v88);
    ((List<V89>*)_colDatas[88])->Add(v89);
    ((List<V90>*)_colDatas[89])->Add(v90);
    ((List<V91>*)_colDatas[90])->Add(v91);
    ((List<V92>*)_colDatas[91])->Add(v92);
    ((List<V93>*)_colDatas[92])->Add(v93);
    ((List<V94>*)_colDatas[93])->Add(v94);
    ((List<V95>*)_colDatas[94])->Add(v95);
    ((List<V96>*)_colDatas[95])->Add(v96);
    ++_rowCount;
    return *this;
}
template<typename V1, typename V2, typename V3, typename V4, typename V5, typename V6, typename V7, typename V8, typename V9, typename V10, typename V11, typename V12, typename V13, typename V14, typename V15, typename V16, typename V17, typename V18, typename V19, typename V20, typename V21, typename V22, typename V23, typename V24, typename V25, typename V26, typename V27, typename V28, typename V29, typename V30, typename V31, typename V32, typename V33, typename V34, typename V35, typename V36, typename V37, typename V38, typename V39, typename V40, typename V41, typename V42, typename V43, typename V44, typename V45, typename V46, typename V47, typename V48, typename V49, typename V50, typename V51, typename V52, typename V53, typename V54, typename V55, typename V56, typename V57, typename V58, typename V59, typename V60, typename V61, typename V62, typename V63, typename V64, typename V65, typename V66, typename V67, typename V68, typename V69, typename V70, typename V71, typename V72, typename V73, typename V74, typename V75, typename V76, typename V77, typename V78, typename V79, typename V80, typename V81, typename V82, typename V83, typename V84, typename V85, typename V86, typename V87, typename V88, typename V89, typename V90, typename V91, typename V92, typename V93, typename V94, typename V95, typename V96, typename V97>
DbTable & DbTable::AddRow(V1 const &v1, V2 const &v2, V3 const &v3, V4 const &v4, V5 const &v5, V6 const &v6, V7 const &v7, V8 const &v8, V9 const &v9, V10 const &v10, V11 const &v11, V12 const &v12, V13 const &v13, V14 const &v14, V15 const &v15, V16 const &v16, V17 const &v17, V18 const &v18, V19 const &v19, V20 const &v20, V21 const &v21, V22 const &v22, V23 const &v23, V24 const &v24, V25 const &v25, V26 const &v26, V27 const &v27, V28 const &v28, V29 const &v29, V30 const &v30, V31 const &v31, V32 const &v32, V33 const &v33, V34 const &v34, V35 const &v35, V36 const &v36, V37 const &v37, V38 const &v38, V39 const &v39, V40 const &v40, V41 const &v41, V42 const &v42, V43 const &v43, V44 const &v44, V45 const &v45, V46 const &v46, V47 const &v47, V48 const &v48, V49 const &v49, V50 const &v50, V51 const &v51, V52 const &v52, V53 const &v53, V54 const &v54, V55 const &v55, V56 const &v56, V57 const &v57, V58 const &v58, V59 const &v59, V60 const &v60, V61 const &v61, V62 const &v62, V63 const &v63, V64 const &v64, V65 const &v65, V66 const &v66, V67 const &v67, V68 const &v68, V69 const &v69, V70 const &v70, V71 const &v71, V72 const &v72, V73 const &v73, V74 const &v74, V75 const &v75, V76 const &v76, V77 const &v77, V78 const &v78, V79 const &v79, V80 const &v80, V81 const &v81, V82 const &v82, V83 const &v83, V84 const &v84, V85 const &v85, V86 const &v86, V87 const &v87, V88 const &v88, V89 const &v89, V90 const &v90, V91 const &v91, V92 const &v92, V93 const &v93, V94 const &v94, V95 const &v95, V96 const &v96, V97 const &v97) {
    assert( _colNames.Length() == 97 );
    assert( _colTypes[0] == DbTypeIDs<V1>::ID() );
    assert( _colTypes[1] == DbTypeIDs<V2>::ID() );
    assert( _colTypes[2] == DbTypeIDs<V3>::ID() );
    assert( _colTypes[3] == DbTypeIDs<V4>::ID() );
    assert( _colTypes[4] == DbTypeIDs<V5>::ID() );
    assert( _colTypes[5] == DbTypeIDs<V6>::ID() );
    assert( _colTypes[6] == DbTypeIDs<V7>::ID() );
    assert( _colTypes[7] == DbTypeIDs<V8>::ID() );
    assert( _colTypes[8] == DbTypeIDs<V9>::ID() );
    assert( _colTypes[9] == DbTypeIDs<V10>::ID() );
    assert( _colTypes[10] == DbTypeIDs<V11>::ID() );
    assert( _colTypes[11] == DbTypeIDs<V12>::ID() );
    assert( _colTypes[12] == DbTypeIDs<V13>::ID() );
    assert( _colTypes[13] == DbTypeIDs<V14>::ID() );
    assert( _colTypes[14] == DbTypeIDs<V15>::ID() );
    assert( _colTypes[15] == DbTypeIDs<V16>::ID() );
    assert( _colTypes[16] == DbTypeIDs<V17>::ID() );
    assert( _colTypes[17] == DbTypeIDs<V18>::ID() );
    assert( _colTypes[18] == DbTypeIDs<V19>::ID() );
    assert( _colTypes[19] == DbTypeIDs<V20>::ID() );
    assert( _colTypes[20] == DbTypeIDs<V21>::ID() );
    assert( _colTypes[21] == DbTypeIDs<V22>::ID() );
    assert( _colTypes[22] == DbTypeIDs<V23>::ID() );
    assert( _colTypes[23] == DbTypeIDs<V24>::ID() );
    assert( _colTypes[24] == DbTypeIDs<V25>::ID() );
    assert( _colTypes[25] == DbTypeIDs<V26>::ID() );
    assert( _colTypes[26] == DbTypeIDs<V27>::ID() );
    assert( _colTypes[27] == DbTypeIDs<V28>::ID() );
    assert( _colTypes[28] == DbTypeIDs<V29>::ID() );
    assert( _colTypes[29] == DbTypeIDs<V30>::ID() );
    assert( _colTypes[30] == DbTypeIDs<V31>::ID() );
    assert( _colTypes[31] == DbTypeIDs<V32>::ID() );
    assert( _colTypes[32] == DbTypeIDs<V33>::ID() );
    assert( _colTypes[33] == DbTypeIDs<V34>::ID() );
    assert( _colTypes[34] == DbTypeIDs<V35>::ID() );
    assert( _colTypes[35] == DbTypeIDs<V36>::ID() );
    assert( _colTypes[36] == DbTypeIDs<V37>::ID() );
    assert( _colTypes[37] == DbTypeIDs<V38>::ID() );
    assert( _colTypes[38] == DbTypeIDs<V39>::ID() );
    assert( _colTypes[39] == DbTypeIDs<V40>::ID() );
    assert( _colTypes[40] == DbTypeIDs<V41>::ID() );
    assert( _colTypes[41] == DbTypeIDs<V42>::ID() );
    assert( _colTypes[42] == DbTypeIDs<V43>::ID() );
    assert( _colTypes[43] == DbTypeIDs<V44>::ID() );
    assert( _colTypes[44] == DbTypeIDs<V45>::ID() );
    assert( _colTypes[45] == DbTypeIDs<V46>::ID() );
    assert( _colTypes[46] == DbTypeIDs<V47>::ID() );
    assert( _colTypes[47] == DbTypeIDs<V48>::ID() );
    assert( _colTypes[48] == DbTypeIDs<V49>::ID() );
    assert( _colTypes[49] == DbTypeIDs<V50>::ID() );
    assert( _colTypes[50] == DbTypeIDs<V51>::ID() );
    assert( _colTypes[51] == DbTypeIDs<V52>::ID() );
    assert( _colTypes[52] == DbTypeIDs<V53>::ID() );
    assert( _colTypes[53] == DbTypeIDs<V54>::ID() );
    assert( _colTypes[54] == DbTypeIDs<V55>::ID() );
    assert( _colTypes[55] == DbTypeIDs<V56>::ID() );
    assert( _colTypes[56] == DbTypeIDs<V57>::ID() );
    assert( _colTypes[57] == DbTypeIDs<V58>::ID() );
    assert( _colTypes[58] == DbTypeIDs<V59>::ID() );
    assert( _colTypes[59] == DbTypeIDs<V60>::ID() );
    assert( _colTypes[60] == DbTypeIDs<V61>::ID() );
    assert( _colTypes[61] == DbTypeIDs<V62>::ID() );
    assert( _colTypes[62] == DbTypeIDs<V63>::ID() );
    assert( _colTypes[63] == DbTypeIDs<V64>::ID() );
    assert( _colTypes[64] == DbTypeIDs<V65>::ID() );
    assert( _colTypes[65] == DbTypeIDs<V66>::ID() );
    assert( _colTypes[66] == DbTypeIDs<V67>::ID() );
    assert( _colTypes[67] == DbTypeIDs<V68>::ID() );
    assert( _colTypes[68] == DbTypeIDs<V69>::ID() );
    assert( _colTypes[69] == DbTypeIDs<V70>::ID() );
    assert( _colTypes[70] == DbTypeIDs<V71>::ID() );
    assert( _colTypes[71] == DbTypeIDs<V72>::ID() );
    assert( _colTypes[72] == DbTypeIDs<V73>::ID() );
    assert( _colTypes[73] == DbTypeIDs<V74>::ID() );
    assert( _colTypes[74] == DbTypeIDs<V75>::ID() );
    assert( _colTypes[75] == DbTypeIDs<V76>::ID() );
    assert( _colTypes[76] == DbTypeIDs<V77>::ID() );
    assert( _colTypes[77] == DbTypeIDs<V78>::ID() );
    assert( _colTypes[78] == DbTypeIDs<V79>::ID() );
    assert( _colTypes[79] == DbTypeIDs<V80>::ID() );
    assert( _colTypes[80] == DbTypeIDs<V81>::ID() );
    assert( _colTypes[81] == DbTypeIDs<V82>::ID() );
    assert( _colTypes[82] == DbTypeIDs<V83>::ID() );
    assert( _colTypes[83] == DbTypeIDs<V84>::ID() );
    assert( _colTypes[84] == DbTypeIDs<V85>::ID() );
    assert( _colTypes[85] == DbTypeIDs<V86>::ID() );
    assert( _colTypes[86] == DbTypeIDs<V87>::ID() );
    assert( _colTypes[87] == DbTypeIDs<V88>::ID() );
    assert( _colTypes[88] == DbTypeIDs<V89>::ID() );
    assert( _colTypes[89] == DbTypeIDs<V90>::ID() );
    assert( _colTypes[90] == DbTypeIDs<V91>::ID() );
    assert( _colTypes[91] == DbTypeIDs<V92>::ID() );
    assert( _colTypes[92] == DbTypeIDs<V93>::ID() );
    assert( _colTypes[93] == DbTypeIDs<V94>::ID() );
    assert( _colTypes[94] == DbTypeIDs<V95>::ID() );
    assert( _colTypes[95] == DbTypeIDs<V96>::ID() );
    assert( _colTypes[96] == DbTypeIDs<V97>::ID() );
    ((List<V1>*)_colDatas[0])->Add(v1);
    ((List<V2>*)_colDatas[1])->Add(v2);
    ((List<V3>*)_colDatas[2])->Add(v3);
    ((List<V4>*)_colDatas[3])->Add(v4);
    ((List<V5>*)_colDatas[4])->Add(v5);
    ((List<V6>*)_colDatas[5])->Add(v6);
    ((List<V7>*)_colDatas[6])->Add(v7);
    ((List<V8>*)_colDatas[7])->Add(v8);
    ((List<V9>*)_colDatas[8])->Add(v9);
    ((List<V10>*)_colDatas[9])->Add(v10);
    ((List<V11>*)_colDatas[10])->Add(v11);
    ((List<V12>*)_colDatas[11])->Add(v12);
    ((List<V13>*)_colDatas[12])->Add(v13);
    ((List<V14>*)_colDatas[13])->Add(v14);
    ((List<V15>*)_colDatas[14])->Add(v15);
    ((List<V16>*)_colDatas[15])->Add(v16);
    ((List<V17>*)_colDatas[16])->Add(v17);
    ((List<V18>*)_colDatas[17])->Add(v18);
    ((List<V19>*)_colDatas[18])->Add(v19);
    ((List<V20>*)_colDatas[19])->Add(v20);
    ((List<V21>*)_colDatas[20])->Add(v21);
    ((List<V22>*)_colDatas[21])->Add(v22);
    ((List<V23>*)_colDatas[22])->Add(v23);
    ((List<V24>*)_colDatas[23])->Add(v24);
    ((List<V25>*)_colDatas[24])->Add(v25);
    ((List<V26>*)_colDatas[25])->Add(v26);
    ((List<V27>*)_colDatas[26])->Add(v27);
    ((List<V28>*)_colDatas[27])->Add(v28);
    ((List<V29>*)_colDatas[28])->Add(v29);
    ((List<V30>*)_colDatas[29])->Add(v30);
    ((List<V31>*)_colDatas[30])->Add(v31);
    ((List<V32>*)_colDatas[31])->Add(v32);
    ((List<V33>*)_colDatas[32])->Add(v33);
    ((List<V34>*)_colDatas[33])->Add(v34);
    ((List<V35>*)_colDatas[34])->Add(v35);
    ((List<V36>*)_colDatas[35])->Add(v36);
    ((List<V37>*)_colDatas[36])->Add(v37);
    ((List<V38>*)_colDatas[37])->Add(v38);
    ((List<V39>*)_colDatas[38])->Add(v39);
    ((List<V40>*)_colDatas[39])->Add(v40);
    ((List<V41>*)_colDatas[40])->Add(v41);
    ((List<V42>*)_colDatas[41])->Add(v42);
    ((List<V43>*)_colDatas[42])->Add(v43);
    ((List<V44>*)_colDatas[43])->Add(v44);
    ((List<V45>*)_colDatas[44])->Add(v45);
    ((List<V46>*)_colDatas[45])->Add(v46);
    ((List<V47>*)_colDatas[46])->Add(v47);
    ((List<V48>*)_colDatas[47])->Add(v48);
    ((List<V49>*)_colDatas[48])->Add(v49);
    ((List<V50>*)_colDatas[49])->Add(v50);
    ((List<V51>*)_colDatas[50])->Add(v51);
    ((List<V52>*)_colDatas[51])->Add(v52);
    ((List<V53>*)_colDatas[52])->Add(v53);
    ((List<V54>*)_colDatas[53])->Add(v54);
    ((List<V55>*)_colDatas[54])->Add(v55);
    ((List<V56>*)_colDatas[55])->Add(v56);
    ((List<V57>*)_colDatas[56])->Add(v57);
    ((List<V58>*)_colDatas[57])->Add(v58);
    ((List<V59>*)_colDatas[58])->Add(v59);
    ((List<V60>*)_colDatas[59])->Add(v60);
    ((List<V61>*)_colDatas[60])->Add(v61);
    ((List<V62>*)_colDatas[61])->Add(v62);
    ((List<V63>*)_colDatas[62])->Add(v63);
    ((List<V64>*)_colDatas[63])->Add(v64);
    ((List<V65>*)_colDatas[64])->Add(v65);
    ((List<V66>*)_colDatas[65])->Add(v66);
    ((List<V67>*)_colDatas[66])->Add(v67);
    ((List<V68>*)_colDatas[67])->Add(v68);
    ((List<V69>*)_colDatas[68])->Add(v69);
    ((List<V70>*)_colDatas[69])->Add(v70);
    ((List<V71>*)_colDatas[70])->Add(v71);
    ((List<V72>*)_colDatas[71])->Add(v72);
    ((List<V73>*)_colDatas[72])->Add(v73);
    ((List<V74>*)_colDatas[73])->Add(v74);
    ((List<V75>*)_colDatas[74])->Add(v75);
    ((List<V76>*)_colDatas[75])->Add(v76);
    ((List<V77>*)_colDatas[76])->Add(v77);
    ((List<V78>*)_colDatas[77])->Add(v78);
    ((List<V79>*)_colDatas[78])->Add(v79);
    ((List<V80>*)_colDatas[79])->Add(v80);
    ((List<V81>*)_colDatas[80])->Add(v81);
    ((List<V82>*)_colDatas[81])->Add(v82);
    ((List<V83>*)_colDatas[82])->Add(v83);
    ((List<V84>*)_colDatas[83])->Add(v84);
    ((List<V85>*)_colDatas[84])->Add(v85);
    ((List<V86>*)_colDatas[85])->Add(v86);
    ((List<V87>*)_colDatas[86])->Add(v87);
    ((List<V88>*)_colDatas[87])->Add(v88);
    ((List<V89>*)_colDatas[88])->Add(v89);
    ((List<V90>*)_colDatas[89])->Add(v90);
    ((List<V91>*)_colDatas[90])->Add(v91);
    ((List<V92>*)_colDatas[91])->Add(v92);
    ((List<V93>*)_colDatas[92])->Add(v93);
    ((List<V94>*)_colDatas[93])->Add(v94);
    ((List<V95>*)_colDatas[94])->Add(v95);
    ((List<V96>*)_colDatas[95])->Add(v96);
    ((List<V97>*)_colDatas[96])->Add(v97);
    ++_rowCount;
    return *this;
}
template<typename V1, typename V2, typename V3, typename V4, typename V5, typename V6, typename V7, typename V8, typename V9, typename V10, typename V11, typename V12, typename V13, typename V14, typename V15, typename V16, typename V17, typename V18, typename V19, typename V20, typename V21, typename V22, typename V23, typename V24, typename V25, typename V26, typename V27, typename V28, typename V29, typename V30, typename V31, typename V32, typename V33, typename V34, typename V35, typename V36, typename V37, typename V38, typename V39, typename V40, typename V41, typename V42, typename V43, typename V44, typename V45, typename V46, typename V47, typename V48, typename V49, typename V50, typename V51, typename V52, typename V53, typename V54, typename V55, typename V56, typename V57, typename V58, typename V59, typename V60, typename V61, typename V62, typename V63, typename V64, typename V65, typename V66, typename V67, typename V68, typename V69, typename V70, typename V71, typename V72, typename V73, typename V74, typename V75, typename V76, typename V77, typename V78, typename V79, typename V80, typename V81, typename V82, typename V83, typename V84, typename V85, typename V86, typename V87, typename V88, typename V89, typename V90, typename V91, typename V92, typename V93, typename V94, typename V95, typename V96, typename V97, typename V98>
DbTable & DbTable::AddRow(V1 const &v1, V2 const &v2, V3 const &v3, V4 const &v4, V5 const &v5, V6 const &v6, V7 const &v7, V8 const &v8, V9 const &v9, V10 const &v10, V11 const &v11, V12 const &v12, V13 const &v13, V14 const &v14, V15 const &v15, V16 const &v16, V17 const &v17, V18 const &v18, V19 const &v19, V20 const &v20, V21 const &v21, V22 const &v22, V23 const &v23, V24 const &v24, V25 const &v25, V26 const &v26, V27 const &v27, V28 const &v28, V29 const &v29, V30 const &v30, V31 const &v31, V32 const &v32, V33 const &v33, V34 const &v34, V35 const &v35, V36 const &v36, V37 const &v37, V38 const &v38, V39 const &v39, V40 const &v40, V41 const &v41, V42 const &v42, V43 const &v43, V44 const &v44, V45 const &v45, V46 const &v46, V47 const &v47, V48 const &v48, V49 const &v49, V50 const &v50, V51 const &v51, V52 const &v52, V53 const &v53, V54 const &v54, V55 const &v55, V56 const &v56, V57 const &v57, V58 const &v58, V59 const &v59, V60 const &v60, V61 const &v61, V62 const &v62, V63 const &v63, V64 const &v64, V65 const &v65, V66 const &v66, V67 const &v67, V68 const &v68, V69 const &v69, V70 const &v70, V71 const &v71, V72 const &v72, V73 const &v73, V74 const &v74, V75 const &v75, V76 const &v76, V77 const &v77, V78 const &v78, V79 const &v79, V80 const &v80, V81 const &v81, V82 const &v82, V83 const &v83, V84 const &v84, V85 const &v85, V86 const &v86, V87 const &v87, V88 const &v88, V89 const &v89, V90 const &v90, V91 const &v91, V92 const &v92, V93 const &v93, V94 const &v94, V95 const &v95, V96 const &v96, V97 const &v97, V98 const &v98) {
    assert( _colNames.Length() == 98 );
    assert( _colTypes[0] == DbTypeIDs<V1>::ID() );
    assert( _colTypes[1] == DbTypeIDs<V2>::ID() );
    assert( _colTypes[2] == DbTypeIDs<V3>::ID() );
    assert( _colTypes[3] == DbTypeIDs<V4>::ID() );
    assert( _colTypes[4] == DbTypeIDs<V5>::ID() );
    assert( _colTypes[5] == DbTypeIDs<V6>::ID() );
    assert( _colTypes[6] == DbTypeIDs<V7>::ID() );
    assert( _colTypes[7] == DbTypeIDs<V8>::ID() );
    assert( _colTypes[8] == DbTypeIDs<V9>::ID() );
    assert( _colTypes[9] == DbTypeIDs<V10>::ID() );
    assert( _colTypes[10] == DbTypeIDs<V11>::ID() );
    assert( _colTypes[11] == DbTypeIDs<V12>::ID() );
    assert( _colTypes[12] == DbTypeIDs<V13>::ID() );
    assert( _colTypes[13] == DbTypeIDs<V14>::ID() );
    assert( _colTypes[14] == DbTypeIDs<V15>::ID() );
    assert( _colTypes[15] == DbTypeIDs<V16>::ID() );
    assert( _colTypes[16] == DbTypeIDs<V17>::ID() );
    assert( _colTypes[17] == DbTypeIDs<V18>::ID() );
    assert( _colTypes[18] == DbTypeIDs<V19>::ID() );
    assert( _colTypes[19] == DbTypeIDs<V20>::ID() );
    assert( _colTypes[20] == DbTypeIDs<V21>::ID() );
    assert( _colTypes[21] == DbTypeIDs<V22>::ID() );
    assert( _colTypes[22] == DbTypeIDs<V23>::ID() );
    assert( _colTypes[23] == DbTypeIDs<V24>::ID() );
    assert( _colTypes[24] == DbTypeIDs<V25>::ID() );
    assert( _colTypes[25] == DbTypeIDs<V26>::ID() );
    assert( _colTypes[26] == DbTypeIDs<V27>::ID() );
    assert( _colTypes[27] == DbTypeIDs<V28>::ID() );
    assert( _colTypes[28] == DbTypeIDs<V29>::ID() );
    assert( _colTypes[29] == DbTypeIDs<V30>::ID() );
    assert( _colTypes[30] == DbTypeIDs<V31>::ID() );
    assert( _colTypes[31] == DbTypeIDs<V32>::ID() );
    assert( _colTypes[32] == DbTypeIDs<V33>::ID() );
    assert( _colTypes[33] == DbTypeIDs<V34>::ID() );
    assert( _colTypes[34] == DbTypeIDs<V35>::ID() );
    assert( _colTypes[35] == DbTypeIDs<V36>::ID() );
    assert( _colTypes[36] == DbTypeIDs<V37>::ID() );
    assert( _colTypes[37] == DbTypeIDs<V38>::ID() );
    assert( _colTypes[38] == DbTypeIDs<V39>::ID() );
    assert( _colTypes[39] == DbTypeIDs<V40>::ID() );
    assert( _colTypes[40] == DbTypeIDs<V41>::ID() );
    assert( _colTypes[41] == DbTypeIDs<V42>::ID() );
    assert( _colTypes[42] == DbTypeIDs<V43>::ID() );
    assert( _colTypes[43] == DbTypeIDs<V44>::ID() );
    assert( _colTypes[44] == DbTypeIDs<V45>::ID() );
    assert( _colTypes[45] == DbTypeIDs<V46>::ID() );
    assert( _colTypes[46] == DbTypeIDs<V47>::ID() );
    assert( _colTypes[47] == DbTypeIDs<V48>::ID() );
    assert( _colTypes[48] == DbTypeIDs<V49>::ID() );
    assert( _colTypes[49] == DbTypeIDs<V50>::ID() );
    assert( _colTypes[50] == DbTypeIDs<V51>::ID() );
    assert( _colTypes[51] == DbTypeIDs<V52>::ID() );
    assert( _colTypes[52] == DbTypeIDs<V53>::ID() );
    assert( _colTypes[53] == DbTypeIDs<V54>::ID() );
    assert( _colTypes[54] == DbTypeIDs<V55>::ID() );
    assert( _colTypes[55] == DbTypeIDs<V56>::ID() );
    assert( _colTypes[56] == DbTypeIDs<V57>::ID() );
    assert( _colTypes[57] == DbTypeIDs<V58>::ID() );
    assert( _colTypes[58] == DbTypeIDs<V59>::ID() );
    assert( _colTypes[59] == DbTypeIDs<V60>::ID() );
    assert( _colTypes[60] == DbTypeIDs<V61>::ID() );
    assert( _colTypes[61] == DbTypeIDs<V62>::ID() );
    assert( _colTypes[62] == DbTypeIDs<V63>::ID() );
    assert( _colTypes[63] == DbTypeIDs<V64>::ID() );
    assert( _colTypes[64] == DbTypeIDs<V65>::ID() );
    assert( _colTypes[65] == DbTypeIDs<V66>::ID() );
    assert( _colTypes[66] == DbTypeIDs<V67>::ID() );
    assert( _colTypes[67] == DbTypeIDs<V68>::ID() );
    assert( _colTypes[68] == DbTypeIDs<V69>::ID() );
    assert( _colTypes[69] == DbTypeIDs<V70>::ID() );
    assert( _colTypes[70] == DbTypeIDs<V71>::ID() );
    assert( _colTypes[71] == DbTypeIDs<V72>::ID() );
    assert( _colTypes[72] == DbTypeIDs<V73>::ID() );
    assert( _colTypes[73] == DbTypeIDs<V74>::ID() );
    assert( _colTypes[74] == DbTypeIDs<V75>::ID() );
    assert( _colTypes[75] == DbTypeIDs<V76>::ID() );
    assert( _colTypes[76] == DbTypeIDs<V77>::ID() );
    assert( _colTypes[77] == DbTypeIDs<V78>::ID() );
    assert( _colTypes[78] == DbTypeIDs<V79>::ID() );
    assert( _colTypes[79] == DbTypeIDs<V80>::ID() );
    assert( _colTypes[80] == DbTypeIDs<V81>::ID() );
    assert( _colTypes[81] == DbTypeIDs<V82>::ID() );
    assert( _colTypes[82] == DbTypeIDs<V83>::ID() );
    assert( _colTypes[83] == DbTypeIDs<V84>::ID() );
    assert( _colTypes[84] == DbTypeIDs<V85>::ID() );
    assert( _colTypes[85] == DbTypeIDs<V86>::ID() );
    assert( _colTypes[86] == DbTypeIDs<V87>::ID() );
    assert( _colTypes[87] == DbTypeIDs<V88>::ID() );
    assert( _colTypes[88] == DbTypeIDs<V89>::ID() );
    assert( _colTypes[89] == DbTypeIDs<V90>::ID() );
    assert( _colTypes[90] == DbTypeIDs<V91>::ID() );
    assert( _colTypes[91] == DbTypeIDs<V92>::ID() );
    assert( _colTypes[92] == DbTypeIDs<V93>::ID() );
    assert( _colTypes[93] == DbTypeIDs<V94>::ID() );
    assert( _colTypes[94] == DbTypeIDs<V95>::ID() );
    assert( _colTypes[95] == DbTypeIDs<V96>::ID() );
    assert( _colTypes[96] == DbTypeIDs<V97>::ID() );
    assert( _colTypes[97] == DbTypeIDs<V98>::ID() );
    ((List<V1>*)_colDatas[0])->Add(v1);
    ((List<V2>*)_colDatas[1])->Add(v2);
    ((List<V3>*)_colDatas[2])->Add(v3);
    ((List<V4>*)_colDatas[3])->Add(v4);
    ((List<V5>*)_colDatas[4])->Add(v5);
    ((List<V6>*)_colDatas[5])->Add(v6);
    ((List<V7>*)_colDatas[6])->Add(v7);
    ((List<V8>*)_colDatas[7])->Add(v8);
    ((List<V9>*)_colDatas[8])->Add(v9);
    ((List<V10>*)_colDatas[9])->Add(v10);
    ((List<V11>*)_colDatas[10])->Add(v11);
    ((List<V12>*)_colDatas[11])->Add(v12);
    ((List<V13>*)_colDatas[12])->Add(v13);
    ((List<V14>*)_colDatas[13])->Add(v14);
    ((List<V15>*)_colDatas[14])->Add(v15);
    ((List<V16>*)_colDatas[15])->Add(v16);
    ((List<V17>*)_colDatas[16])->Add(v17);
    ((List<V18>*)_colDatas[17])->Add(v18);
    ((List<V19>*)_colDatas[18])->Add(v19);
    ((List<V20>*)_colDatas[19])->Add(v20);
    ((List<V21>*)_colDatas[20])->Add(v21);
    ((List<V22>*)_colDatas[21])->Add(v22);
    ((List<V23>*)_colDatas[22])->Add(v23);
    ((List<V24>*)_colDatas[23])->Add(v24);
    ((List<V25>*)_colDatas[24])->Add(v25);
    ((List<V26>*)_colDatas[25])->Add(v26);
    ((List<V27>*)_colDatas[26])->Add(v27);
    ((List<V28>*)_colDatas[27])->Add(v28);
    ((List<V29>*)_colDatas[28])->Add(v29);
    ((List<V30>*)_colDatas[29])->Add(v30);
    ((List<V31>*)_colDatas[30])->Add(v31);
    ((List<V32>*)_colDatas[31])->Add(v32);
    ((List<V33>*)_colDatas[32])->Add(v33);
    ((List<V34>*)_colDatas[33])->Add(v34);
    ((List<V35>*)_colDatas[34])->Add(v35);
    ((List<V36>*)_colDatas[35])->Add(v36);
    ((List<V37>*)_colDatas[36])->Add(v37);
    ((List<V38>*)_colDatas[37])->Add(v38);
    ((List<V39>*)_colDatas[38])->Add(v39);
    ((List<V40>*)_colDatas[39])->Add(v40);
    ((List<V41>*)_colDatas[40])->Add(v41);
    ((List<V42>*)_colDatas[41])->Add(v42);
    ((List<V43>*)_colDatas[42])->Add(v43);
    ((List<V44>*)_colDatas[43])->Add(v44);
    ((List<V45>*)_colDatas[44])->Add(v45);
    ((List<V46>*)_colDatas[45])->Add(v46);
    ((List<V47>*)_colDatas[46])->Add(v47);
    ((List<V48>*)_colDatas[47])->Add(v48);
    ((List<V49>*)_colDatas[48])->Add(v49);
    ((List<V50>*)_colDatas[49])->Add(v50);
    ((List<V51>*)_colDatas[50])->Add(v51);
    ((List<V52>*)_colDatas[51])->Add(v52);
    ((List<V53>*)_colDatas[52])->Add(v53);
    ((List<V54>*)_colDatas[53])->Add(v54);
    ((List<V55>*)_colDatas[54])->Add(v55);
    ((List<V56>*)_colDatas[55])->Add(v56);
    ((List<V57>*)_colDatas[56])->Add(v57);
    ((List<V58>*)_colDatas[57])->Add(v58);
    ((List<V59>*)_colDatas[58])->Add(v59);
    ((List<V60>*)_colDatas[59])->Add(v60);
    ((List<V61>*)_colDatas[60])->Add(v61);
    ((List<V62>*)_colDatas[61])->Add(v62);
    ((List<V63>*)_colDatas[62])->Add(v63);
    ((List<V64>*)_colDatas[63])->Add(v64);
    ((List<V65>*)_colDatas[64])->Add(v65);
    ((List<V66>*)_colDatas[65])->Add(v66);
    ((List<V67>*)_colDatas[66])->Add(v67);
    ((List<V68>*)_colDatas[67])->Add(v68);
    ((List<V69>*)_colDatas[68])->Add(v69);
    ((List<V70>*)_colDatas[69])->Add(v70);
    ((List<V71>*)_colDatas[70])->Add(v71);
    ((List<V72>*)_colDatas[71])->Add(v72);
    ((List<V73>*)_colDatas[72])->Add(v73);
    ((List<V74>*)_colDatas[73])->Add(v74);
    ((List<V75>*)_colDatas[74])->Add(v75);
    ((List<V76>*)_colDatas[75])->Add(v76);
    ((List<V77>*)_colDatas[76])->Add(v77);
    ((List<V78>*)_colDatas[77])->Add(v78);
    ((List<V79>*)_colDatas[78])->Add(v79);
    ((List<V80>*)_colDatas[79])->Add(v80);
    ((List<V81>*)_colDatas[80])->Add(v81);
    ((List<V82>*)_colDatas[81])->Add(v82);
    ((List<V83>*)_colDatas[82])->Add(v83);
    ((List<V84>*)_colDatas[83])->Add(v84);
    ((List<V85>*)_colDatas[84])->Add(v85);
    ((List<V86>*)_colDatas[85])->Add(v86);
    ((List<V87>*)_colDatas[86])->Add(v87);
    ((List<V88>*)_colDatas[87])->Add(v88);
    ((List<V89>*)_colDatas[88])->Add(v89);
    ((List<V90>*)_colDatas[89])->Add(v90);
    ((List<V91>*)_colDatas[90])->Add(v91);
    ((List<V92>*)_colDatas[91])->Add(v92);
    ((List<V93>*)_colDatas[92])->Add(v93);
    ((List<V94>*)_colDatas[93])->Add(v94);
    ((List<V95>*)_colDatas[94])->Add(v95);
    ((List<V96>*)_colDatas[95])->Add(v96);
    ((List<V97>*)_colDatas[96])->Add(v97);
    ((List<V98>*)_colDatas[97])->Add(v98);
    ++_rowCount;
    return *this;
}
template<typename V1, typename V2, typename V3, typename V4, typename V5, typename V6, typename V7, typename V8, typename V9, typename V10, typename V11, typename V12, typename V13, typename V14, typename V15, typename V16, typename V17, typename V18, typename V19, typename V20, typename V21, typename V22, typename V23, typename V24, typename V25, typename V26, typename V27, typename V28, typename V29, typename V30, typename V31, typename V32, typename V33, typename V34, typename V35, typename V36, typename V37, typename V38, typename V39, typename V40, typename V41, typename V42, typename V43, typename V44, typename V45, typename V46, typename V47, typename V48, typename V49, typename V50, typename V51, typename V52, typename V53, typename V54, typename V55, typename V56, typename V57, typename V58, typename V59, typename V60, typename V61, typename V62, typename V63, typename V64, typename V65, typename V66, typename V67, typename V68, typename V69, typename V70, typename V71, typename V72, typename V73, typename V74, typename V75, typename V76, typename V77, typename V78, typename V79, typename V80, typename V81, typename V82, typename V83, typename V84, typename V85, typename V86, typename V87, typename V88, typename V89, typename V90, typename V91, typename V92, typename V93, typename V94, typename V95, typename V96, typename V97, typename V98, typename V99>
DbTable & DbTable::AddRow(V1 const &v1, V2 const &v2, V3 const &v3, V4 const &v4, V5 const &v5, V6 const &v6, V7 const &v7, V8 const &v8, V9 const &v9, V10 const &v10, V11 const &v11, V12 const &v12, V13 const &v13, V14 const &v14, V15 const &v15, V16 const &v16, V17 const &v17, V18 const &v18, V19 const &v19, V20 const &v20, V21 const &v21, V22 const &v22, V23 const &v23, V24 const &v24, V25 const &v25, V26 const &v26, V27 const &v27, V28 const &v28, V29 const &v29, V30 const &v30, V31 const &v31, V32 const &v32, V33 const &v33, V34 const &v34, V35 const &v35, V36 const &v36, V37 const &v37, V38 const &v38, V39 const &v39, V40 const &v40, V41 const &v41, V42 const &v42, V43 const &v43, V44 const &v44, V45 const &v45, V46 const &v46, V47 const &v47, V48 const &v48, V49 const &v49, V50 const &v50, V51 const &v51, V52 const &v52, V53 const &v53, V54 const &v54, V55 const &v55, V56 const &v56, V57 const &v57, V58 const &v58, V59 const &v59, V60 const &v60, V61 const &v61, V62 const &v62, V63 const &v63, V64 const &v64, V65 const &v65, V66 const &v66, V67 const &v67, V68 const &v68, V69 const &v69, V70 const &v70, V71 const &v71, V72 const &v72, V73 const &v73, V74 const &v74, V75 const &v75, V76 const &v76, V77 const &v77, V78 const &v78, V79 const &v79, V80 const &v80, V81 const &v81, V82 const &v82, V83 const &v83, V84 const &v84, V85 const &v85, V86 const &v86, V87 const &v87, V88 const &v88, V89 const &v89, V90 const &v90, V91 const &v91, V92 const &v92, V93 const &v93, V94 const &v94, V95 const &v95, V96 const &v96, V97 const &v97, V98 const &v98, V99 const &v99) {
    assert( _colNames.Length() == 99 );
    assert( _colTypes[0] == DbTypeIDs<V1>::ID() );
    assert( _colTypes[1] == DbTypeIDs<V2>::ID() );
    assert( _colTypes[2] == DbTypeIDs<V3>::ID() );
    assert( _colTypes[3] == DbTypeIDs<V4>::ID() );
    assert( _colTypes[4] == DbTypeIDs<V5>::ID() );
    assert( _colTypes[5] == DbTypeIDs<V6>::ID() );
    assert( _colTypes[6] == DbTypeIDs<V7>::ID() );
    assert( _colTypes[7] == DbTypeIDs<V8>::ID() );
    assert( _colTypes[8] == DbTypeIDs<V9>::ID() );
    assert( _colTypes[9] == DbTypeIDs<V10>::ID() );
    assert( _colTypes[10] == DbTypeIDs<V11>::ID() );
    assert( _colTypes[11] == DbTypeIDs<V12>::ID() );
    assert( _colTypes[12] == DbTypeIDs<V13>::ID() );
    assert( _colTypes[13] == DbTypeIDs<V14>::ID() );
    assert( _colTypes[14] == DbTypeIDs<V15>::ID() );
    assert( _colTypes[15] == DbTypeIDs<V16>::ID() );
    assert( _colTypes[16] == DbTypeIDs<V17>::ID() );
    assert( _colTypes[17] == DbTypeIDs<V18>::ID() );
    assert( _colTypes[18] == DbTypeIDs<V19>::ID() );
    assert( _colTypes[19] == DbTypeIDs<V20>::ID() );
    assert( _colTypes[20] == DbTypeIDs<V21>::ID() );
    assert( _colTypes[21] == DbTypeIDs<V22>::ID() );
    assert( _colTypes[22] == DbTypeIDs<V23>::ID() );
    assert( _colTypes[23] == DbTypeIDs<V24>::ID() );
    assert( _colTypes[24] == DbTypeIDs<V25>::ID() );
    assert( _colTypes[25] == DbTypeIDs<V26>::ID() );
    assert( _colTypes[26] == DbTypeIDs<V27>::ID() );
    assert( _colTypes[27] == DbTypeIDs<V28>::ID() );
    assert( _colTypes[28] == DbTypeIDs<V29>::ID() );
    assert( _colTypes[29] == DbTypeIDs<V30>::ID() );
    assert( _colTypes[30] == DbTypeIDs<V31>::ID() );
    assert( _colTypes[31] == DbTypeIDs<V32>::ID() );
    assert( _colTypes[32] == DbTypeIDs<V33>::ID() );
    assert( _colTypes[33] == DbTypeIDs<V34>::ID() );
    assert( _colTypes[34] == DbTypeIDs<V35>::ID() );
    assert( _colTypes[35] == DbTypeIDs<V36>::ID() );
    assert( _colTypes[36] == DbTypeIDs<V37>::ID() );
    assert( _colTypes[37] == DbTypeIDs<V38>::ID() );
    assert( _colTypes[38] == DbTypeIDs<V39>::ID() );
    assert( _colTypes[39] == DbTypeIDs<V40>::ID() );
    assert( _colTypes[40] == DbTypeIDs<V41>::ID() );
    assert( _colTypes[41] == DbTypeIDs<V42>::ID() );
    assert( _colTypes[42] == DbTypeIDs<V43>::ID() );
    assert( _colTypes[43] == DbTypeIDs<V44>::ID() );
    assert( _colTypes[44] == DbTypeIDs<V45>::ID() );
    assert( _colTypes[45] == DbTypeIDs<V46>::ID() );
    assert( _colTypes[46] == DbTypeIDs<V47>::ID() );
    assert( _colTypes[47] == DbTypeIDs<V48>::ID() );
    assert( _colTypes[48] == DbTypeIDs<V49>::ID() );
    assert( _colTypes[49] == DbTypeIDs<V50>::ID() );
    assert( _colTypes[50] == DbTypeIDs<V51>::ID() );
    assert( _colTypes[51] == DbTypeIDs<V52>::ID() );
    assert( _colTypes[52] == DbTypeIDs<V53>::ID() );
    assert( _colTypes[53] == DbTypeIDs<V54>::ID() );
    assert( _colTypes[54] == DbTypeIDs<V55>::ID() );
    assert( _colTypes[55] == DbTypeIDs<V56>::ID() );
    assert( _colTypes[56] == DbTypeIDs<V57>::ID() );
    assert( _colTypes[57] == DbTypeIDs<V58>::ID() );
    assert( _colTypes[58] == DbTypeIDs<V59>::ID() );
    assert( _colTypes[59] == DbTypeIDs<V60>::ID() );
    assert( _colTypes[60] == DbTypeIDs<V61>::ID() );
    assert( _colTypes[61] == DbTypeIDs<V62>::ID() );
    assert( _colTypes[62] == DbTypeIDs<V63>::ID() );
    assert( _colTypes[63] == DbTypeIDs<V64>::ID() );
    assert( _colTypes[64] == DbTypeIDs<V65>::ID() );
    assert( _colTypes[65] == DbTypeIDs<V66>::ID() );
    assert( _colTypes[66] == DbTypeIDs<V67>::ID() );
    assert( _colTypes[67] == DbTypeIDs<V68>::ID() );
    assert( _colTypes[68] == DbTypeIDs<V69>::ID() );
    assert( _colTypes[69] == DbTypeIDs<V70>::ID() );
    assert( _colTypes[70] == DbTypeIDs<V71>::ID() );
    assert( _colTypes[71] == DbTypeIDs<V72>::ID() );
    assert( _colTypes[72] == DbTypeIDs<V73>::ID() );
    assert( _colTypes[73] == DbTypeIDs<V74>::ID() );
    assert( _colTypes[74] == DbTypeIDs<V75>::ID() );
    assert( _colTypes[75] == DbTypeIDs<V76>::ID() );
    assert( _colTypes[76] == DbTypeIDs<V77>::ID() );
    assert( _colTypes[77] == DbTypeIDs<V78>::ID() );
    assert( _colTypes[78] == DbTypeIDs<V79>::ID() );
    assert( _colTypes[79] == DbTypeIDs<V80>::ID() );
    assert( _colTypes[80] == DbTypeIDs<V81>::ID() );
    assert( _colTypes[81] == DbTypeIDs<V82>::ID() );
    assert( _colTypes[82] == DbTypeIDs<V83>::ID() );
    assert( _colTypes[83] == DbTypeIDs<V84>::ID() );
    assert( _colTypes[84] == DbTypeIDs<V85>::ID() );
    assert( _colTypes[85] == DbTypeIDs<V86>::ID() );
    assert( _colTypes[86] == DbTypeIDs<V87>::ID() );
    assert( _colTypes[87] == DbTypeIDs<V88>::ID() );
    assert( _colTypes[88] == DbTypeIDs<V89>::ID() );
    assert( _colTypes[89] == DbTypeIDs<V90>::ID() );
    assert( _colTypes[90] == DbTypeIDs<V91>::ID() );
    assert( _colTypes[91] == DbTypeIDs<V92>::ID() );
    assert( _colTypes[92] == DbTypeIDs<V93>::ID() );
    assert( _colTypes[93] == DbTypeIDs<V94>::ID() );
    assert( _colTypes[94] == DbTypeIDs<V95>::ID() );
    assert( _colTypes[95] == DbTypeIDs<V96>::ID() );
    assert( _colTypes[96] == DbTypeIDs<V97>::ID() );
    assert( _colTypes[97] == DbTypeIDs<V98>::ID() );
    assert( _colTypes[98] == DbTypeIDs<V99>::ID() );
    ((List<V1>*)_colDatas[0])->Add(v1);
    ((List<V2>*)_colDatas[1])->Add(v2);
    ((List<V3>*)_colDatas[2])->Add(v3);
    ((List<V4>*)_colDatas[3])->Add(v4);
    ((List<V5>*)_colDatas[4])->Add(v5);
    ((List<V6>*)_colDatas[5])->Add(v6);
    ((List<V7>*)_colDatas[6])->Add(v7);
    ((List<V8>*)_colDatas[7])->Add(v8);
    ((List<V9>*)_colDatas[8])->Add(v9);
    ((List<V10>*)_colDatas[9])->Add(v10);
    ((List<V11>*)_colDatas[10])->Add(v11);
    ((List<V12>*)_colDatas[11])->Add(v12);
    ((List<V13>*)_colDatas[12])->Add(v13);
    ((List<V14>*)_colDatas[13])->Add(v14);
    ((List<V15>*)_colDatas[14])->Add(v15);
    ((List<V16>*)_colDatas[15])->Add(v16);
    ((List<V17>*)_colDatas[16])->Add(v17);
    ((List<V18>*)_colDatas[17])->Add(v18);
    ((List<V19>*)_colDatas[18])->Add(v19);
    ((List<V20>*)_colDatas[19])->Add(v20);
    ((List<V21>*)_colDatas[20])->Add(v21);
    ((List<V22>*)_colDatas[21])->Add(v22);
    ((List<V23>*)_colDatas[22])->Add(v23);
    ((List<V24>*)_colDatas[23])->Add(v24);
    ((List<V25>*)_colDatas[24])->Add(v25);
    ((List<V26>*)_colDatas[25])->Add(v26);
    ((List<V27>*)_colDatas[26])->Add(v27);
    ((List<V28>*)_colDatas[27])->Add(v28);
    ((List<V29>*)_colDatas[28])->Add(v29);
    ((List<V30>*)_colDatas[29])->Add(v30);
    ((List<V31>*)_colDatas[30])->Add(v31);
    ((List<V32>*)_colDatas[31])->Add(v32);
    ((List<V33>*)_colDatas[32])->Add(v33);
    ((List<V34>*)_colDatas[33])->Add(v34);
    ((List<V35>*)_colDatas[34])->Add(v35);
    ((List<V36>*)_colDatas[35])->Add(v36);
    ((List<V37>*)_colDatas[36])->Add(v37);
    ((List<V38>*)_colDatas[37])->Add(v38);
    ((List<V39>*)_colDatas[38])->Add(v39);
    ((List<V40>*)_colDatas[39])->Add(v40);
    ((List<V41>*)_colDatas[40])->Add(v41);
    ((List<V42>*)_colDatas[41])->Add(v42);
    ((List<V43>*)_colDatas[42])->Add(v43);
    ((List<V44>*)_colDatas[43])->Add(v44);
    ((List<V45>*)_colDatas[44])->Add(v45);
    ((List<V46>*)_colDatas[45])->Add(v46);
    ((List<V47>*)_colDatas[46])->Add(v47);
    ((List<V48>*)_colDatas[47])->Add(v48);
    ((List<V49>*)_colDatas[48])->Add(v49);
    ((List<V50>*)_colDatas[49])->Add(v50);
    ((List<V51>*)_colDatas[50])->Add(v51);
    ((List<V52>*)_colDatas[51])->Add(v52);
    ((List<V53>*)_colDatas[52])->Add(v53);
    ((List<V54>*)_colDatas[53])->Add(v54);
    ((List<V55>*)_colDatas[54])->Add(v55);
    ((List<V56>*)_colDatas[55])->Add(v56);
    ((List<V57>*)_colDatas[56])->Add(v57);
    ((List<V58>*)_colDatas[57])->Add(v58);
    ((List<V59>*)_colDatas[58])->Add(v59);
    ((List<V60>*)_colDatas[59])->Add(v60);
    ((List<V61>*)_colDatas[60])->Add(v61);
    ((List<V62>*)_colDatas[61])->Add(v62);
    ((List<V63>*)_colDatas[62])->Add(v63);
    ((List<V64>*)_colDatas[63])->Add(v64);
    ((List<V65>*)_colDatas[64])->Add(v65);
    ((List<V66>*)_colDatas[65])->Add(v66);
    ((List<V67>*)_colDatas[66])->Add(v67);
    ((List<V68>*)_colDatas[67])->Add(v68);
    ((List<V69>*)_colDatas[68])->Add(v69);
    ((List<V70>*)_colDatas[69])->Add(v70);
    ((List<V71>*)_colDatas[70])->Add(v71);
    ((List<V72>*)_colDatas[71])->Add(v72);
    ((List<V73>*)_colDatas[72])->Add(v73);
    ((List<V74>*)_colDatas[73])->Add(v74);
    ((List<V75>*)_colDatas[74])->Add(v75);
    ((List<V76>*)_colDatas[75])->Add(v76);
    ((List<V77>*)_colDatas[76])->Add(v77);
    ((List<V78>*)_colDatas[77])->Add(v78);
    ((List<V79>*)_colDatas[78])->Add(v79);
    ((List<V80>*)_colDatas[79])->Add(v80);
    ((List<V81>*)_colDatas[80])->Add(v81);
    ((List<V82>*)_colDatas[81])->Add(v82);
    ((List<V83>*)_colDatas[82])->Add(v83);
    ((List<V84>*)_colDatas[83])->Add(v84);
    ((List<V85>*)_colDatas[84])->Add(v85);
    ((List<V86>*)_colDatas[85])->Add(v86);
    ((List<V87>*)_colDatas[86])->Add(v87);
    ((List<V88>*)_colDatas[87])->Add(v88);
    ((List<V89>*)_colDatas[88])->Add(v89);
    ((List<V90>*)_colDatas[89])->Add(v90);
    ((List<V91>*)_colDatas[90])->Add(v91);
    ((List<V92>*)_colDatas[91])->Add(v92);
    ((List<V93>*)_colDatas[92])->Add(v93);
    ((List<V94>*)_colDatas[93])->Add(v94);
    ((List<V95>*)_colDatas[94])->Add(v95);
    ((List<V96>*)_colDatas[95])->Add(v96);
    ((List<V97>*)_colDatas[96])->Add(v97);
    ((List<V98>*)_colDatas[97])->Add(v98);
    ((List<V99>*)_colDatas[98])->Add(v99);
    ++_rowCount;
    return *this;
}
